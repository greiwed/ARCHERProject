
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007320  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00012c58  080074b0  080074b0  000174b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a108  0801a108  00030c98  2**0
                  CONTENTS
  4 .ARM          00000008  0801a108  0801a108  0002a108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a110  0801a110  00030c98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a110  0801a110  0002a110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a114  0801a114  0002a114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000c98  20000000  0801a118  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00019838  20000c98  0801adb0  00030c98  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001a4d0  0801adb0  0003a4d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030c98  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003af23  00000000  00000000  00030cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006bd7  00000000  00000000  0006bbeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000172ae  00000000  00000000  000727c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000015a8  00000000  00000000  00089a70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001758  00000000  00000000  0008b018  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0002ae1b  00000000  00000000  0008c770  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001b749  00000000  00000000  000b758b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000ede89  00000000  00000000  000d2cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001c0b5d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003bf0  00000000  00000000  001c0bd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000c98 	.word	0x20000c98
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007498 	.word	0x08007498

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000c9c 	.word	0x20000c9c
 80001cc:	08007498 	.word	0x08007498

080001d0 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 80001d0:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 80001d2:	2b01      	cmp	r3, #1
	IT       LS
 80001d4:	bf98      	it	ls
	BXLS     lr
 80001d6:	4770      	bxls	lr
	PUSH     {r4-r9}
 80001d8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 80001dc:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 80001de:	089b      	lsrs	r3, r3, #2

080001e0 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 80001e0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 80001e4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 80001e8:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 80001ea:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 80001ee:	4480      	add	r8, r0
	ADD      r9,r0,r9
 80001f0:	4481      	add	r9, r0
	ADD      r2,r0,r2
 80001f2:	4402      	add	r2, r0
	ADD      r12,r0,r12
 80001f4:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 80001f6:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 80001fa:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 80001fe:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000200:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000204:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000208:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800020c:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000210:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 8000212:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8000216:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 800021a:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 800021c:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000220:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8000224:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8000228:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 800022c:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 800022e:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000230:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 8000232:	d1d5      	bne.n	80001e0 <arm_bitreversal_32_0>
	POP      {r4-r9}
 8000234:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8000238:	4770      	bx	lr

0800023a <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 800023a:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 800023c:	2b01      	cmp	r3, #1
	IT       LS
 800023e:	bf98      	it	ls
	BXLS     lr
 8000240:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000242:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 8000246:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 8000248:	089b      	lsrs	r3, r3, #2

0800024a <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 800024a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 800024e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000252:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 8000254:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 8000258:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 800025c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 8000260:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 8000264:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 8000268:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800026c:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 8000270:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000272:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000276:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 800027a:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800027e:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000282:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 8000284:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000286:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 8000288:	d1df      	bne.n	800024a <arm_bitreversal_16_0>
	POP      {r4-r9}
 800028a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_d2f>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b94:	bf24      	itt	cs
 8000b96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9e:	d90d      	bls.n	8000bbc <__aeabi_d2f+0x30>
 8000ba0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bb0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb4:	bf08      	it	eq
 8000bb6:	f020 0001 	biceq.w	r0, r0, #1
 8000bba:	4770      	bx	lr
 8000bbc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bc0:	d121      	bne.n	8000c06 <__aeabi_d2f+0x7a>
 8000bc2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc6:	bfbc      	itt	lt
 8000bc8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	4770      	bxlt	lr
 8000bce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bd2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd6:	f1c2 0218 	rsb	r2, r2, #24
 8000bda:	f1c2 0c20 	rsb	ip, r2, #32
 8000bde:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be2:	fa20 f002 	lsr.w	r0, r0, r2
 8000be6:	bf18      	it	ne
 8000be8:	f040 0001 	orrne.w	r0, r0, #1
 8000bec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf8:	ea40 000c 	orr.w	r0, r0, ip
 8000bfc:	fa23 f302 	lsr.w	r3, r3, r2
 8000c00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c04:	e7cc      	b.n	8000ba0 <__aeabi_d2f+0x14>
 8000c06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0a:	d107      	bne.n	8000c1c <__aeabi_d2f+0x90>
 8000c0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c10:	bf1e      	ittt	ne
 8000c12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c1a:	4770      	bxne	lr
 8000c1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <__aeabi_ldivmod>:
 8000c2c:	b97b      	cbnz	r3, 8000c4e <__aeabi_ldivmod+0x22>
 8000c2e:	b972      	cbnz	r2, 8000c4e <__aeabi_ldivmod+0x22>
 8000c30:	2900      	cmp	r1, #0
 8000c32:	bfbe      	ittt	lt
 8000c34:	2000      	movlt	r0, #0
 8000c36:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c3a:	e006      	blt.n	8000c4a <__aeabi_ldivmod+0x1e>
 8000c3c:	bf08      	it	eq
 8000c3e:	2800      	cmpeq	r0, #0
 8000c40:	bf1c      	itt	ne
 8000c42:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000c46:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4a:	f000 b9bd 	b.w	8000fc8 <__aeabi_idiv0>
 8000c4e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c52:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c56:	2900      	cmp	r1, #0
 8000c58:	db09      	blt.n	8000c6e <__aeabi_ldivmod+0x42>
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	db1a      	blt.n	8000c94 <__aeabi_ldivmod+0x68>
 8000c5e:	f000 f84d 	bl	8000cfc <__udivmoddi4>
 8000c62:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c6a:	b004      	add	sp, #16
 8000c6c:	4770      	bx	lr
 8000c6e:	4240      	negs	r0, r0
 8000c70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	db1b      	blt.n	8000cb0 <__aeabi_ldivmod+0x84>
 8000c78:	f000 f840 	bl	8000cfc <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4240      	negs	r0, r0
 8000c88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8c:	4252      	negs	r2, r2
 8000c8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c92:	4770      	bx	lr
 8000c94:	4252      	negs	r2, r2
 8000c96:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c9a:	f000 f82f 	bl	8000cfc <__udivmoddi4>
 8000c9e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca6:	b004      	add	sp, #16
 8000ca8:	4240      	negs	r0, r0
 8000caa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cae:	4770      	bx	lr
 8000cb0:	4252      	negs	r2, r2
 8000cb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb6:	f000 f821 	bl	8000cfc <__udivmoddi4>
 8000cba:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc2:	b004      	add	sp, #16
 8000cc4:	4252      	negs	r2, r2
 8000cc6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_uldivmod>:
 8000ccc:	b953      	cbnz	r3, 8000ce4 <__aeabi_uldivmod+0x18>
 8000cce:	b94a      	cbnz	r2, 8000ce4 <__aeabi_uldivmod+0x18>
 8000cd0:	2900      	cmp	r1, #0
 8000cd2:	bf08      	it	eq
 8000cd4:	2800      	cmpeq	r0, #0
 8000cd6:	bf1c      	itt	ne
 8000cd8:	f04f 31ff 	movne.w	r1, #4294967295
 8000cdc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce0:	f000 b972 	b.w	8000fc8 <__aeabi_idiv0>
 8000ce4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cec:	f000 f806 	bl	8000cfc <__udivmoddi4>
 8000cf0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf8:	b004      	add	sp, #16
 8000cfa:	4770      	bx	lr

08000cfc <__udivmoddi4>:
 8000cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d00:	9e08      	ldr	r6, [sp, #32]
 8000d02:	4604      	mov	r4, r0
 8000d04:	4688      	mov	r8, r1
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d14b      	bne.n	8000da2 <__udivmoddi4+0xa6>
 8000d0a:	428a      	cmp	r2, r1
 8000d0c:	4615      	mov	r5, r2
 8000d0e:	d967      	bls.n	8000de0 <__udivmoddi4+0xe4>
 8000d10:	fab2 f282 	clz	r2, r2
 8000d14:	b14a      	cbz	r2, 8000d2a <__udivmoddi4+0x2e>
 8000d16:	f1c2 0720 	rsb	r7, r2, #32
 8000d1a:	fa01 f302 	lsl.w	r3, r1, r2
 8000d1e:	fa20 f707 	lsr.w	r7, r0, r7
 8000d22:	4095      	lsls	r5, r2
 8000d24:	ea47 0803 	orr.w	r8, r7, r3
 8000d28:	4094      	lsls	r4, r2
 8000d2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d2e:	0c23      	lsrs	r3, r4, #16
 8000d30:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d34:	fa1f fc85 	uxth.w	ip, r5
 8000d38:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d3c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d40:	fb07 f10c 	mul.w	r1, r7, ip
 8000d44:	4299      	cmp	r1, r3
 8000d46:	d909      	bls.n	8000d5c <__udivmoddi4+0x60>
 8000d48:	18eb      	adds	r3, r5, r3
 8000d4a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d4e:	f080 811b 	bcs.w	8000f88 <__udivmoddi4+0x28c>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 8118 	bls.w	8000f88 <__udivmoddi4+0x28c>
 8000d58:	3f02      	subs	r7, #2
 8000d5a:	442b      	add	r3, r5
 8000d5c:	1a5b      	subs	r3, r3, r1
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d64:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d6c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d70:	45a4      	cmp	ip, r4
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x8c>
 8000d74:	192c      	adds	r4, r5, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	f080 8107 	bcs.w	8000f8c <__udivmoddi4+0x290>
 8000d7e:	45a4      	cmp	ip, r4
 8000d80:	f240 8104 	bls.w	8000f8c <__udivmoddi4+0x290>
 8000d84:	3802      	subs	r0, #2
 8000d86:	442c      	add	r4, r5
 8000d88:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d8c:	eba4 040c 	sub.w	r4, r4, ip
 8000d90:	2700      	movs	r7, #0
 8000d92:	b11e      	cbz	r6, 8000d9c <__udivmoddi4+0xa0>
 8000d94:	40d4      	lsrs	r4, r2
 8000d96:	2300      	movs	r3, #0
 8000d98:	e9c6 4300 	strd	r4, r3, [r6]
 8000d9c:	4639      	mov	r1, r7
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d909      	bls.n	8000dba <__udivmoddi4+0xbe>
 8000da6:	2e00      	cmp	r6, #0
 8000da8:	f000 80eb 	beq.w	8000f82 <__udivmoddi4+0x286>
 8000dac:	2700      	movs	r7, #0
 8000dae:	e9c6 0100 	strd	r0, r1, [r6]
 8000db2:	4638      	mov	r0, r7
 8000db4:	4639      	mov	r1, r7
 8000db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dba:	fab3 f783 	clz	r7, r3
 8000dbe:	2f00      	cmp	r7, #0
 8000dc0:	d147      	bne.n	8000e52 <__udivmoddi4+0x156>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d302      	bcc.n	8000dcc <__udivmoddi4+0xd0>
 8000dc6:	4282      	cmp	r2, r0
 8000dc8:	f200 80fa 	bhi.w	8000fc0 <__udivmoddi4+0x2c4>
 8000dcc:	1a84      	subs	r4, r0, r2
 8000dce:	eb61 0303 	sbc.w	r3, r1, r3
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	4698      	mov	r8, r3
 8000dd6:	2e00      	cmp	r6, #0
 8000dd8:	d0e0      	beq.n	8000d9c <__udivmoddi4+0xa0>
 8000dda:	e9c6 4800 	strd	r4, r8, [r6]
 8000dde:	e7dd      	b.n	8000d9c <__udivmoddi4+0xa0>
 8000de0:	b902      	cbnz	r2, 8000de4 <__udivmoddi4+0xe8>
 8000de2:	deff      	udf	#255	; 0xff
 8000de4:	fab2 f282 	clz	r2, r2
 8000de8:	2a00      	cmp	r2, #0
 8000dea:	f040 808f 	bne.w	8000f0c <__udivmoddi4+0x210>
 8000dee:	1b49      	subs	r1, r1, r5
 8000df0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df4:	fa1f f885 	uxth.w	r8, r5
 8000df8:	2701      	movs	r7, #1
 8000dfa:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dfe:	0c23      	lsrs	r3, r4, #16
 8000e00:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e08:	fb08 f10c 	mul.w	r1, r8, ip
 8000e0c:	4299      	cmp	r1, r3
 8000e0e:	d907      	bls.n	8000e20 <__udivmoddi4+0x124>
 8000e10:	18eb      	adds	r3, r5, r3
 8000e12:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e16:	d202      	bcs.n	8000e1e <__udivmoddi4+0x122>
 8000e18:	4299      	cmp	r1, r3
 8000e1a:	f200 80cd 	bhi.w	8000fb8 <__udivmoddi4+0x2bc>
 8000e1e:	4684      	mov	ip, r0
 8000e20:	1a59      	subs	r1, r3, r1
 8000e22:	b2a3      	uxth	r3, r4
 8000e24:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e28:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e2c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e30:	fb08 f800 	mul.w	r8, r8, r0
 8000e34:	45a0      	cmp	r8, r4
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0x14c>
 8000e38:	192c      	adds	r4, r5, r4
 8000e3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x14a>
 8000e40:	45a0      	cmp	r8, r4
 8000e42:	f200 80b6 	bhi.w	8000fb2 <__udivmoddi4+0x2b6>
 8000e46:	4618      	mov	r0, r3
 8000e48:	eba4 0408 	sub.w	r4, r4, r8
 8000e4c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e50:	e79f      	b.n	8000d92 <__udivmoddi4+0x96>
 8000e52:	f1c7 0c20 	rsb	ip, r7, #32
 8000e56:	40bb      	lsls	r3, r7
 8000e58:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e5c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e60:	fa01 f407 	lsl.w	r4, r1, r7
 8000e64:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e68:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e6c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e70:	4325      	orrs	r5, r4
 8000e72:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e76:	0c2c      	lsrs	r4, r5, #16
 8000e78:	fb08 3319 	mls	r3, r8, r9, r3
 8000e7c:	fa1f fa8e 	uxth.w	sl, lr
 8000e80:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e84:	fb09 f40a 	mul.w	r4, r9, sl
 8000e88:	429c      	cmp	r4, r3
 8000e8a:	fa02 f207 	lsl.w	r2, r2, r7
 8000e8e:	fa00 f107 	lsl.w	r1, r0, r7
 8000e92:	d90b      	bls.n	8000eac <__udivmoddi4+0x1b0>
 8000e94:	eb1e 0303 	adds.w	r3, lr, r3
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	f080 8087 	bcs.w	8000fae <__udivmoddi4+0x2b2>
 8000ea0:	429c      	cmp	r4, r3
 8000ea2:	f240 8084 	bls.w	8000fae <__udivmoddi4+0x2b2>
 8000ea6:	f1a9 0902 	sub.w	r9, r9, #2
 8000eaa:	4473      	add	r3, lr
 8000eac:	1b1b      	subs	r3, r3, r4
 8000eae:	b2ad      	uxth	r5, r5
 8000eb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000eb8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ebc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ec0:	45a2      	cmp	sl, r4
 8000ec2:	d908      	bls.n	8000ed6 <__udivmoddi4+0x1da>
 8000ec4:	eb1e 0404 	adds.w	r4, lr, r4
 8000ec8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ecc:	d26b      	bcs.n	8000fa6 <__udivmoddi4+0x2aa>
 8000ece:	45a2      	cmp	sl, r4
 8000ed0:	d969      	bls.n	8000fa6 <__udivmoddi4+0x2aa>
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	4474      	add	r4, lr
 8000ed6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	eba4 040a 	sub.w	r4, r4, sl
 8000ee2:	454c      	cmp	r4, r9
 8000ee4:	46c2      	mov	sl, r8
 8000ee6:	464b      	mov	r3, r9
 8000ee8:	d354      	bcc.n	8000f94 <__udivmoddi4+0x298>
 8000eea:	d051      	beq.n	8000f90 <__udivmoddi4+0x294>
 8000eec:	2e00      	cmp	r6, #0
 8000eee:	d069      	beq.n	8000fc4 <__udivmoddi4+0x2c8>
 8000ef0:	ebb1 050a 	subs.w	r5, r1, sl
 8000ef4:	eb64 0403 	sbc.w	r4, r4, r3
 8000ef8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000efc:	40fd      	lsrs	r5, r7
 8000efe:	40fc      	lsrs	r4, r7
 8000f00:	ea4c 0505 	orr.w	r5, ip, r5
 8000f04:	e9c6 5400 	strd	r5, r4, [r6]
 8000f08:	2700      	movs	r7, #0
 8000f0a:	e747      	b.n	8000d9c <__udivmoddi4+0xa0>
 8000f0c:	f1c2 0320 	rsb	r3, r2, #32
 8000f10:	fa20 f703 	lsr.w	r7, r0, r3
 8000f14:	4095      	lsls	r5, r2
 8000f16:	fa01 f002 	lsl.w	r0, r1, r2
 8000f1a:	fa21 f303 	lsr.w	r3, r1, r3
 8000f1e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f22:	4338      	orrs	r0, r7
 8000f24:	0c01      	lsrs	r1, r0, #16
 8000f26:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f2a:	fa1f f885 	uxth.w	r8, r5
 8000f2e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f32:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f36:	fb07 f308 	mul.w	r3, r7, r8
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f40:	d907      	bls.n	8000f52 <__udivmoddi4+0x256>
 8000f42:	1869      	adds	r1, r5, r1
 8000f44:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f48:	d22f      	bcs.n	8000faa <__udivmoddi4+0x2ae>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d92d      	bls.n	8000faa <__udivmoddi4+0x2ae>
 8000f4e:	3f02      	subs	r7, #2
 8000f50:	4429      	add	r1, r5
 8000f52:	1acb      	subs	r3, r1, r3
 8000f54:	b281      	uxth	r1, r0
 8000f56:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f5a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f62:	fb00 f308 	mul.w	r3, r0, r8
 8000f66:	428b      	cmp	r3, r1
 8000f68:	d907      	bls.n	8000f7a <__udivmoddi4+0x27e>
 8000f6a:	1869      	adds	r1, r5, r1
 8000f6c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f70:	d217      	bcs.n	8000fa2 <__udivmoddi4+0x2a6>
 8000f72:	428b      	cmp	r3, r1
 8000f74:	d915      	bls.n	8000fa2 <__udivmoddi4+0x2a6>
 8000f76:	3802      	subs	r0, #2
 8000f78:	4429      	add	r1, r5
 8000f7a:	1ac9      	subs	r1, r1, r3
 8000f7c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f80:	e73b      	b.n	8000dfa <__udivmoddi4+0xfe>
 8000f82:	4637      	mov	r7, r6
 8000f84:	4630      	mov	r0, r6
 8000f86:	e709      	b.n	8000d9c <__udivmoddi4+0xa0>
 8000f88:	4607      	mov	r7, r0
 8000f8a:	e6e7      	b.n	8000d5c <__udivmoddi4+0x60>
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	e6fb      	b.n	8000d88 <__udivmoddi4+0x8c>
 8000f90:	4541      	cmp	r1, r8
 8000f92:	d2ab      	bcs.n	8000eec <__udivmoddi4+0x1f0>
 8000f94:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f98:	eb69 020e 	sbc.w	r2, r9, lr
 8000f9c:	3801      	subs	r0, #1
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	e7a4      	b.n	8000eec <__udivmoddi4+0x1f0>
 8000fa2:	4660      	mov	r0, ip
 8000fa4:	e7e9      	b.n	8000f7a <__udivmoddi4+0x27e>
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	e795      	b.n	8000ed6 <__udivmoddi4+0x1da>
 8000faa:	4667      	mov	r7, ip
 8000fac:	e7d1      	b.n	8000f52 <__udivmoddi4+0x256>
 8000fae:	4681      	mov	r9, r0
 8000fb0:	e77c      	b.n	8000eac <__udivmoddi4+0x1b0>
 8000fb2:	3802      	subs	r0, #2
 8000fb4:	442c      	add	r4, r5
 8000fb6:	e747      	b.n	8000e48 <__udivmoddi4+0x14c>
 8000fb8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fbc:	442b      	add	r3, r5
 8000fbe:	e72f      	b.n	8000e20 <__udivmoddi4+0x124>
 8000fc0:	4638      	mov	r0, r7
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xda>
 8000fc4:	4637      	mov	r7, r6
 8000fc6:	e6e9      	b.n	8000d9c <__udivmoddi4+0xa0>

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <classification_Algorithm>:
			30,47,79,134,228,381,624,996,1547,2334,3421,4867,6724,9015,11730,14813,18153,21590,24917,27907,30331,31990,32742,32520,31344,29317,26609,23438,20033,16617,13377,10450,7923,5830,4164,2887,1944,1272,809,501,303,180,106,63,38,25,18,14,12,12,11,
			22,39,71,126,220,373,616,988,1539,2326,3412,4859,6715,9006,11722,14805,18145,21581,24909,27899,30323,31982,32734,32512,31336,29309,26601,23429,20025,16609,13368,10442,7914,5822,4156,2879,1936,1264,801,493,295,172,98,54,30,17,10,6,4,3,3
};


void classification_Algorithm(uint8_t* decision){
 8000fcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000fd0:	b0a5      	sub	sp, #148	; 0x94
  *         @arg @ref LL_DMA_CURRENTTARGETMEM0
  *         @arg @ref LL_DMA_CURRENTTARGETMEM1
  */
__STATIC_INLINE uint32_t LL_DMA_GetCurrentTargetMem(DMA_TypeDef *DMAx, uint32_t Stream)
{
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CT));
 8000fd2:	4b82      	ldr	r3, [pc, #520]	; (80011dc <classification_Algorithm+0x210>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
	volatile float32_t mic3Prob;
	volatile float32_t mic4Prob;
	float32_t voteVal;

	// Locate Current Buffer to Read From
	if(LL_DMA_CURRENTTARGETMEM0 == LL_DMA_GetCurrentTargetMem(DMA2,LL_DMA_STREAM_0)){
 8000fd6:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8000fda:	d142      	bne.n	8001062 <classification_Algorithm+0x96>
  *         @arg @ref LL_DMA_STREAM_7
  * @retval Between 0 to 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetMemory1Address(DMA_TypeDef *DMAx, uint32_t Stream)
{
  return (((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M1AR);
 8000fdc:	4b7f      	ldr	r3, [pc, #508]	; (80011dc <classification_Algorithm+0x210>)
 8000fde:	691c      	ldr	r4, [r3, #16]
 8000fe0:	4e7f      	ldr	r6, [pc, #508]	; (80011e0 <classification_Algorithm+0x214>)
void classification_Algorithm(uint8_t* decision){
 8000fe2:	4632      	mov	r2, r6
		return;
	}

	// Mic 1 Characteristics
	j = 0;
	for(i = 0; i < SMALL_BUFF_SIZE;i+=4){
 8000fe4:	2300      	movs	r3, #0
		tempTimeData[j] = readBuffAddr[i];
 8000fe6:	f934 1013 	ldrsh.w	r1, [r4, r3, lsl #1]
 8000fea:	f822 1f02 	strh.w	r1, [r2, #2]!
	for(i = 0; i < SMALL_BUFF_SIZE;i+=4){
 8000fee:	3304      	adds	r3, #4
 8000ff0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000ff4:	d1f7      	bne.n	8000fe6 <classification_Algorithm+0x1a>
 8000ff6:	4680      	mov	r8, r0
		j++;
	}

	arm_status r = arm_rfft_init_q15(&fft, (SMALL_BUFF_SIZE/4), 0, 1);
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001000:	a81e      	add	r0, sp, #120	; 0x78
 8001002:	f002 fcf1 	bl	80039e8 <arm_rfft_init_q15>
	if(r == ARM_MATH_SUCCESS){
 8001006:	4681      	mov	r9, r0
 8001008:	b3b0      	cbz	r0, 8001078 <classification_Algorithm+0xac>
 800100a:	4627      	mov	r7, r4
 800100c:	4975      	ldr	r1, [pc, #468]	; (80011e4 <classification_Algorithm+0x218>)
	for(i = 0; i < SMALL_BUFF_SIZE;i+=4){
 800100e:	4635      	mov	r5, r6
 8001010:	4623      	mov	r3, r4
	}

	// Mic 2 Characteristics
	j = 0;
	for(i = 0; i < SMALL_BUFF_SIZE;i+=4){
		tempTimeData[j] = readBuffAddr[i+1];
 8001012:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8001016:	f825 2f02 	strh.w	r2, [r5, #2]!
 800101a:	3308      	adds	r3, #8
	for(i = 0; i < SMALL_BUFF_SIZE;i+=4){
 800101c:	428d      	cmp	r5, r1
 800101e:	d1f8      	bne.n	8001012 <classification_Algorithm+0x46>
		j++;
	}

	if(r == ARM_MATH_SUCCESS){
 8001020:	f1b9 0f00 	cmp.w	r9, #0
 8001024:	d066      	beq.n	80010f4 <classification_Algorithm+0x128>
	for(i = 0; i < SMALL_BUFF_SIZE;i+=4){
 8001026:	4634      	mov	r4, r6
 8001028:	463b      	mov	r3, r7
	}

	// Mic 3 Characteristics
	j = 0;
	for(i = 0; i < SMALL_BUFF_SIZE;i+=4){
		tempTimeData[j] = readBuffAddr[i+2];
 800102a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800102e:	f824 2f02 	strh.w	r2, [r4, #2]!
 8001032:	3308      	adds	r3, #8
	for(i = 0; i < SMALL_BUFF_SIZE;i+=4){
 8001034:	42ac      	cmp	r4, r5
 8001036:	d1f8      	bne.n	800102a <classification_Algorithm+0x5e>
		j++;
	}

	if(r == ARM_MATH_SUCCESS){
 8001038:	f1b9 0f00 	cmp.w	r9, #0
 800103c:	f000 8094 	beq.w	8001168 <classification_Algorithm+0x19c>
	}

	// Mic 4 Characteristics
	j = 0;
	for(i = 0; i < SMALL_BUFF_SIZE;i+=4){
		tempTimeData[j] = readBuffAddr[i+3];
 8001040:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001044:	f826 3f02 	strh.w	r3, [r6, #2]!
 8001048:	3708      	adds	r7, #8
	for(i = 0; i < SMALL_BUFF_SIZE;i+=4){
 800104a:	42a6      	cmp	r6, r4
 800104c:	d1f8      	bne.n	8001040 <classification_Algorithm+0x74>
		j++;
	}

	if(r == ARM_MATH_SUCCESS){
 800104e:	f1b9 0f00 	cmp.w	r9, #0
 8001052:	f000 80cf 	beq.w	80011f4 <classification_Algorithm+0x228>
			*decision = 1;
		}else{
			*decision = 0;
		}
	}else{
		*decision = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	f888 3000 	strb.w	r3, [r8]
	}

}
 800105c:	b025      	add	sp, #148	; 0x94
 800105e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CT));
 8001062:	4b5e      	ldr	r3, [pc, #376]	; (80011dc <classification_Algorithm+0x210>)
 8001064:	681b      	ldr	r3, [r3, #0]
	}else if(LL_DMA_CURRENTTARGETMEM1 == LL_DMA_GetCurrentTargetMem(DMA2,LL_DMA_STREAM_0)){
 8001066:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800106a:	d002      	beq.n	8001072 <classification_Algorithm+0xa6>
  return (READ_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR));
 800106c:	4b5b      	ldr	r3, [pc, #364]	; (80011dc <classification_Algorithm+0x210>)
 800106e:	68dc      	ldr	r4, [r3, #12]
 8001070:	e7b6      	b.n	8000fe0 <classification_Algorithm+0x14>
		*decision = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	7003      	strb	r3, [r0, #0]
 8001076:	e7f1      	b.n	800105c <classification_Algorithm+0x90>
		arm_rfft_q15(&fft, tempTimeData, tempFreqData);
 8001078:	4d5b      	ldr	r5, [pc, #364]	; (80011e8 <classification_Algorithm+0x21c>)
 800107a:	462a      	mov	r2, r5
 800107c:	495b      	ldr	r1, [pc, #364]	; (80011ec <classification_Algorithm+0x220>)
 800107e:	a81e      	add	r0, sp, #120	; 0x78
 8001080:	f002 fdae 	bl	8003be0 <arm_rfft_q15>
		arm_abs_q15(tempFreqData, tempFreqData, (SMALL_BUFF_SIZE/8));
 8001084:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001088:	4629      	mov	r1, r5
 800108a:	4628      	mov	r0, r5
 800108c:	f002 f825 	bl	80030da <arm_abs_q15>
		arm_max_q15(&tempFreqData[1], (SMALL_BUFF_SIZE / 8)-1, &mic1FreqVal, &mic1FreqIdx);
 8001090:	ab1c      	add	r3, sp, #112	; 0x70
 8001092:	f10d 0276 	add.w	r2, sp, #118	; 0x76
 8001096:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800109a:	1ca8      	adds	r0, r5, #2
 800109c:	f002 f878 	bl	8003190 <arm_max_q15>
		mic1Freq = (mic1FreqIdx + 1) * (SAMP_FREQ / 2) / (SMALL_BUFF_SIZE / 8);
 80010a0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80010a2:	f642 036e 	movw	r3, #10350	; 0x286e
 80010a6:	fb02 3303 	mla	r3, r2, r3, r3
 80010aa:	0adb      	lsrs	r3, r3, #11
 80010ac:	931b      	str	r3, [sp, #108]	; 0x6c
		if(mic1FreqVal != 0){
 80010ae:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
 80010b2:	b21b      	sxth	r3, r3
 80010b4:	b17b      	cbz	r3, 80010d6 <classification_Algorithm+0x10a>
 80010b6:	1eaa      	subs	r2, r5, #2
 80010b8:	f502 5580 	add.w	r5, r2, #4096	; 0x1000
				tempFreqData[i] = tempFreqData[i] * 100 / mic1FreqVal;
 80010bc:	2064      	movs	r0, #100	; 0x64
 80010be:	f8bd 3076 	ldrh.w	r3, [sp, #118]	; 0x76
 80010c2:	b219      	sxth	r1, r3
 80010c4:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 80010c8:	fb00 f303 	mul.w	r3, r0, r3
 80010cc:	fb93 f3f1 	sdiv	r3, r3, r1
 80010d0:	8013      	strh	r3, [r2, #0]
			for(i=0;i<(SMALL_BUFF_SIZE/8);i++){
 80010d2:	42aa      	cmp	r2, r5
 80010d4:	d1f3      	bne.n	80010be <classification_Algorithm+0xf2>
		arm_power_q15(&tempFreqData[10], 500, &mic1Power);
 80010d6:	aa18      	add	r2, sp, #96	; 0x60
 80010d8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80010dc:	4844      	ldr	r0, [pc, #272]	; (80011f0 <classification_Algorithm+0x224>)
 80010de:	f002 f8f4 	bl	80032ca <arm_power_q15>
		mic1Power = mic1Power / POWER_DIV;
 80010e2:	22be      	movs	r2, #190	; 0xbe
 80010e4:	2300      	movs	r3, #0
 80010e6:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 80010ea:	f7ff fd9f 	bl	8000c2c <__aeabi_ldivmod>
 80010ee:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 80010f2:	e78a      	b.n	800100a <classification_Algorithm+0x3e>
		arm_rfft_q15(&fft, tempTimeData, tempFreqData);
 80010f4:	4c3c      	ldr	r4, [pc, #240]	; (80011e8 <classification_Algorithm+0x21c>)
 80010f6:	4622      	mov	r2, r4
 80010f8:	493c      	ldr	r1, [pc, #240]	; (80011ec <classification_Algorithm+0x220>)
 80010fa:	a81e      	add	r0, sp, #120	; 0x78
 80010fc:	f002 fd70 	bl	8003be0 <arm_rfft_q15>
		arm_abs_q15(tempFreqData, tempFreqData, (SMALL_BUFF_SIZE/8));
 8001100:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001104:	4621      	mov	r1, r4
 8001106:	4620      	mov	r0, r4
 8001108:	f001 ffe7 	bl	80030da <arm_abs_q15>
		arm_max_q15(&tempFreqData[1], (SMALL_BUFF_SIZE / 8)-1, &mic2FreqVal, &mic2FreqIdx);
 800110c:	ab16      	add	r3, sp, #88	; 0x58
 800110e:	f10d 025e 	add.w	r2, sp, #94	; 0x5e
 8001112:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8001116:	1ca0      	adds	r0, r4, #2
 8001118:	f002 f83a 	bl	8003190 <arm_max_q15>
		mic2Freq = (mic2FreqIdx + 1) * (SAMP_FREQ / 2) / (SMALL_BUFF_SIZE / 8);
 800111c:	f642 036e 	movw	r3, #10350	; 0x286e
 8001120:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8001122:	fb02 3303 	mla	r3, r2, r3, r3
 8001126:	0adb      	lsrs	r3, r3, #11
 8001128:	9315      	str	r3, [sp, #84]	; 0x54
		if(mic2FreqVal != 0){
 800112a:	f9bd 105e 	ldrsh.w	r1, [sp, #94]	; 0x5e
 800112e:	b161      	cbz	r1, 800114a <classification_Algorithm+0x17e>
 8001130:	1ea2      	subs	r2, r4, #2
 8001132:	f502 5480 	add.w	r4, r2, #4096	; 0x1000
				tempFreqData[i] = tempFreqData[i] * 100 / mic2FreqVal;
 8001136:	2064      	movs	r0, #100	; 0x64
 8001138:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 800113c:	fb00 f303 	mul.w	r3, r0, r3
 8001140:	fb93 f3f1 	sdiv	r3, r3, r1
 8001144:	8013      	strh	r3, [r2, #0]
			for(i=0;i<(SMALL_BUFF_SIZE/8);i++){
 8001146:	42a2      	cmp	r2, r4
 8001148:	d1f6      	bne.n	8001138 <classification_Algorithm+0x16c>
		arm_power_q15(&tempFreqData[10], 500, &mic2Power);
 800114a:	aa12      	add	r2, sp, #72	; 0x48
 800114c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001150:	4827      	ldr	r0, [pc, #156]	; (80011f0 <classification_Algorithm+0x224>)
 8001152:	f002 f8ba 	bl	80032ca <arm_power_q15>
		mic2Power = mic2Power / POWER_DIV;
 8001156:	22be      	movs	r2, #190	; 0xbe
 8001158:	2300      	movs	r3, #0
 800115a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800115e:	f7ff fd65 	bl	8000c2c <__aeabi_ldivmod>
 8001162:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8001166:	e75e      	b.n	8001026 <classification_Algorithm+0x5a>
		arm_rfft_q15(&fft, tempTimeData, tempFreqData);
 8001168:	4d1f      	ldr	r5, [pc, #124]	; (80011e8 <classification_Algorithm+0x21c>)
 800116a:	462a      	mov	r2, r5
 800116c:	491f      	ldr	r1, [pc, #124]	; (80011ec <classification_Algorithm+0x220>)
 800116e:	a81e      	add	r0, sp, #120	; 0x78
 8001170:	f002 fd36 	bl	8003be0 <arm_rfft_q15>
		arm_abs_q15(tempFreqData, tempFreqData, (SMALL_BUFF_SIZE/8));
 8001174:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001178:	4629      	mov	r1, r5
 800117a:	4628      	mov	r0, r5
 800117c:	f001 ffad 	bl	80030da <arm_abs_q15>
		arm_max_q15(&tempFreqData[1], (SMALL_BUFF_SIZE / 8)-1, &mic3FreqVal, &mic3FreqIdx);
 8001180:	ab10      	add	r3, sp, #64	; 0x40
 8001182:	f10d 0246 	add.w	r2, sp, #70	; 0x46
 8001186:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800118a:	1ca8      	adds	r0, r5, #2
 800118c:	f002 f800 	bl	8003190 <arm_max_q15>
		mic3Freq = (mic3FreqIdx + 1) * (SAMP_FREQ / 2) / (SMALL_BUFF_SIZE / 8);
 8001190:	f642 036e 	movw	r3, #10350	; 0x286e
 8001194:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001196:	fb02 3303 	mla	r3, r2, r3, r3
 800119a:	0adb      	lsrs	r3, r3, #11
 800119c:	930f      	str	r3, [sp, #60]	; 0x3c
		if(mic3FreqVal != 0){
 800119e:	f9bd 1046 	ldrsh.w	r1, [sp, #70]	; 0x46
 80011a2:	b161      	cbz	r1, 80011be <classification_Algorithm+0x1f2>
 80011a4:	1eaa      	subs	r2, r5, #2
 80011a6:	f502 5580 	add.w	r5, r2, #4096	; 0x1000
				tempFreqData[i] = tempFreqData[i] * 100 / mic3FreqVal;
 80011aa:	2064      	movs	r0, #100	; 0x64
 80011ac:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 80011b0:	fb00 f303 	mul.w	r3, r0, r3
 80011b4:	fb93 f3f1 	sdiv	r3, r3, r1
 80011b8:	8013      	strh	r3, [r2, #0]
			for(i=0;i<(SMALL_BUFF_SIZE/8);i++){
 80011ba:	42aa      	cmp	r2, r5
 80011bc:	d1f6      	bne.n	80011ac <classification_Algorithm+0x1e0>
		arm_power_q15(&tempFreqData[10], 500, &mic3Power);
 80011be:	aa0c      	add	r2, sp, #48	; 0x30
 80011c0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80011c4:	480a      	ldr	r0, [pc, #40]	; (80011f0 <classification_Algorithm+0x224>)
 80011c6:	f002 f880 	bl	80032ca <arm_power_q15>
		mic3Power = mic3Power / POWER_DIV;
 80011ca:	22be      	movs	r2, #190	; 0xbe
 80011cc:	2300      	movs	r3, #0
 80011ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80011d2:	f7ff fd2b 	bl	8000c2c <__aeabi_ldivmod>
 80011d6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80011da:	e731      	b.n	8001040 <classification_Algorithm+0x74>
 80011dc:	40026410 	.word	0x40026410
 80011e0:	20001cb2 	.word	0x20001cb2
 80011e4:	20003cb2 	.word	0x20003cb2
 80011e8:	20000cb4 	.word	0x20000cb4
 80011ec:	20001cb4 	.word	0x20001cb4
 80011f0:	20000cc8 	.word	0x20000cc8
		arm_rfft_q15(&fft, tempTimeData, tempFreqData);
 80011f4:	4c96      	ldr	r4, [pc, #600]	; (8001450 <classification_Algorithm+0x484>)
 80011f6:	4622      	mov	r2, r4
 80011f8:	4996      	ldr	r1, [pc, #600]	; (8001454 <classification_Algorithm+0x488>)
 80011fa:	a81e      	add	r0, sp, #120	; 0x78
 80011fc:	f002 fcf0 	bl	8003be0 <arm_rfft_q15>
		arm_abs_q15(tempFreqData, tempFreqData, (SMALL_BUFF_SIZE/8));
 8001200:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001204:	4621      	mov	r1, r4
 8001206:	4620      	mov	r0, r4
 8001208:	f001 ff67 	bl	80030da <arm_abs_q15>
		arm_max_q15(&tempFreqData[1], (SMALL_BUFF_SIZE / 8)-1, &mic4FreqVal, &mic4FreqIdx);
 800120c:	ab0a      	add	r3, sp, #40	; 0x28
 800120e:	f10d 022e 	add.w	r2, sp, #46	; 0x2e
 8001212:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8001216:	1ca0      	adds	r0, r4, #2
 8001218:	f001 ffba 	bl	8003190 <arm_max_q15>
		mic4Freq = (mic4FreqIdx + 1) * (SAMP_FREQ / 2) / (SMALL_BUFF_SIZE / 8);
 800121c:	f642 046e 	movw	r4, #10350	; 0x286e
 8001220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001222:	fb03 4404 	mla	r4, r3, r4, r4
		if(mic4FreqVal != 0){
 8001226:	f9bd 102e 	ldrsh.w	r1, [sp, #46]	; 0x2e
 800122a:	b161      	cbz	r1, 8001246 <classification_Algorithm+0x27a>
 800122c:	4a8a      	ldr	r2, [pc, #552]	; (8001458 <classification_Algorithm+0x48c>)
 800122e:	f502 5580 	add.w	r5, r2, #4096	; 0x1000
				tempFreqData[i] = tempFreqData[i] * 100 / mic4FreqVal;
 8001232:	2064      	movs	r0, #100	; 0x64
 8001234:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 8001238:	fb00 f303 	mul.w	r3, r0, r3
 800123c:	fb93 f3f1 	sdiv	r3, r3, r1
 8001240:	8013      	strh	r3, [r2, #0]
			for(i=0;i<(SMALL_BUFF_SIZE/8);i++){
 8001242:	42aa      	cmp	r2, r5
 8001244:	d1f6      	bne.n	8001234 <classification_Algorithm+0x268>
		arm_power_q15(&tempFreqData[10], 500, &mic4Power);
 8001246:	aa08      	add	r2, sp, #32
 8001248:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800124c:	4883      	ldr	r0, [pc, #524]	; (800145c <classification_Algorithm+0x490>)
 800124e:	f002 f83c 	bl	80032ca <arm_power_q15>
		mic4Power = mic4Power / POWER_DIV;
 8001252:	22be      	movs	r2, #190	; 0xbe
 8001254:	2300      	movs	r3, #0
 8001256:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800125a:	f7ff fce7 	bl	8000c2c <__aeabi_ldivmod>
 800125e:	e9cd 0108 	strd	r0, r1, [sp, #32]
		rowNum = mic1Freq / freqStep;
 8001262:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8001264:	4b7e      	ldr	r3, [pc, #504]	; (8001460 <classification_Algorithm+0x494>)
 8001266:	fba3 3202 	umull	r3, r2, r3, r2
 800126a:	0912      	lsrs	r2, r2, #4
 800126c:	2300      	movs	r3, #0
 800126e:	e9cd 2306 	strd	r2, r3, [sp, #24]
		colNum = mic1Power / powerStep;
 8001272:	22c8      	movs	r2, #200	; 0xc8
 8001274:	2300      	movs	r3, #0
 8001276:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800127a:	f7ff fcd7 	bl	8000c2c <__aeabi_ldivmod>
 800127e:	e9cd 0104 	strd	r0, r1, [sp, #16]
		if(rowNum > freqLength){
 8001282:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001286:	2a16      	cmp	r2, #22
 8001288:	f173 0300 	sbcs.w	r3, r3, #0
 800128c:	db03      	blt.n	8001296 <classification_Algorithm+0x2ca>
			rowNum = freqLength - 1;
 800128e:	2214      	movs	r2, #20
 8001290:	2300      	movs	r3, #0
 8001292:	e9cd 2306 	strd	r2, r3, [sp, #24]
		if(colNum > powerLength){
 8001296:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800129a:	2a34      	cmp	r2, #52	; 0x34
 800129c:	f173 0300 	sbcs.w	r3, r3, #0
 80012a0:	db03      	blt.n	80012aa <classification_Algorithm+0x2de>
			colNum = powerLength - 1;
 80012a2:	2232      	movs	r2, #50	; 0x32
 80012a4:	2300      	movs	r3, #0
 80012a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
		classTableIdx = (rowNum * 51) + colNum;
 80012aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80012ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
		mic1Prob = (float32_t) classificationTable[classTableIdx] / (float32_t) 65536;
 80012b2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80012b6:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80012ba:	1813      	adds	r3, r2, r0
 80012bc:	4a69      	ldr	r2, [pc, #420]	; (8001464 <classification_Algorithm+0x498>)
 80012be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012c2:	ee07 3a90 	vmov	s15, r3
 80012c6:	eefb 7ac8 	vcvt.f32.u32	s15, s15, #16
 80012ca:	edcd 7a03 	vstr	s15, [sp, #12]
		rowNum = mic2Freq / freqStep;
 80012ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80012d0:	4b63      	ldr	r3, [pc, #396]	; (8001460 <classification_Algorithm+0x494>)
 80012d2:	fba3 3202 	umull	r3, r2, r3, r2
 80012d6:	0912      	lsrs	r2, r2, #4
 80012d8:	2300      	movs	r3, #0
 80012da:	e9cd 2306 	strd	r2, r3, [sp, #24]
		colNum = mic2Power / powerStep;
 80012de:	22c8      	movs	r2, #200	; 0xc8
 80012e0:	2300      	movs	r3, #0
 80012e2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80012e6:	f7ff fca1 	bl	8000c2c <__aeabi_ldivmod>
 80012ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
		if(rowNum > freqLength){
 80012ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80012f2:	2a16      	cmp	r2, #22
 80012f4:	f173 0300 	sbcs.w	r3, r3, #0
 80012f8:	db03      	blt.n	8001302 <classification_Algorithm+0x336>
			rowNum = freqLength - 1;
 80012fa:	2214      	movs	r2, #20
 80012fc:	2300      	movs	r3, #0
 80012fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
		if(colNum > powerLength){
 8001302:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001306:	2a34      	cmp	r2, #52	; 0x34
 8001308:	f173 0300 	sbcs.w	r3, r3, #0
 800130c:	db03      	blt.n	8001316 <classification_Algorithm+0x34a>
			colNum = powerLength - 1;
 800130e:	2232      	movs	r2, #50	; 0x32
 8001310:	2300      	movs	r3, #0
 8001312:	e9cd 2304 	strd	r2, r3, [sp, #16]
		classTableIdx = (rowNum * 51) + colNum;
 8001316:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800131a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
		mic2Prob = (float32_t) classificationTable[classTableIdx]  / (float32_t) 65536;
 800131e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001322:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8001326:	1813      	adds	r3, r2, r0
 8001328:	4a4e      	ldr	r2, [pc, #312]	; (8001464 <classification_Algorithm+0x498>)
 800132a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800132e:	ee07 3a90 	vmov	s15, r3
 8001332:	eefb 7ac8 	vcvt.f32.u32	s15, s15, #16
 8001336:	edcd 7a02 	vstr	s15, [sp, #8]
		rowNum = mic3Freq / freqStep;
 800133a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800133c:	4b48      	ldr	r3, [pc, #288]	; (8001460 <classification_Algorithm+0x494>)
 800133e:	fba3 3202 	umull	r3, r2, r3, r2
 8001342:	0912      	lsrs	r2, r2, #4
 8001344:	2300      	movs	r3, #0
 8001346:	e9cd 2306 	strd	r2, r3, [sp, #24]
		colNum = mic3Power / powerStep;
 800134a:	22c8      	movs	r2, #200	; 0xc8
 800134c:	2300      	movs	r3, #0
 800134e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8001352:	f7ff fc6b 	bl	8000c2c <__aeabi_ldivmod>
 8001356:	e9cd 0104 	strd	r0, r1, [sp, #16]
		if(rowNum > freqLength){
 800135a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800135e:	2a16      	cmp	r2, #22
 8001360:	f173 0300 	sbcs.w	r3, r3, #0
 8001364:	db03      	blt.n	800136e <classification_Algorithm+0x3a2>
			rowNum = freqLength - 1;
 8001366:	2214      	movs	r2, #20
 8001368:	2300      	movs	r3, #0
 800136a:	e9cd 2306 	strd	r2, r3, [sp, #24]
		if(colNum > powerLength){
 800136e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001372:	2a34      	cmp	r2, #52	; 0x34
 8001374:	f173 0300 	sbcs.w	r3, r3, #0
 8001378:	db03      	blt.n	8001382 <classification_Algorithm+0x3b6>
			colNum = powerLength - 1;
 800137a:	2232      	movs	r2, #50	; 0x32
 800137c:	2300      	movs	r3, #0
 800137e:	e9cd 2304 	strd	r2, r3, [sp, #16]
		classTableIdx = (rowNum * 51) + colNum;
 8001382:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001386:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
		mic3Prob = (float32_t) classificationTable[classTableIdx] / (float32_t) 65536;
 800138a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800138e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8001392:	1813      	adds	r3, r2, r0
 8001394:	4a33      	ldr	r2, [pc, #204]	; (8001464 <classification_Algorithm+0x498>)
 8001396:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800139a:	ee07 3a90 	vmov	s15, r3
 800139e:	eefb 7ac8 	vcvt.f32.u32	s15, s15, #16
 80013a2:	edcd 7a01 	vstr	s15, [sp, #4]
		rowNum = mic4Freq / freqStep;
 80013a6:	4a2e      	ldr	r2, [pc, #184]	; (8001460 <classification_Algorithm+0x494>)
 80013a8:	fba2 3204 	umull	r3, r2, r2, r4
 80013ac:	0bd2      	lsrs	r2, r2, #15
 80013ae:	2300      	movs	r3, #0
 80013b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
		colNum = mic4Power / powerStep;
 80013b4:	22c8      	movs	r2, #200	; 0xc8
 80013b6:	2300      	movs	r3, #0
 80013b8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80013bc:	f7ff fc36 	bl	8000c2c <__aeabi_ldivmod>
 80013c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
		if(rowNum > freqLength){
 80013c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80013c8:	2a16      	cmp	r2, #22
 80013ca:	f173 0300 	sbcs.w	r3, r3, #0
 80013ce:	db03      	blt.n	80013d8 <classification_Algorithm+0x40c>
			rowNum = freqLength - 1;
 80013d0:	2214      	movs	r2, #20
 80013d2:	2300      	movs	r3, #0
 80013d4:	e9cd 2306 	strd	r2, r3, [sp, #24]
		if(colNum > powerLength){
 80013d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80013dc:	2a34      	cmp	r2, #52	; 0x34
 80013de:	f173 0300 	sbcs.w	r3, r3, #0
 80013e2:	db03      	blt.n	80013ec <classification_Algorithm+0x420>
			colNum = powerLength - 1;
 80013e4:	2232      	movs	r2, #50	; 0x32
 80013e6:	2300      	movs	r3, #0
 80013e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
		classTableIdx = (rowNum * 51) + colNum;
 80013ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80013f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
		mic4Prob = (float32_t) classificationTable[classTableIdx] / (float32_t) 65536;
 80013f4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80013f8:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80013fc:	1813      	adds	r3, r2, r0
 80013fe:	4a19      	ldr	r2, [pc, #100]	; (8001464 <classification_Algorithm+0x498>)
 8001400:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001404:	ee07 3a90 	vmov	s15, r3
 8001408:	eefb 7ac8 	vcvt.f32.u32	s15, s15, #16
 800140c:	edcd 7a00 	vstr	s15, [sp]
		voteVal = (mic1Prob + mic2Prob + mic3Prob + mic4Prob) / sigma;
 8001410:	eddd 7a03 	vldr	s15, [sp, #12]
 8001414:	ed9d 5a02 	vldr	s10, [sp, #8]
 8001418:	eddd 5a01 	vldr	s11, [sp, #4]
 800141c:	ed9d 7a00 	vldr	s14, [sp]
 8001420:	4b11      	ldr	r3, [pc, #68]	; (8001468 <classification_Algorithm+0x49c>)
 8001422:	ed93 6a00 	vldr	s12, [r3]
		if(voteVal > vote){
 8001426:	4b11      	ldr	r3, [pc, #68]	; (800146c <classification_Algorithm+0x4a0>)
 8001428:	edd3 6a00 	vldr	s13, [r3]
		voteVal = (mic1Prob + mic2Prob + mic3Prob + mic4Prob) / sigma;
 800142c:	ee77 7a85 	vadd.f32	s15, s15, s10
 8001430:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8001434:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001438:	ee87 7a86 	vdiv.f32	s14, s15, s12
		if(voteVal > vote){
 800143c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8001440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			*decision = 1;
 8001444:	bf4c      	ite	mi
 8001446:	2301      	movmi	r3, #1
			*decision = 0;
 8001448:	2300      	movpl	r3, #0
 800144a:	f888 3000 	strb.w	r3, [r8]
 800144e:	e605      	b.n	800105c <classification_Algorithm+0x90>
 8001450:	20000cb4 	.word	0x20000cb4
 8001454:	20001cb4 	.word	0x20001cb4
 8001458:	20000cb2 	.word	0x20000cb2
 800145c:	20000cc8 	.word	0x20000cc8
 8001460:	10624dd3 	.word	0x10624dd3
 8001464:	080074b8 	.word	0x080074b8
 8001468:	20000000 	.word	0x20000000
 800146c:	20000004 	.word	0x20000004

08001470 <DMA_Configuration>:
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8001470:	492b      	ldr	r1, [pc, #172]	; (8001520 <DMA_Configuration+0xb0>)
 8001472:	688b      	ldr	r3, [r1, #8]
 8001474:	f043 0301 	orr.w	r3, r3, #1
 8001478:	608b      	str	r3, [r1, #8]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 800147a:	4b2a      	ldr	r3, [pc, #168]	; (8001524 <DMA_Configuration+0xb4>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8001482:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800148a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001492:	601a      	str	r2, [r3, #0]
	
	// Configure DMA settings
	LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_0, LL_DMA_CHANNEL_0);
	LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
	LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_0, LL_DMA_PRIORITY_LOW);
	MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMA2 + STREAM_OFFSET_TAB[LL_DMA_STREAM_0])))->CR, 0, DMA_SxCR_DBM);
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800149a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80014a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014a6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80014ae:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80014b6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 80014be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014c2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 80014ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80014ce:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 80014d0:	695a      	ldr	r2, [r3, #20]
 80014d2:	f022 0204 	bic.w	r2, r2, #4
 80014d6:	615a      	str	r2, [r3, #20]
    data_reg_addr = (uint32_t)&(ADCx->DR);
 80014d8:	4a13      	ldr	r2, [pc, #76]	; (8001528 <DMA_Configuration+0xb8>)
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, SrcAddress);
 80014da:	609a      	str	r2, [r3, #8]
    WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, DstAddress);
 80014dc:	4a13      	ldr	r2, [pc, #76]	; (800152c <DMA_Configuration+0xbc>)
 80014de:	60da      	str	r2, [r3, #12]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M1AR, DMA_SxM1AR_M1A, Address);
 80014e0:	691a      	ldr	r2, [r3, #16]
 80014e2:	4a13      	ldr	r2, [pc, #76]	; (8001530 <DMA_Configuration+0xc0>)
 80014e4:	611a      	str	r2, [r3, #16]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	0c12      	lsrs	r2, r2, #16
 80014ea:	0412      	lsls	r2, r2, #16
 80014ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014f0:	605a      	str	r2, [r3, #4]
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	f042 0210 	orr.w	r2, r2, #16
 80014f8:	601a      	str	r2, [r3, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	f042 0201 	orr.w	r2, r2, #1
 8001500:	601a      	str	r2, [r3, #0]
	LL_DMA_SetDataLength(DMA2,LL_DMA_STREAM_0, sizeof(buffer1)/sizeof(buffer1[0]));
	LL_DMA_EnableIT_TC(DMA2,LL_DMA_STREAM_0);
	
	// Enable DMA Steam
	LL_DMA_EnableStream(DMA2,LL_DMA_STREAM_0);
	WRITE_REG(ADC1->SR, ~LL_ADC_FLAG_OVR);
 8001502:	f06f 0320 	mvn.w	r3, #32
 8001506:	600b      	str	r3, [r1, #0]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001508:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	f042 0201 	orr.w	r2, r2, #1
 8001512:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
  SET_BIT(TIMx->CCER, Channels);
 8001514:	6a1a      	ldr	r2, [r3, #32]
 8001516:	f042 0201 	orr.w	r2, r2, #1
 800151a:	621a      	str	r2, [r3, #32]

	// Enable Timer
	LL_TIM_EnableCounter(TIM2);
	LL_TIM_CC_EnableChannel(TIM2,LL_TIM_CHANNEL_CH1);

}
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	40012000 	.word	0x40012000
 8001524:	40026410 	.word	0x40026410
 8001528:	4001204c 	.word	0x4001204c
 800152c:	20003cb4 	.word	0x20003cb4
 8001530:	2000bcb4 	.word	0x2000bcb4
 8001534:	00000000 	.word	0x00000000

08001538 <location_Algorithm>:
static int16_t tempTimeData[SMALL_BUFF_SIZE / 4];
//volatile static float32_t sqrtCorrect = 181.019;
volatile static float32_t sqrtCorrect = 46340.95;


void location_Algorithm(int16_t* clapLoc){
 8001538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800153c:	b0a8      	sub	sp, #160	; 0xa0
 800153e:	4680      	mov	r8, r0
	volatile float32_t delayArr[4];
	volatile float32_t minDelay;
	volatile uint32_t minDelayIdx;
	volatile uint32_t randomNum;
	volatile uint32_t select;
	volatile int32_t mic1Loc[] = {0,0};
 8001540:	2300      	movs	r3, #0
 8001542:	9307      	str	r3, [sp, #28]
 8001544:	9308      	str	r3, [sp, #32]
	volatile int32_t mic2Loc[] = {0,Y_LIM};
 8001546:	9324      	str	r3, [sp, #144]	; 0x90
 8001548:	2296      	movs	r2, #150	; 0x96
 800154a:	9225      	str	r2, [sp, #148]	; 0x94
 800154c:	aa05      	add	r2, sp, #20
 800154e:	a924      	add	r1, sp, #144	; 0x90
 8001550:	c903      	ldmia	r1, {r0, r1}
 8001552:	e882 0003 	stmia.w	r2, {r0, r1}
	volatile int32_t mic3Loc[] = {X_LIM,Y_LIM};
 8001556:	49d8      	ldr	r1, [pc, #864]	; (80018b8 <location_Algorithm+0x380>)
 8001558:	aa03      	add	r2, sp, #12
 800155a:	c903      	ldmia	r1, {r0, r1}
 800155c:	e882 0003 	stmia.w	r2, {r0, r1}
	volatile int32_t mic4Loc[] = {X_LIM,0};
 8001560:	22f0      	movs	r2, #240	; 0xf0
 8001562:	9226      	str	r2, [sp, #152]	; 0x98
 8001564:	9327      	str	r3, [sp, #156]	; 0x9c
 8001566:	ab01      	add	r3, sp, #4
 8001568:	aa28      	add	r2, sp, #160	; 0xa0
 800156a:	e912 0003 	ldmdb	r2, {r0, r1}
 800156e:	e883 0003 	stmia.w	r3, {r0, r1}
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CT));
 8001572:	4bd2      	ldr	r3, [pc, #840]	; (80018bc <location_Algorithm+0x384>)
 8001574:	681b      	ldr	r3, [r3, #0]
	volatile int32_t sign;


	if(LL_DMA_CURRENTTARGETMEM0 == LL_DMA_GetCurrentTargetMem(DMA2,LL_DMA_STREAM_0)){
 8001576:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800157a:	f040 8173 	bne.w	8001864 <location_Algorithm+0x32c>
  return (((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M1AR);
 800157e:	4bcf      	ldr	r3, [pc, #828]	; (80018bc <location_Algorithm+0x384>)
 8001580:	691c      	ldr	r4, [r3, #16]
		readBuffAddr = (int16_t*) LL_DMA_GetMemory1Address(DMA2,LL_DMA_STREAM_0);
		sign = 1;
 8001582:	2301      	movs	r3, #1
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	4ece      	ldr	r6, [pc, #824]	; (80018c0 <location_Algorithm+0x388>)
void location_Algorithm(int16_t* clapLoc){
 8001588:	4632      	mov	r2, r6
		return;
	}

	// Mic 1 Characteristics
	j = 0;
	for(i = 0; i < SMALL_BUFF_SIZE;i+=4){
 800158a:	2300      	movs	r3, #0
		tempTimeData[j] = readBuffAddr[i];
 800158c:	f934 1013 	ldrsh.w	r1, [r4, r3, lsl #1]
 8001590:	f822 1f02 	strh.w	r1, [r2, #2]!
	for(i = 0; i < SMALL_BUFF_SIZE;i+=4){
 8001594:	3304      	adds	r3, #4
 8001596:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800159a:	d1f7      	bne.n	800158c <location_Algorithm+0x54>
		j++;
	}

	arm_abs_q15(tempTimeData, tempTimeData, (SMALL_BUFF_SIZE / 4));
 800159c:	4dc9      	ldr	r5, [pc, #804]	; (80018c4 <location_Algorithm+0x38c>)
 800159e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015a2:	4629      	mov	r1, r5
 80015a4:	4628      	mov	r0, r5
 80015a6:	f001 fd98 	bl	80030da <arm_abs_q15>
	arm_max_q15(tempTimeData, (SMALL_BUFF_SIZE / 4), &maxMic1, &mic1Idx);
 80015aa:	ab22      	add	r3, sp, #136	; 0x88
 80015ac:	f10d 028e 	add.w	r2, sp, #142	; 0x8e
 80015b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015b4:	4628      	mov	r0, r5
 80015b6:	f001 fdeb 	bl	8003190 <arm_max_q15>
	delay1 = mic1Idx / (float32_t) SAMP_FREQ;
 80015ba:	eddd 7a22 	vldr	s15, [sp, #136]	; 0x88
 80015be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015c2:	eddf 6ac1 	vldr	s13, [pc, #772]	; 80018c8 <location_Algorithm+0x390>
 80015c6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80015ca:	ed8d 7a1b 	vstr	s14, [sp, #108]	; 0x6c
 80015ce:	4627      	mov	r7, r4
 80015d0:	f505 51ff 	add.w	r1, r5, #8160	; 0x1fe0
 80015d4:	311e      	adds	r1, #30
 80015d6:	4635      	mov	r5, r6
 80015d8:	4623      	mov	r3, r4

	// Mic 2 Characteristics
	j = 0;
	for(i = 0; i < SMALL_BUFF_SIZE;i+=4){
		tempTimeData[j] = readBuffAddr[i+1];
 80015da:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80015de:	f825 2f02 	strh.w	r2, [r5, #2]!
 80015e2:	3308      	adds	r3, #8
	for(i = 0; i < SMALL_BUFF_SIZE;i+=4){
 80015e4:	428d      	cmp	r5, r1
 80015e6:	d1f8      	bne.n	80015da <location_Algorithm+0xa2>
		j++;
	}

	arm_abs_q15(tempTimeData, tempTimeData, (SMALL_BUFF_SIZE / 4));
 80015e8:	4cb6      	ldr	r4, [pc, #728]	; (80018c4 <location_Algorithm+0x38c>)
 80015ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015ee:	4621      	mov	r1, r4
 80015f0:	4620      	mov	r0, r4
 80015f2:	f001 fd72 	bl	80030da <arm_abs_q15>
	arm_max_q15(tempTimeData, (SMALL_BUFF_SIZE / 4), &maxMic2, &mic2Idx);
 80015f6:	ab20      	add	r3, sp, #128	; 0x80
 80015f8:	f10d 0286 	add.w	r2, sp, #134	; 0x86
 80015fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001600:	4620      	mov	r0, r4
 8001602:	f001 fdc5 	bl	8003190 <arm_max_q15>
	delay2 = mic2Idx / (float32_t) SAMP_FREQ;
 8001606:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 800160a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800160e:	eddf 6aae 	vldr	s13, [pc, #696]	; 80018c8 <location_Algorithm+0x390>
 8001612:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001616:	ed8d 7a1a 	vstr	s14, [sp, #104]	; 0x68
 800161a:	4634      	mov	r4, r6
 800161c:	463b      	mov	r3, r7

	// Mic 3 Characteristics
	j = 0;
	for(i = 0; i < SMALL_BUFF_SIZE;i+=4){
		tempTimeData[j] = readBuffAddr[i+2];
 800161e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001622:	f824 2f02 	strh.w	r2, [r4, #2]!
 8001626:	3308      	adds	r3, #8
	for(i = 0; i < SMALL_BUFF_SIZE;i+=4){
 8001628:	42ac      	cmp	r4, r5
 800162a:	d1f8      	bne.n	800161e <location_Algorithm+0xe6>
		j++;
	}

	arm_abs_q15(tempTimeData, tempTimeData, (SMALL_BUFF_SIZE / 4));
 800162c:	4da5      	ldr	r5, [pc, #660]	; (80018c4 <location_Algorithm+0x38c>)
 800162e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001632:	4629      	mov	r1, r5
 8001634:	4628      	mov	r0, r5
 8001636:	f001 fd50 	bl	80030da <arm_abs_q15>
	arm_max_q15(tempTimeData, (SMALL_BUFF_SIZE / 4), &maxMic3, &mic3Idx);
 800163a:	ab1e      	add	r3, sp, #120	; 0x78
 800163c:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
 8001640:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001644:	4628      	mov	r0, r5
 8001646:	f001 fda3 	bl	8003190 <arm_max_q15>
	delay3 = mic3Idx / (float32_t) SAMP_FREQ;
 800164a:	eddd 7a1e 	vldr	s15, [sp, #120]	; 0x78
 800164e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001652:	eddf 6a9d 	vldr	s13, [pc, #628]	; 80018c8 <location_Algorithm+0x390>
 8001656:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800165a:	ed8d 7a19 	vstr	s14, [sp, #100]	; 0x64

	// Mic 4 Characteristics
	j = 0;
	for(i = 0; i < SMALL_BUFF_SIZE;i+=4){
		tempTimeData[j] = readBuffAddr[i+3];
 800165e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001662:	f826 3f02 	strh.w	r3, [r6, #2]!
 8001666:	3708      	adds	r7, #8
	for(i = 0; i < SMALL_BUFF_SIZE;i+=4){
 8001668:	42a6      	cmp	r6, r4
 800166a:	d1f8      	bne.n	800165e <location_Algorithm+0x126>
		j++;
	}

	arm_abs_q15(tempTimeData, tempTimeData, (SMALL_BUFF_SIZE / 4));
 800166c:	4c95      	ldr	r4, [pc, #596]	; (80018c4 <location_Algorithm+0x38c>)
 800166e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001672:	4621      	mov	r1, r4
 8001674:	4620      	mov	r0, r4
 8001676:	f001 fd30 	bl	80030da <arm_abs_q15>
	arm_max_q15(tempTimeData, (SMALL_BUFF_SIZE / 4), &maxMic4, &mic4Idx);
 800167a:	ab1c      	add	r3, sp, #112	; 0x70
 800167c:	f10d 0276 	add.w	r2, sp, #118	; 0x76
 8001680:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001684:	4620      	mov	r0, r4
 8001686:	f001 fd83 	bl	8003190 <arm_max_q15>
	delay4 = mic4Idx / (float32_t) SAMP_FREQ;
 800168a:	eddd 7a1c 	vldr	s15, [sp, #112]	; 0x70
 800168e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001692:	eddf 6a8d 	vldr	s13, [pc, #564]	; 80018c8 <location_Algorithm+0x390>
 8001696:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800169a:	ed8d 7a18 	vstr	s14, [sp, #96]	; 0x60

	// Delay differences
	delay12 = delay2 - delay1;
 800169e:	eddd 7a1a 	vldr	s15, [sp, #104]	; 0x68
 80016a2:	ed9d 7a1b 	vldr	s14, [sp, #108]	; 0x6c
 80016a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016aa:	edcd 7a17 	vstr	s15, [sp, #92]	; 0x5c
	delay13 = delay3 - delay1;
 80016ae:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
 80016b2:	ed9d 7a1b 	vldr	s14, [sp, #108]	; 0x6c
 80016b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016ba:	edcd 7a16 	vstr	s15, [sp, #88]	; 0x58
	delay14 = delay4 - delay1;
 80016be:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 80016c2:	ed9d 7a1b 	vldr	s14, [sp, #108]	; 0x6c
 80016c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016ca:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
	delay23 = delay3 - delay2;
 80016ce:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
 80016d2:	ed9d 7a1a 	vldr	s14, [sp, #104]	; 0x68
 80016d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016da:	edcd 7a14 	vstr	s15, [sp, #80]	; 0x50
	delay24 = delay4 - delay2;
 80016de:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 80016e2:	ed9d 7a1a 	vldr	s14, [sp, #104]	; 0x68
 80016e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016ea:	edcd 7a13 	vstr	s15, [sp, #76]	; 0x4c
	delay34 = delay4 - delay3;
 80016ee:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 80016f2:	ed9d 7a19 	vldr	s14, [sp, #100]	; 0x64
 80016f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016fa:	edcd 7a12 	vstr	s15, [sp, #72]	; 0x48

	// Absolute value of delays
	arm_abs_f32(&delay12,&delay12,1);
 80016fe:	2201      	movs	r2, #1
 8001700:	a917      	add	r1, sp, #92	; 0x5c
 8001702:	4608      	mov	r0, r1
 8001704:	f001 fcb5 	bl	8003072 <arm_abs_f32>
	arm_abs_f32(&delay13,&delay13,1);
 8001708:	2201      	movs	r2, #1
 800170a:	a916      	add	r1, sp, #88	; 0x58
 800170c:	4608      	mov	r0, r1
 800170e:	f001 fcb0 	bl	8003072 <arm_abs_f32>
	arm_abs_f32(&delay14,&delay14,1);
 8001712:	2201      	movs	r2, #1
 8001714:	a915      	add	r1, sp, #84	; 0x54
 8001716:	4608      	mov	r0, r1
 8001718:	f001 fcab 	bl	8003072 <arm_abs_f32>
	arm_abs_f32(&delay23,&delay23,1);
 800171c:	2201      	movs	r2, #1
 800171e:	a914      	add	r1, sp, #80	; 0x50
 8001720:	4608      	mov	r0, r1
 8001722:	f001 fca6 	bl	8003072 <arm_abs_f32>
	arm_abs_f32(&delay24,&delay24,1);
 8001726:	2201      	movs	r2, #1
 8001728:	a913      	add	r1, sp, #76	; 0x4c
 800172a:	4608      	mov	r0, r1
 800172c:	f001 fca1 	bl	8003072 <arm_abs_f32>
	arm_abs_f32(&delay34,&delay34,1);
 8001730:	2201      	movs	r2, #1
 8001732:	a912      	add	r1, sp, #72	; 0x48
 8001734:	4608      	mov	r0, r1
 8001736:	f001 fc9c 	bl	8003072 <arm_abs_f32>

	delayArr[0] = delay1 + 0.00001;
 800173a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800173c:	f7fe ff0c 	bl	8000558 <__aeabi_f2d>
 8001740:	a353      	add	r3, pc, #332	; (adr r3, 8001890 <location_Algorithm+0x358>)
 8001742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001746:	f7fe fda9 	bl	800029c <__adddf3>
 800174a:	f7ff fa1f 	bl	8000b8c <__aeabi_d2f>
 800174e:	900d      	str	r0, [sp, #52]	; 0x34
	delayArr[1] = delay2 + 0.00002;
 8001750:	981a      	ldr	r0, [sp, #104]	; 0x68
 8001752:	f7fe ff01 	bl	8000558 <__aeabi_f2d>
 8001756:	a350      	add	r3, pc, #320	; (adr r3, 8001898 <location_Algorithm+0x360>)
 8001758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175c:	f7fe fd9e 	bl	800029c <__adddf3>
 8001760:	f7ff fa14 	bl	8000b8c <__aeabi_d2f>
 8001764:	900e      	str	r0, [sp, #56]	; 0x38
	delayArr[2] = delay3 + 0.00003;
 8001766:	9819      	ldr	r0, [sp, #100]	; 0x64
 8001768:	f7fe fef6 	bl	8000558 <__aeabi_f2d>
 800176c:	a34c      	add	r3, pc, #304	; (adr r3, 80018a0 <location_Algorithm+0x368>)
 800176e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001772:	f7fe fd93 	bl	800029c <__adddf3>
 8001776:	f7ff fa09 	bl	8000b8c <__aeabi_d2f>
 800177a:	900f      	str	r0, [sp, #60]	; 0x3c
	delayArr[3] = delay4 + 0.00004;
 800177c:	9818      	ldr	r0, [sp, #96]	; 0x60
 800177e:	f7fe feeb 	bl	8000558 <__aeabi_f2d>
 8001782:	a349      	add	r3, pc, #292	; (adr r3, 80018a8 <location_Algorithm+0x370>)
 8001784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001788:	f7fe fd88 	bl	800029c <__adddf3>
 800178c:	f7ff f9fe 	bl	8000b8c <__aeabi_d2f>
 8001790:	9010      	str	r0, [sp, #64]	; 0x40

	arm_min_f32(delayArr,4,&minDelay,&minDelayIdx);
 8001792:	ab0b      	add	r3, sp, #44	; 0x2c
 8001794:	aa0c      	add	r2, sp, #48	; 0x30
 8001796:	2104      	movs	r1, #4
 8001798:	a80d      	add	r0, sp, #52	; 0x34
 800179a:	f001 fd3d 	bl	8003218 <arm_min_f32>

	aveDelayDiff = (delay12 + delay13 + delay14 + delay23 + delay24 + delay34) / 6;
 800179e:	eddd 7a17 	vldr	s15, [sp, #92]	; 0x5c
 80017a2:	ed9d 5a16 	vldr	s10, [sp, #88]	; 0x58
 80017a6:	eddd 5a15 	vldr	s11, [sp, #84]	; 0x54
 80017aa:	ed9d 6a14 	vldr	s12, [sp, #80]	; 0x50
 80017ae:	eddd 6a13 	vldr	s13, [sp, #76]	; 0x4c
 80017b2:	ed9d 7a12 	vldr	s14, [sp, #72]	; 0x48
 80017b6:	ee77 7a85 	vadd.f32	s15, s15, s10
 80017ba:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80017be:	ee77 7a86 	vadd.f32	s15, s15, s12
 80017c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80017c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017ca:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80017ce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80017d2:	ed8d 7a11 	vstr	s14, [sp, #68]	; 0x44
  return (uint32_t)(READ_REG(TIMx->CNT));
 80017d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017da:	6a5b      	ldr	r3, [r3, #36]	; 0x24

	randomNum = LL_TIM_GetCounter(TIM2);
 80017dc:	930a      	str	r3, [sp, #40]	; 0x28
	if(randomNum <= 58){
 80017de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80017e0:	2b3a      	cmp	r3, #58	; 0x3a
 80017e2:	d875      	bhi.n	80018d0 <location_Algorithm+0x398>
		select = 1;
 80017e4:	2301      	movs	r3, #1
 80017e6:	9309      	str	r3, [sp, #36]	; 0x24
		randomNum = randomNum / 5;
	}else{
		select = 1;
	}
	int stepSize = 6;
	int32_t stepRand = (int) ((((float32_t) randomNum / (float32_t) 58)) * 10);
 80017e8:	ed9d 7a0a 	vldr	s14, [sp, #40]	; 0x28
 80017ec:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80017f0:	eddf 6a36 	vldr	s13, [pc, #216]	; 80018cc <location_Algorithm+0x394>
 80017f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017f8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80017fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001800:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001804:	ee17 4a90 	vmov	r4, s15

	if(sign == 1){
 8001808:	9b00      	ldr	r3, [sp, #0]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d004      	beq.n	8001818 <location_Algorithm+0x2e0>
		stepRand = stepRand;
	}else if (sign == -1){
 800180e:	9b00      	ldr	r3, [sp, #0]
 8001810:	f1b3 3fff 	cmp.w	r3, #4294967295
		stepRand = -stepRand;
 8001814:	bf08      	it	eq
 8001816:	4264      	negeq	r4, r4
	}
	if(aveDelayDiff < 0.01){
 8001818:	9811      	ldr	r0, [sp, #68]	; 0x44
 800181a:	f7fe fe9d 	bl	8000558 <__aeabi_f2d>
 800181e:	a324      	add	r3, pc, #144	; (adr r3, 80018b0 <location_Algorithm+0x378>)
 8001820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001824:	f7ff f962 	bl	8000aec <__aeabi_dcmplt>
 8001828:	2800      	cmp	r0, #0
 800182a:	f000 80a3 	beq.w	8001974 <location_Algorithm+0x43c>
		if(select == 1){
 800182e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001830:	2b01      	cmp	r3, #1
 8001832:	d07b      	beq.n	800192c <location_Algorithm+0x3f4>
			clapLoc[0] = (X_LIM / 2) + stepRand;
			clapLoc[1] = (Y_LIM / 2) + stepRand;
		}else if(select == 2){
 8001834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001836:	2b02      	cmp	r3, #2
 8001838:	f000 8081 	beq.w	800193e <location_Algorithm+0x406>
			clapLoc[0] = (X_LIM / 2) - stepSize + stepRand;
			clapLoc[1] = (Y_LIM / 2) + stepSize + stepRand;
		}else if(select == 3){
 800183c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800183e:	2b03      	cmp	r3, #3
 8001840:	f000 8086 	beq.w	8001950 <location_Algorithm+0x418>
			clapLoc[0] = (X_LIM / 2) + stepSize + stepRand;
			clapLoc[1] = (Y_LIM / 2) + stepSize + stepRand;
		}else if(select == 4){
 8001844:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001846:	2b04      	cmp	r3, #4
 8001848:	f000 808b 	beq.w	8001962 <location_Algorithm+0x42a>
			clapLoc[0] = (X_LIM / 2) + stepSize + stepRand;
			clapLoc[1] = (Y_LIM / 2) - stepSize + stepRand;
		}else if(select == 5){
 800184c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800184e:	2b05      	cmp	r3, #5
 8001850:	d119      	bne.n	8001886 <location_Algorithm+0x34e>
			clapLoc[0] = (X_LIM / 2) - stepSize + stepRand;
 8001852:	b2a4      	uxth	r4, r4
 8001854:	f104 0372 	add.w	r3, r4, #114	; 0x72
 8001858:	f8a8 3000 	strh.w	r3, [r8]
			clapLoc[1] = (Y_LIM / 2) - stepSize + stepRand;
 800185c:	3445      	adds	r4, #69	; 0x45
 800185e:	f8a8 4002 	strh.w	r4, [r8, #2]
 8001862:	e010      	b.n	8001886 <location_Algorithm+0x34e>
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CT));
 8001864:	4b15      	ldr	r3, [pc, #84]	; (80018bc <location_Algorithm+0x384>)
 8001866:	681b      	ldr	r3, [r3, #0]
	}else if (LL_DMA_CURRENTTARGETMEM1 == LL_DMA_GetCurrentTargetMem(DMA2,LL_DMA_STREAM_0)){
 8001868:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800186c:	d005      	beq.n	800187a <location_Algorithm+0x342>
  return (READ_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR));
 800186e:	4b13      	ldr	r3, [pc, #76]	; (80018bc <location_Algorithm+0x384>)
 8001870:	68dc      	ldr	r4, [r3, #12]
		sign = -1;
 8001872:	f04f 33ff 	mov.w	r3, #4294967295
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	e685      	b.n	8001586 <location_Algorithm+0x4e>
		clapLoc[0] = X_LIM / 2;
 800187a:	2378      	movs	r3, #120	; 0x78
 800187c:	f8a8 3000 	strh.w	r3, [r8]
		clapLoc[1] = Y_LIM / 2;
 8001880:	234b      	movs	r3, #75	; 0x4b
 8001882:	f8a8 3002 	strh.w	r3, [r8, #2]

	clapLoc[0] = bestX;
	clapLoc[1] = bestY;
	*/

}
 8001886:	b028      	add	sp, #160	; 0xa0
 8001888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800188c:	f3af 8000 	nop.w
 8001890:	88e368f1 	.word	0x88e368f1
 8001894:	3ee4f8b5 	.word	0x3ee4f8b5
 8001898:	88e368f1 	.word	0x88e368f1
 800189c:	3ef4f8b5 	.word	0x3ef4f8b5
 80018a0:	4d551d69 	.word	0x4d551d69
 80018a4:	3eff7510 	.word	0x3eff7510
 80018a8:	88e368f1 	.word	0x88e368f1
 80018ac:	3f04f8b5 	.word	0x3f04f8b5
 80018b0:	47ae147b 	.word	0x47ae147b
 80018b4:	3f847ae1 	.word	0x3f847ae1
 80018b8:	080074b0 	.word	0x080074b0
 80018bc:	40026410 	.word	0x40026410
 80018c0:	20013cb2 	.word	0x20013cb2
 80018c4:	20013cb4 	.word	0x20013cb4
 80018c8:	46a1b800 	.word	0x46a1b800
 80018cc:	42680000 	.word	0x42680000
	}else if(randomNum <= 116){
 80018d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80018d2:	2b74      	cmp	r3, #116	; 0x74
 80018d4:	d805      	bhi.n	80018e2 <location_Algorithm+0x3aa>
		select = 2;
 80018d6:	2302      	movs	r3, #2
 80018d8:	9309      	str	r3, [sp, #36]	; 0x24
		randomNum = randomNum / 2;
 80018da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80018dc:	085b      	lsrs	r3, r3, #1
 80018de:	930a      	str	r3, [sp, #40]	; 0x28
 80018e0:	e782      	b.n	80017e8 <location_Algorithm+0x2b0>
	}else if(randomNum <= 174){
 80018e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80018e4:	2bae      	cmp	r3, #174	; 0xae
 80018e6:	d808      	bhi.n	80018fa <location_Algorithm+0x3c2>
		select = 3;
 80018e8:	2303      	movs	r3, #3
 80018ea:	9309      	str	r3, [sp, #36]	; 0x24
		randomNum = randomNum / 3;
 80018ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80018ee:	4ab5      	ldr	r2, [pc, #724]	; (8001bc4 <location_Algorithm+0x68c>)
 80018f0:	fba2 2303 	umull	r2, r3, r2, r3
 80018f4:	085b      	lsrs	r3, r3, #1
 80018f6:	930a      	str	r3, [sp, #40]	; 0x28
 80018f8:	e776      	b.n	80017e8 <location_Algorithm+0x2b0>
	}else if(randomNum <= 232){
 80018fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80018fc:	2be8      	cmp	r3, #232	; 0xe8
 80018fe:	d805      	bhi.n	800190c <location_Algorithm+0x3d4>
		select = 4;
 8001900:	2304      	movs	r3, #4
 8001902:	9309      	str	r3, [sp, #36]	; 0x24
		randomNum = randomNum / 4;
 8001904:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001906:	089b      	lsrs	r3, r3, #2
 8001908:	930a      	str	r3, [sp, #40]	; 0x28
 800190a:	e76d      	b.n	80017e8 <location_Algorithm+0x2b0>
	}else if(randomNum <= 290){
 800190c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800190e:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8001912:	d808      	bhi.n	8001926 <location_Algorithm+0x3ee>
		select = 5;
 8001914:	2305      	movs	r3, #5
 8001916:	9309      	str	r3, [sp, #36]	; 0x24
		randomNum = randomNum / 5;
 8001918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800191a:	4aab      	ldr	r2, [pc, #684]	; (8001bc8 <location_Algorithm+0x690>)
 800191c:	fba2 2303 	umull	r2, r3, r2, r3
 8001920:	089b      	lsrs	r3, r3, #2
 8001922:	930a      	str	r3, [sp, #40]	; 0x28
 8001924:	e760      	b.n	80017e8 <location_Algorithm+0x2b0>
		select = 1;
 8001926:	2301      	movs	r3, #1
 8001928:	9309      	str	r3, [sp, #36]	; 0x24
 800192a:	e75d      	b.n	80017e8 <location_Algorithm+0x2b0>
			clapLoc[0] = (X_LIM / 2) + stepRand;
 800192c:	b2a4      	uxth	r4, r4
 800192e:	f104 0378 	add.w	r3, r4, #120	; 0x78
 8001932:	f8a8 3000 	strh.w	r3, [r8]
			clapLoc[1] = (Y_LIM / 2) + stepRand;
 8001936:	344b      	adds	r4, #75	; 0x4b
 8001938:	f8a8 4002 	strh.w	r4, [r8, #2]
 800193c:	e7a3      	b.n	8001886 <location_Algorithm+0x34e>
			clapLoc[0] = (X_LIM / 2) - stepSize + stepRand;
 800193e:	b2a4      	uxth	r4, r4
 8001940:	f104 0372 	add.w	r3, r4, #114	; 0x72
 8001944:	f8a8 3000 	strh.w	r3, [r8]
			clapLoc[1] = (Y_LIM / 2) + stepSize + stepRand;
 8001948:	3451      	adds	r4, #81	; 0x51
 800194a:	f8a8 4002 	strh.w	r4, [r8, #2]
 800194e:	e79a      	b.n	8001886 <location_Algorithm+0x34e>
			clapLoc[0] = (X_LIM / 2) + stepSize + stepRand;
 8001950:	b2a4      	uxth	r4, r4
 8001952:	f104 037e 	add.w	r3, r4, #126	; 0x7e
 8001956:	f8a8 3000 	strh.w	r3, [r8]
			clapLoc[1] = (Y_LIM / 2) + stepSize + stepRand;
 800195a:	3451      	adds	r4, #81	; 0x51
 800195c:	f8a8 4002 	strh.w	r4, [r8, #2]
 8001960:	e791      	b.n	8001886 <location_Algorithm+0x34e>
			clapLoc[0] = (X_LIM / 2) + stepSize + stepRand;
 8001962:	b2a4      	uxth	r4, r4
 8001964:	f104 037e 	add.w	r3, r4, #126	; 0x7e
 8001968:	f8a8 3000 	strh.w	r3, [r8]
			clapLoc[1] = (Y_LIM / 2) - stepSize + stepRand;
 800196c:	3445      	adds	r4, #69	; 0x45
 800196e:	f8a8 4002 	strh.w	r4, [r8, #2]
 8001972:	e788      	b.n	8001886 <location_Algorithm+0x34e>
	}else if(minDelayIdx == 0){
 8001974:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001976:	2b00      	cmp	r3, #0
 8001978:	d14b      	bne.n	8001a12 <location_Algorithm+0x4da>
		if(select == 1){
 800197a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800197c:	2b01      	cmp	r3, #1
 800197e:	d018      	beq.n	80019b2 <location_Algorithm+0x47a>
		}else if(select == 2){
 8001980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001982:	2b02      	cmp	r3, #2
 8001984:	d021      	beq.n	80019ca <location_Algorithm+0x492>
		}else if(select == 3){
 8001986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001988:	2b03      	cmp	r3, #3
 800198a:	d02a      	beq.n	80019e2 <location_Algorithm+0x4aa>
		}else if(select == 4){
 800198c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800198e:	2b04      	cmp	r3, #4
 8001990:	d033      	beq.n	80019fa <location_Algorithm+0x4c2>
		}else if(select == 5){
 8001992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001994:	2b05      	cmp	r3, #5
 8001996:	f47f af76 	bne.w	8001886 <location_Algorithm+0x34e>
			clapLoc[0] = mic1Loc[0] + (X_LIM / 4) - stepSize + stepRand;
 800199a:	9b07      	ldr	r3, [sp, #28]
 800199c:	b2a4      	uxth	r4, r4
 800199e:	3336      	adds	r3, #54	; 0x36
 80019a0:	4423      	add	r3, r4
 80019a2:	f8a8 3000 	strh.w	r3, [r8]
			clapLoc[1] = mic1Loc[1] + (Y_LIM / 4) - stepSize + stepRand;
 80019a6:	9b08      	ldr	r3, [sp, #32]
 80019a8:	331f      	adds	r3, #31
 80019aa:	441c      	add	r4, r3
 80019ac:	f8a8 4002 	strh.w	r4, [r8, #2]
 80019b0:	e769      	b.n	8001886 <location_Algorithm+0x34e>
			clapLoc[0] = mic1Loc[0] + (X_LIM / 4) + stepRand;
 80019b2:	9b07      	ldr	r3, [sp, #28]
 80019b4:	b2a4      	uxth	r4, r4
 80019b6:	333c      	adds	r3, #60	; 0x3c
 80019b8:	4423      	add	r3, r4
 80019ba:	f8a8 3000 	strh.w	r3, [r8]
			clapLoc[1] = mic1Loc[1] + (Y_LIM / 4) + stepRand;
 80019be:	9b08      	ldr	r3, [sp, #32]
 80019c0:	3325      	adds	r3, #37	; 0x25
 80019c2:	441c      	add	r4, r3
 80019c4:	f8a8 4002 	strh.w	r4, [r8, #2]
 80019c8:	e75d      	b.n	8001886 <location_Algorithm+0x34e>
			clapLoc[0] = mic1Loc[0] + (X_LIM / 4) - stepSize + stepRand;
 80019ca:	9b07      	ldr	r3, [sp, #28]
 80019cc:	b2a4      	uxth	r4, r4
 80019ce:	3336      	adds	r3, #54	; 0x36
 80019d0:	4423      	add	r3, r4
 80019d2:	f8a8 3000 	strh.w	r3, [r8]
			clapLoc[1] = mic1Loc[1] + (Y_LIM / 4) + stepSize + stepRand;
 80019d6:	9b08      	ldr	r3, [sp, #32]
 80019d8:	332b      	adds	r3, #43	; 0x2b
 80019da:	441c      	add	r4, r3
 80019dc:	f8a8 4002 	strh.w	r4, [r8, #2]
 80019e0:	e751      	b.n	8001886 <location_Algorithm+0x34e>
			clapLoc[0] = mic1Loc[0] + (X_LIM / 4) + stepSize + stepRand;
 80019e2:	9b07      	ldr	r3, [sp, #28]
 80019e4:	b2a4      	uxth	r4, r4
 80019e6:	3342      	adds	r3, #66	; 0x42
 80019e8:	4423      	add	r3, r4
 80019ea:	f8a8 3000 	strh.w	r3, [r8]
			clapLoc[1] = mic1Loc[1] + (Y_LIM / 4) + stepSize + stepRand;
 80019ee:	9b08      	ldr	r3, [sp, #32]
 80019f0:	332b      	adds	r3, #43	; 0x2b
 80019f2:	441c      	add	r4, r3
 80019f4:	f8a8 4002 	strh.w	r4, [r8, #2]
 80019f8:	e745      	b.n	8001886 <location_Algorithm+0x34e>
			clapLoc[0] = mic1Loc[0] + (X_LIM / 4) + stepSize + stepRand;
 80019fa:	9b07      	ldr	r3, [sp, #28]
 80019fc:	b2a4      	uxth	r4, r4
 80019fe:	3342      	adds	r3, #66	; 0x42
 8001a00:	4423      	add	r3, r4
 8001a02:	f8a8 3000 	strh.w	r3, [r8]
			clapLoc[1] = mic1Loc[1] + (Y_LIM / 4) - stepSize + stepRand;
 8001a06:	9b08      	ldr	r3, [sp, #32]
 8001a08:	331f      	adds	r3, #31
 8001a0a:	441c      	add	r4, r3
 8001a0c:	f8a8 4002 	strh.w	r4, [r8, #2]
 8001a10:	e739      	b.n	8001886 <location_Algorithm+0x34e>
	}else if(minDelayIdx == 1){
 8001a12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d00f      	beq.n	8001a38 <location_Algorithm+0x500>
	}else if(minDelayIdx == 2){
 8001a18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d058      	beq.n	8001ad0 <location_Algorithm+0x598>
	}else if(minDelayIdx == 3){
 8001a1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001a20:	2b03      	cmp	r3, #3
 8001a22:	f000 80a1 	beq.w	8001b68 <location_Algorithm+0x630>
		clapLoc[0] = (X_LIM / 2) + stepRand;
 8001a26:	b2a4      	uxth	r4, r4
 8001a28:	f104 0378 	add.w	r3, r4, #120	; 0x78
 8001a2c:	f8a8 3000 	strh.w	r3, [r8]
		clapLoc[1] = (Y_LIM / 2) + stepRand;
 8001a30:	344b      	adds	r4, #75	; 0x4b
 8001a32:	f8a8 4002 	strh.w	r4, [r8, #2]
 8001a36:	e726      	b.n	8001886 <location_Algorithm+0x34e>
		if(select == 1){
 8001a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d014      	beq.n	8001a68 <location_Algorithm+0x530>
		}else if(select == 2){
 8001a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d01d      	beq.n	8001a80 <location_Algorithm+0x548>
		}else if(select == 3){
 8001a44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a46:	2b03      	cmp	r3, #3
 8001a48:	d026      	beq.n	8001a98 <location_Algorithm+0x560>
		}else if(select == 4){
 8001a4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a4c:	2b04      	cmp	r3, #4
 8001a4e:	d12f      	bne.n	8001ab0 <location_Algorithm+0x578>
			clapLoc[0] = mic2Loc[0] + (X_LIM / 4) + stepSize + stepRand;
 8001a50:	9b05      	ldr	r3, [sp, #20]
 8001a52:	b2a4      	uxth	r4, r4
 8001a54:	3342      	adds	r3, #66	; 0x42
 8001a56:	4423      	add	r3, r4
 8001a58:	f8a8 3000 	strh.w	r3, [r8]
			clapLoc[1] = mic2Loc[1] - (Y_LIM / 4) - stepSize + stepRand;
 8001a5c:	9b06      	ldr	r3, [sp, #24]
 8001a5e:	3b2b      	subs	r3, #43	; 0x2b
 8001a60:	441c      	add	r4, r3
 8001a62:	f8a8 4002 	strh.w	r4, [r8, #2]
 8001a66:	e70e      	b.n	8001886 <location_Algorithm+0x34e>
			clapLoc[0] = mic2Loc[0] + (X_LIM / 4) + stepRand;
 8001a68:	9b05      	ldr	r3, [sp, #20]
 8001a6a:	b2a4      	uxth	r4, r4
 8001a6c:	333c      	adds	r3, #60	; 0x3c
 8001a6e:	4423      	add	r3, r4
 8001a70:	f8a8 3000 	strh.w	r3, [r8]
			clapLoc[1] = mic2Loc[1] - (Y_LIM / 4) + stepRand;
 8001a74:	9b06      	ldr	r3, [sp, #24]
 8001a76:	3b25      	subs	r3, #37	; 0x25
 8001a78:	441c      	add	r4, r3
 8001a7a:	f8a8 4002 	strh.w	r4, [r8, #2]
 8001a7e:	e702      	b.n	8001886 <location_Algorithm+0x34e>
			clapLoc[0] = mic2Loc[0] + (X_LIM / 4) - stepSize + stepRand;
 8001a80:	9b05      	ldr	r3, [sp, #20]
 8001a82:	b2a4      	uxth	r4, r4
 8001a84:	3336      	adds	r3, #54	; 0x36
 8001a86:	4423      	add	r3, r4
 8001a88:	f8a8 3000 	strh.w	r3, [r8]
			clapLoc[1] = mic2Loc[1] - (Y_LIM / 4) + stepSize + stepRand;
 8001a8c:	9b06      	ldr	r3, [sp, #24]
 8001a8e:	3b1f      	subs	r3, #31
 8001a90:	441c      	add	r4, r3
 8001a92:	f8a8 4002 	strh.w	r4, [r8, #2]
 8001a96:	e6f6      	b.n	8001886 <location_Algorithm+0x34e>
			clapLoc[0] = mic2Loc[0] + (X_LIM / 4) + stepSize + stepRand;
 8001a98:	9b05      	ldr	r3, [sp, #20]
 8001a9a:	b2a4      	uxth	r4, r4
 8001a9c:	3342      	adds	r3, #66	; 0x42
 8001a9e:	4423      	add	r3, r4
 8001aa0:	f8a8 3000 	strh.w	r3, [r8]
			clapLoc[1] = mic2Loc[1] - (Y_LIM / 4) + stepSize + stepRand;
 8001aa4:	9b06      	ldr	r3, [sp, #24]
 8001aa6:	3b1f      	subs	r3, #31
 8001aa8:	441c      	add	r4, r3
 8001aaa:	f8a8 4002 	strh.w	r4, [r8, #2]
 8001aae:	e6ea      	b.n	8001886 <location_Algorithm+0x34e>
		}else if(select == 5){
 8001ab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ab2:	2b05      	cmp	r3, #5
 8001ab4:	f47f aee7 	bne.w	8001886 <location_Algorithm+0x34e>
			clapLoc[0] = mic2Loc[0] + (X_LIM / 4) - stepSize + stepRand;
 8001ab8:	9b05      	ldr	r3, [sp, #20]
 8001aba:	b2a4      	uxth	r4, r4
 8001abc:	3336      	adds	r3, #54	; 0x36
 8001abe:	4423      	add	r3, r4
 8001ac0:	f8a8 3000 	strh.w	r3, [r8]
			clapLoc[1] = mic2Loc[1] - (Y_LIM / 4) - stepSize + stepRand;
 8001ac4:	9b06      	ldr	r3, [sp, #24]
 8001ac6:	3b2b      	subs	r3, #43	; 0x2b
 8001ac8:	441c      	add	r4, r3
 8001aca:	f8a8 4002 	strh.w	r4, [r8, #2]
 8001ace:	e6da      	b.n	8001886 <location_Algorithm+0x34e>
		if(select == 1){
 8001ad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d011      	beq.n	8001afa <location_Algorithm+0x5c2>
		}else if(select == 2){
 8001ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d01a      	beq.n	8001b12 <location_Algorithm+0x5da>
		}else if(select == 3){
 8001adc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ade:	2b03      	cmp	r3, #3
 8001ae0:	d123      	bne.n	8001b2a <location_Algorithm+0x5f2>
			clapLoc[0] = mic3Loc[0] - (X_LIM / 4) + stepSize + stepRand;
 8001ae2:	9b03      	ldr	r3, [sp, #12]
 8001ae4:	b2a4      	uxth	r4, r4
 8001ae6:	3b36      	subs	r3, #54	; 0x36
 8001ae8:	4423      	add	r3, r4
 8001aea:	f8a8 3000 	strh.w	r3, [r8]
			clapLoc[1] = mic3Loc[1] - (Y_LIM / 4) + stepSize + stepRand;
 8001aee:	9b04      	ldr	r3, [sp, #16]
 8001af0:	3b1f      	subs	r3, #31
 8001af2:	441c      	add	r4, r3
 8001af4:	f8a8 4002 	strh.w	r4, [r8, #2]
 8001af8:	e6c5      	b.n	8001886 <location_Algorithm+0x34e>
			clapLoc[0] = mic3Loc[0] - (X_LIM / 4) + stepRand;
 8001afa:	9b03      	ldr	r3, [sp, #12]
 8001afc:	b2a4      	uxth	r4, r4
 8001afe:	3b3c      	subs	r3, #60	; 0x3c
 8001b00:	4423      	add	r3, r4
 8001b02:	f8a8 3000 	strh.w	r3, [r8]
			clapLoc[1] = mic3Loc[1] - (Y_LIM / 4) + stepRand;
 8001b06:	9b04      	ldr	r3, [sp, #16]
 8001b08:	3b25      	subs	r3, #37	; 0x25
 8001b0a:	441c      	add	r4, r3
 8001b0c:	f8a8 4002 	strh.w	r4, [r8, #2]
 8001b10:	e6b9      	b.n	8001886 <location_Algorithm+0x34e>
			clapLoc[0] = mic3Loc[0] - (X_LIM / 4) - stepSize + stepRand;
 8001b12:	9b03      	ldr	r3, [sp, #12]
 8001b14:	b2a4      	uxth	r4, r4
 8001b16:	3b42      	subs	r3, #66	; 0x42
 8001b18:	4423      	add	r3, r4
 8001b1a:	f8a8 3000 	strh.w	r3, [r8]
			clapLoc[1] = mic3Loc[1] - (Y_LIM / 4) + stepSize + stepRand;
 8001b1e:	9b04      	ldr	r3, [sp, #16]
 8001b20:	3b1f      	subs	r3, #31
 8001b22:	441c      	add	r4, r3
 8001b24:	f8a8 4002 	strh.w	r4, [r8, #2]
 8001b28:	e6ad      	b.n	8001886 <location_Algorithm+0x34e>
		}else if(select == 4){
 8001b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b2c:	2b04      	cmp	r3, #4
 8001b2e:	d10b      	bne.n	8001b48 <location_Algorithm+0x610>
			clapLoc[0] = mic3Loc[0] - (X_LIM / 4) + stepSize + stepRand;
 8001b30:	9b03      	ldr	r3, [sp, #12]
 8001b32:	b2a4      	uxth	r4, r4
 8001b34:	3b36      	subs	r3, #54	; 0x36
 8001b36:	4423      	add	r3, r4
 8001b38:	f8a8 3000 	strh.w	r3, [r8]
			clapLoc[1] = mic3Loc[1] - (Y_LIM / 4) - stepSize + stepRand;
 8001b3c:	9b04      	ldr	r3, [sp, #16]
 8001b3e:	3b2b      	subs	r3, #43	; 0x2b
 8001b40:	441c      	add	r4, r3
 8001b42:	f8a8 4002 	strh.w	r4, [r8, #2]
 8001b46:	e69e      	b.n	8001886 <location_Algorithm+0x34e>
		}else if(select == 5){
 8001b48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b4a:	2b05      	cmp	r3, #5
 8001b4c:	f47f ae9b 	bne.w	8001886 <location_Algorithm+0x34e>
			clapLoc[0] = mic3Loc[0] - (X_LIM / 4) - stepSize + stepRand;
 8001b50:	9b03      	ldr	r3, [sp, #12]
 8001b52:	b2a4      	uxth	r4, r4
 8001b54:	3b42      	subs	r3, #66	; 0x42
 8001b56:	4423      	add	r3, r4
 8001b58:	f8a8 3000 	strh.w	r3, [r8]
			clapLoc[1] = mic3Loc[1] - (Y_LIM / 4) - stepSize + stepRand;
 8001b5c:	9b04      	ldr	r3, [sp, #16]
 8001b5e:	3b2b      	subs	r3, #43	; 0x2b
 8001b60:	441c      	add	r4, r3
 8001b62:	f8a8 4002 	strh.w	r4, [r8, #2]
 8001b66:	e68e      	b.n	8001886 <location_Algorithm+0x34e>
		if(select == 1){
 8001b68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d00e      	beq.n	8001b8c <location_Algorithm+0x654>
		}else if(select == 2){
 8001b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d117      	bne.n	8001ba4 <location_Algorithm+0x66c>
			clapLoc[0] = mic4Loc[0] - (X_LIM / 4) - stepSize + stepRand;
 8001b74:	9b01      	ldr	r3, [sp, #4]
 8001b76:	b2a4      	uxth	r4, r4
 8001b78:	3b42      	subs	r3, #66	; 0x42
 8001b7a:	4423      	add	r3, r4
 8001b7c:	f8a8 3000 	strh.w	r3, [r8]
			clapLoc[1] = mic4Loc[1] + (Y_LIM / 4) + stepSize + stepRand;
 8001b80:	9b02      	ldr	r3, [sp, #8]
 8001b82:	332b      	adds	r3, #43	; 0x2b
 8001b84:	441c      	add	r4, r3
 8001b86:	f8a8 4002 	strh.w	r4, [r8, #2]
 8001b8a:	e67c      	b.n	8001886 <location_Algorithm+0x34e>
			clapLoc[0] = mic4Loc[0] - (X_LIM / 4) + stepRand;
 8001b8c:	9b01      	ldr	r3, [sp, #4]
 8001b8e:	b2a4      	uxth	r4, r4
 8001b90:	3b3c      	subs	r3, #60	; 0x3c
 8001b92:	4423      	add	r3, r4
 8001b94:	f8a8 3000 	strh.w	r3, [r8]
			clapLoc[1] = mic4Loc[1] + (Y_LIM / 4) + stepRand;
 8001b98:	9b02      	ldr	r3, [sp, #8]
 8001b9a:	3325      	adds	r3, #37	; 0x25
 8001b9c:	441c      	add	r4, r3
 8001b9e:	f8a8 4002 	strh.w	r4, [r8, #2]
 8001ba2:	e670      	b.n	8001886 <location_Algorithm+0x34e>
		}else if(select == 34){
 8001ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ba6:	2b22      	cmp	r3, #34	; 0x22
 8001ba8:	d110      	bne.n	8001bcc <location_Algorithm+0x694>
			clapLoc[0] = mic4Loc[0] - (X_LIM / 4) + stepSize + stepRand;
 8001baa:	9b01      	ldr	r3, [sp, #4]
 8001bac:	b2a4      	uxth	r4, r4
 8001bae:	3b36      	subs	r3, #54	; 0x36
 8001bb0:	4423      	add	r3, r4
 8001bb2:	f8a8 3000 	strh.w	r3, [r8]
			clapLoc[1] = mic4Loc[1] + (Y_LIM / 4) + stepSize + stepRand;
 8001bb6:	9b02      	ldr	r3, [sp, #8]
 8001bb8:	332b      	adds	r3, #43	; 0x2b
 8001bba:	441c      	add	r4, r3
 8001bbc:	f8a8 4002 	strh.w	r4, [r8, #2]
 8001bc0:	e661      	b.n	8001886 <location_Algorithm+0x34e>
 8001bc2:	bf00      	nop
 8001bc4:	aaaaaaab 	.word	0xaaaaaaab
 8001bc8:	cccccccd 	.word	0xcccccccd
		}else if(select == 4){
 8001bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001bce:	2b04      	cmp	r3, #4
 8001bd0:	d00f      	beq.n	8001bf2 <location_Algorithm+0x6ba>
		}else if(select == 5){
 8001bd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001bd4:	2b05      	cmp	r3, #5
 8001bd6:	f47f ae56 	bne.w	8001886 <location_Algorithm+0x34e>
			clapLoc[0] = mic4Loc[0] - (X_LIM / 4) - stepSize + stepRand;
 8001bda:	9b01      	ldr	r3, [sp, #4]
 8001bdc:	b2a4      	uxth	r4, r4
 8001bde:	3b42      	subs	r3, #66	; 0x42
 8001be0:	4423      	add	r3, r4
 8001be2:	f8a8 3000 	strh.w	r3, [r8]
			clapLoc[1] = mic4Loc[1] + (Y_LIM / 4) - stepSize + stepRand;
 8001be6:	9b02      	ldr	r3, [sp, #8]
 8001be8:	331f      	adds	r3, #31
 8001bea:	441c      	add	r4, r3
 8001bec:	f8a8 4002 	strh.w	r4, [r8, #2]
 8001bf0:	e649      	b.n	8001886 <location_Algorithm+0x34e>
			clapLoc[0] = mic4Loc[0] - (X_LIM / 4) + stepSize + stepRand;
 8001bf2:	9b01      	ldr	r3, [sp, #4]
 8001bf4:	b2a4      	uxth	r4, r4
 8001bf6:	3b36      	subs	r3, #54	; 0x36
 8001bf8:	4423      	add	r3, r4
 8001bfa:	f8a8 3000 	strh.w	r3, [r8]
			clapLoc[1] = mic4Loc[1] + (Y_LIM / 4) - stepSize + stepRand;
 8001bfe:	9b02      	ldr	r3, [sp, #8]
 8001c00:	331f      	adds	r3, #31
 8001c02:	441c      	add	r4, r3
 8001c04:	f8a8 4002 	strh.w	r4, [r8, #2]
 8001c08:	e63d      	b.n	8001886 <location_Algorithm+0x34e>
 8001c0a:	bf00      	nop

08001c0c <ILI9341_SetCursorPosition>:
void ILI9341_SendData(uint8_t data)
{
	*(__IO uint8_t *)(0x60040000) = data;
}
//3. Set cursor position
void ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8001c0c:	b470      	push	{r4, r5, r6}
	*(__IO uint8_t *)(0x60000000) = com;
 8001c0e:	f04f 45c0 	mov.w	r5, #1610612736	; 0x60000000
 8001c12:	242a      	movs	r4, #42	; 0x2a
 8001c14:	702c      	strb	r4, [r5, #0]

  ILI9341_SendCommand (ILI9341_COLUMN_ADDR);
  ILI9341_SendData(x1>>8);
 8001c16:	0a06      	lsrs	r6, r0, #8
	*(__IO uint8_t *)(0x60040000) = data;
 8001c18:	4c0a      	ldr	r4, [pc, #40]	; (8001c44 <ILI9341_SetCursorPosition+0x38>)
 8001c1a:	7026      	strb	r6, [r4, #0]
  ILI9341_SendData(x1 & 0xFF);
 8001c1c:	b2c0      	uxtb	r0, r0
	*(__IO uint8_t *)(0x60040000) = data;
 8001c1e:	7020      	strb	r0, [r4, #0]
  ILI9341_SendData(x2>>8);
 8001c20:	0a10      	lsrs	r0, r2, #8
	*(__IO uint8_t *)(0x60040000) = data;
 8001c22:	7020      	strb	r0, [r4, #0]
  ILI9341_SendData(x2 & 0xFF);
 8001c24:	b2d2      	uxtb	r2, r2
	*(__IO uint8_t *)(0x60040000) = data;
 8001c26:	7022      	strb	r2, [r4, #0]
	*(__IO uint8_t *)(0x60000000) = com;
 8001c28:	222b      	movs	r2, #43	; 0x2b
 8001c2a:	702a      	strb	r2, [r5, #0]

  ILI9341_SendCommand (ILI9341_PAGE_ADDR);
  ILI9341_SendData(y1>>8);
 8001c2c:	0a0a      	lsrs	r2, r1, #8
	*(__IO uint8_t *)(0x60040000) = data;
 8001c2e:	7022      	strb	r2, [r4, #0]
  ILI9341_SendData(y1 & 0xFF);
 8001c30:	b2c9      	uxtb	r1, r1
	*(__IO uint8_t *)(0x60040000) = data;
 8001c32:	7021      	strb	r1, [r4, #0]
  ILI9341_SendData(y2>>8);
 8001c34:	0a1a      	lsrs	r2, r3, #8
	*(__IO uint8_t *)(0x60040000) = data;
 8001c36:	7022      	strb	r2, [r4, #0]
  ILI9341_SendData(y2 & 0xFF);
 8001c38:	b2db      	uxtb	r3, r3
	*(__IO uint8_t *)(0x60040000) = data;
 8001c3a:	7023      	strb	r3, [r4, #0]
	*(__IO uint8_t *)(0x60000000) = com;
 8001c3c:	232c      	movs	r3, #44	; 0x2c
 8001c3e:	702b      	strb	r3, [r5, #0]
  ILI9341_SendCommand (ILI9341_GRAM);
}
 8001c40:	bc70      	pop	{r4, r5, r6}
 8001c42:	4770      	bx	lr
 8001c44:	60040000 	.word	0x60040000

08001c48 <ILI9341_Init>:
//4. Initialise function
void ILI9341_Init(void)
 {
 8001c48:	b538      	push	{r3, r4, r5, lr}
	*(__IO uint8_t *)(0x60000000) = com;
 8001c4a:	f04f 44c0 	mov.w	r4, #1610612736	; 0x60000000
 8001c4e:	2501      	movs	r5, #1
 8001c50:	7025      	strb	r5, [r4, #0]
   ILI9341_SendCommand (ILI9341_RESET); // software reset comand
   HAL_Delay(500);
 8001c52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c56:	f002 f829 	bl	8003cac <HAL_Delay>
	*(__IO uint8_t *)(0x60000000) = com;
 8001c5a:	2328      	movs	r3, #40	; 0x28
 8001c5c:	7023      	strb	r3, [r4, #0]
 8001c5e:	23c0      	movs	r3, #192	; 0xc0
 8001c60:	7023      	strb	r3, [r4, #0]
	*(__IO uint8_t *)(0x60040000) = data;
 8001c62:	4b25      	ldr	r3, [pc, #148]	; (8001cf8 <ILI9341_Init+0xb0>)
 8001c64:	2226      	movs	r2, #38	; 0x26
 8001c66:	701a      	strb	r2, [r3, #0]
	*(__IO uint8_t *)(0x60000000) = com;
 8001c68:	22c1      	movs	r2, #193	; 0xc1
 8001c6a:	7022      	strb	r2, [r4, #0]
	*(__IO uint8_t *)(0x60040000) = data;
 8001c6c:	2111      	movs	r1, #17
 8001c6e:	7019      	strb	r1, [r3, #0]
	*(__IO uint8_t *)(0x60000000) = com;
 8001c70:	22c5      	movs	r2, #197	; 0xc5
 8001c72:	7022      	strb	r2, [r4, #0]
	*(__IO uint8_t *)(0x60040000) = data;
 8001c74:	2235      	movs	r2, #53	; 0x35
 8001c76:	701a      	strb	r2, [r3, #0]
 8001c78:	223e      	movs	r2, #62	; 0x3e
 8001c7a:	701a      	strb	r2, [r3, #0]
	*(__IO uint8_t *)(0x60000000) = com;
 8001c7c:	22c7      	movs	r2, #199	; 0xc7
 8001c7e:	7022      	strb	r2, [r4, #0]
	*(__IO uint8_t *)(0x60040000) = data;
 8001c80:	22be      	movs	r2, #190	; 0xbe
 8001c82:	701a      	strb	r2, [r3, #0]
	*(__IO uint8_t *)(0x60000000) = com;
 8001c84:	2236      	movs	r2, #54	; 0x36
 8001c86:	7022      	strb	r2, [r4, #0]
	*(__IO uint8_t *)(0x60040000) = data;
 8001c88:	2248      	movs	r2, #72	; 0x48
 8001c8a:	701a      	strb	r2, [r3, #0]
	*(__IO uint8_t *)(0x60000000) = com;
 8001c8c:	223a      	movs	r2, #58	; 0x3a
 8001c8e:	7022      	strb	r2, [r4, #0]
	*(__IO uint8_t *)(0x60040000) = data;
 8001c90:	2255      	movs	r2, #85	; 0x55
 8001c92:	701a      	strb	r2, [r3, #0]
	*(__IO uint8_t *)(0x60000000) = com;
 8001c94:	22b1      	movs	r2, #177	; 0xb1
 8001c96:	7022      	strb	r2, [r4, #0]
	*(__IO uint8_t *)(0x60040000) = data;
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
 8001c9c:	201f      	movs	r0, #31
 8001c9e:	7018      	strb	r0, [r3, #0]
	*(__IO uint8_t *)(0x60000000) = com;
 8001ca0:	202a      	movs	r0, #42	; 0x2a
 8001ca2:	7020      	strb	r0, [r4, #0]
	*(__IO uint8_t *)(0x60040000) = data;
 8001ca4:	701a      	strb	r2, [r3, #0]
 8001ca6:	701a      	strb	r2, [r3, #0]
 8001ca8:	701a      	strb	r2, [r3, #0]
 8001caa:	20ef      	movs	r0, #239	; 0xef
 8001cac:	7018      	strb	r0, [r3, #0]
	*(__IO uint8_t *)(0x60000000) = com;
 8001cae:	202b      	movs	r0, #43	; 0x2b
 8001cb0:	7020      	strb	r0, [r4, #0]
	*(__IO uint8_t *)(0x60040000) = data;
 8001cb2:	701a      	strb	r2, [r3, #0]
 8001cb4:	701a      	strb	r2, [r3, #0]
 8001cb6:	701d      	strb	r5, [r3, #0]
 8001cb8:	203f      	movs	r0, #63	; 0x3f
 8001cba:	7018      	strb	r0, [r3, #0]
	*(__IO uint8_t *)(0x60000000) = com;
 8001cbc:	2034      	movs	r0, #52	; 0x34
 8001cbe:	7020      	strb	r0, [r4, #0]
 8001cc0:	20b7      	movs	r0, #183	; 0xb7
 8001cc2:	7020      	strb	r0, [r4, #0]
	*(__IO uint8_t *)(0x60040000) = data;
 8001cc4:	2007      	movs	r0, #7
 8001cc6:	7018      	strb	r0, [r3, #0]
	*(__IO uint8_t *)(0x60000000) = com;
 8001cc8:	20b6      	movs	r0, #182	; 0xb6
 8001cca:	7020      	strb	r0, [r4, #0]
	*(__IO uint8_t *)(0x60040000) = data;
 8001ccc:	200a      	movs	r0, #10
 8001cce:	7018      	strb	r0, [r3, #0]
 8001cd0:	2082      	movs	r0, #130	; 0x82
 8001cd2:	7018      	strb	r0, [r3, #0]
 8001cd4:	2027      	movs	r0, #39	; 0x27
 8001cd6:	7018      	strb	r0, [r3, #0]
 8001cd8:	701a      	strb	r2, [r3, #0]
	*(__IO uint8_t *)(0x60000000) = com;
 8001cda:	7021      	strb	r1, [r4, #0]
   // Sets the number of lines to drive the LCD at an interval of 8 lines
   ILI9341_SendData   (0x27);
   ILI9341_SendData   (0x00); // clock divisor

   ILI9341_SendCommand (ILI9341_SLEEP_OUT); // sleep out
   HAL_Delay(100);
 8001cdc:	2064      	movs	r0, #100	; 0x64
 8001cde:	f001 ffe5 	bl	8003cac <HAL_Delay>
	*(__IO uint8_t *)(0x60000000) = com;
 8001ce2:	2329      	movs	r3, #41	; 0x29
 8001ce4:	7023      	strb	r3, [r4, #0]
   ILI9341_SendCommand (ILI9341_DISPLAY_ON); // display on
   HAL_Delay(100);
 8001ce6:	2064      	movs	r0, #100	; 0x64
 8001ce8:	f001 ffe0 	bl	8003cac <HAL_Delay>
	*(__IO uint8_t *)(0x60000000) = com;
 8001cec:	232c      	movs	r3, #44	; 0x2c
 8001cee:	7023      	strb	r3, [r4, #0]
   ILI9341_SendCommand (ILI9341_GRAM); // memory write
   HAL_Delay(5);
 8001cf0:	2005      	movs	r0, #5
 8001cf2:	f001 ffdb 	bl	8003cac <HAL_Delay>
 }
 8001cf6:	bd38      	pop	{r3, r4, r5, pc}
 8001cf8:	60040000 	.word	0x60040000

08001cfc <ILI9341_DrawPixel>:

//5. Write data to a single pixel
void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8001cfc:	b510      	push	{r4, lr}
 8001cfe:	4614      	mov	r4, r2
  ILI9341_SetCursorPosition(x, y, x, y);
 8001d00:	460b      	mov	r3, r1
 8001d02:	4602      	mov	r2, r0
 8001d04:	f7ff ff82 	bl	8001c0c <ILI9341_SetCursorPosition>
	ILI9341_SendData(color>>8);
 8001d08:	0a22      	lsrs	r2, r4, #8
	*(__IO uint8_t *)(0x60040000) = data;
 8001d0a:	4b02      	ldr	r3, [pc, #8]	; (8001d14 <ILI9341_DrawPixel+0x18>)
 8001d0c:	701a      	strb	r2, [r3, #0]
	ILI9341_SendData(color&0xFF);
 8001d0e:	b2e4      	uxtb	r4, r4
	*(__IO uint8_t *)(0x60040000) = data;
 8001d10:	701c      	strb	r4, [r3, #0]
}
 8001d12:	bd10      	pop	{r4, pc}
 8001d14:	60040000 	.word	0x60040000

08001d18 <ILI9341_Fill>:
//6. Fill the entire screen with a background color
void ILI9341_Fill(uint16_t color) {
 8001d18:	b510      	push	{r4, lr}
 8001d1a:	4604      	mov	r4, r0
	uint32_t n = ILI9341_PIXEL_COUNT;
	
	if(rotationNum==1 || rotationNum==3)
 8001d1c:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <ILI9341_Fill+0x4c>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8001d24:	2a01      	cmp	r2, #1
 8001d26:	d00b      	beq.n	8001d40 <ILI9341_Fill+0x28>
	{
		ILI9341_SetCursorPosition(0, 0,   ILI9341_WIDTH -1, ILI9341_HEIGHT -1);
	}
	else if(rotationNum==2 || rotationNum==4)
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d001      	beq.n	8001d30 <ILI9341_Fill+0x18>
 8001d2c:	2b04      	cmp	r3, #4
 8001d2e:	d10e      	bne.n	8001d4e <ILI9341_Fill+0x36>
	{
		ILI9341_SetCursorPosition(0, 0, ILI9341_HEIGHT -1, ILI9341_WIDTH -1);
 8001d30:	23ef      	movs	r3, #239	; 0xef
 8001d32:	f240 123f 	movw	r2, #319	; 0x13f
 8001d36:	2100      	movs	r1, #0
 8001d38:	4608      	mov	r0, r1
 8001d3a:	f7ff ff67 	bl	8001c0c <ILI9341_SetCursorPosition>
 8001d3e:	e006      	b.n	8001d4e <ILI9341_Fill+0x36>
		ILI9341_SetCursorPosition(0, 0,   ILI9341_WIDTH -1, ILI9341_HEIGHT -1);
 8001d40:	f240 133f 	movw	r3, #319	; 0x13f
 8001d44:	22ef      	movs	r2, #239	; 0xef
 8001d46:	2100      	movs	r1, #0
 8001d48:	4608      	mov	r0, r1
 8001d4a:	f7ff ff5f 	bl	8001c0c <ILI9341_SetCursorPosition>
	}
	
	while (n) {
			n--;
       ILI9341_SendData(color>>8);
 8001d4e:	0a21      	lsrs	r1, r4, #8
 8001d50:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
	*(__IO uint8_t *)(0x60040000) = data;
 8001d54:	4a04      	ldr	r2, [pc, #16]	; (8001d68 <ILI9341_Fill+0x50>)
 8001d56:	4620      	mov	r0, r4
 8001d58:	7011      	strb	r1, [r2, #0]
 8001d5a:	7010      	strb	r0, [r2, #0]
	while (n) {
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	d1fb      	bne.n	8001d58 <ILI9341_Fill+0x40>
				ILI9341_SendData(color&0xff);
	}
}
 8001d60:	bd10      	pop	{r4, pc}
 8001d62:	bf00      	nop
 8001d64:	20000c88 	.word	0x20000c88
 8001d68:	60040000 	.word	0x60040000

08001d6c <ILI9341_Fill_Rect>:
//7. Rectangle drawing functions
void ILI9341_Fill_Rect(unsigned int x0,unsigned int y0, unsigned int x1,unsigned int y1, uint16_t color) { 
 8001d6c:	b570      	push	{r4, r5, r6, lr}
 8001d6e:	f8bd 5010 	ldrh.w	r5, [sp, #16]
	uint32_t n = ((x1+1)-x0)*((y1+1)-y0);
 8001d72:	1a14      	subs	r4, r2, r0
 8001d74:	1a5e      	subs	r6, r3, r1
 8001d76:	3601      	adds	r6, #1
 8001d78:	fb04 6606 	mla	r6, r4, r6, r6
 8001d7c:	4634      	mov	r4, r6
 8001d7e:	f5b6 3f96 	cmp.w	r6, #76800	; 0x12c00
 8001d82:	bf28      	it	cs
 8001d84:	f44f 3496 	movcs.w	r4, #76800	; 0x12c00
	if (n>ILI9341_PIXEL_COUNT) n=ILI9341_PIXEL_COUNT;
	ILI9341_SetCursorPosition(x0, y0, x1, y1);
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	b292      	uxth	r2, r2
 8001d8c:	b289      	uxth	r1, r1
 8001d8e:	b280      	uxth	r0, r0
 8001d90:	f7ff ff3c 	bl	8001c0c <ILI9341_SetCursorPosition>
	while (n) {
 8001d94:	b136      	cbz	r6, 8001da4 <ILI9341_Fill_Rect+0x38>
			n--;
      ILI9341_SendData(color>>8);
 8001d96:	0a29      	lsrs	r1, r5, #8
	*(__IO uint8_t *)(0x60040000) = data;
 8001d98:	4b03      	ldr	r3, [pc, #12]	; (8001da8 <ILI9341_Fill_Rect+0x3c>)
 8001d9a:	462a      	mov	r2, r5
 8001d9c:	7019      	strb	r1, [r3, #0]
 8001d9e:	701a      	strb	r2, [r3, #0]
	while (n) {
 8001da0:	3c01      	subs	r4, #1
 8001da2:	d1fb      	bne.n	8001d9c <ILI9341_Fill_Rect+0x30>
				ILI9341_SendData(color&0xff);
	}
}
 8001da4:	bd70      	pop	{r4, r5, r6, pc}
 8001da6:	bf00      	nop
 8001da8:	60040000 	.word	0x60040000

08001dac <ILI9341_drawLine>:
  fillCircleHelper(x0, y0, r, 3, 0, color);
}

//9. Line drawing functions
void ILI9341_drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8001dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001db0:	b083      	sub	sp, #12
 8001db2:	4605      	mov	r5, r0
 8001db4:	460e      	mov	r6, r1
 8001db6:	4617      	mov	r7, r2
 8001db8:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8001dbc:	9200      	str	r2, [sp, #0]
	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8001dbe:	eba3 0801 	sub.w	r8, r3, r1
 8001dc2:	f1b8 0f00 	cmp.w	r8, #0
 8001dc6:	bfb8      	it	lt
 8001dc8:	f1c8 0800 	rsblt	r8, r8, #0
 8001dcc:	eba7 0900 	sub.w	r9, r7, r0
 8001dd0:	f1b9 0f00 	cmp.w	r9, #0
 8001dd4:	bfb8      	it	lt
 8001dd6:	f1c9 0900 	rsblt	r9, r9, #0
  if (steep) {
 8001dda:	45c8      	cmp	r8, r9
 8001ddc:	dd04      	ble.n	8001de8 <ILI9341_drawLine+0x3c>
 8001dde:	463a      	mov	r2, r7
    swap(x0, y0);
    swap(x1, y1);
 8001de0:	461f      	mov	r7, r3
 8001de2:	4613      	mov	r3, r2
    swap(x0, y0);
 8001de4:	460d      	mov	r5, r1
 8001de6:	4606      	mov	r6, r0
  }

  if (x0 > x1) {
 8001de8:	42bd      	cmp	r5, r7
 8001dea:	dd05      	ble.n	8001df8 <ILI9341_drawLine+0x4c>
 8001dec:	4632      	mov	r2, r6
    swap(x0, x1);
    swap(y0, y1);
 8001dee:	461e      	mov	r6, r3
 8001df0:	4613      	mov	r3, r2
  if (x0 > x1) {
 8001df2:	462a      	mov	r2, r5
    swap(x0, x1);
 8001df4:	463d      	mov	r5, r7
 8001df6:	4617      	mov	r7, r2
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8001df8:	eba7 0b05 	sub.w	fp, r7, r5
 8001dfc:	fa1f fb8b 	uxth.w	fp, fp
  dy = abs(y1 - y0);
 8001e00:	eba3 0a06 	sub.w	sl, r3, r6
 8001e04:	f1ba 0f00 	cmp.w	sl, #0
 8001e08:	bfb8      	it	lt
 8001e0a:	f1ca 0a00 	rsblt	sl, sl, #0

  int16_t err = dx / 2;
 8001e0e:	fa0f f48b 	sxth.w	r4, fp
 8001e12:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8001e16:	1064      	asrs	r4, r4, #1
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 8001e18:	429e      	cmp	r6, r3
 8001e1a:	bfb4      	ite	lt
 8001e1c:	2301      	movlt	r3, #1
 8001e1e:	f04f 33ff 	movge.w	r3, #4294967295
 8001e22:	9301      	str	r3, [sp, #4]
  }

  for (; x0<=x1; x0++) {
 8001e24:	42bd      	cmp	r5, r7
 8001e26:	dd06      	ble.n	8001e36 <ILI9341_drawLine+0x8a>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}	
 8001e28:	b003      	add	sp, #12
 8001e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e2e:	3501      	adds	r5, #1
 8001e30:	b22d      	sxth	r5, r5
  for (; x0<=x1; x0++) {
 8001e32:	42af      	cmp	r7, r5
 8001e34:	dbf8      	blt.n	8001e28 <ILI9341_drawLine+0x7c>
    if (steep) {
 8001e36:	45c8      	cmp	r8, r9
      ILI9341_DrawPixel(y0, x0, color);
 8001e38:	9a00      	ldr	r2, [sp, #0]
 8001e3a:	bfc7      	ittee	gt
 8001e3c:	b2a9      	uxthgt	r1, r5
 8001e3e:	b2b0      	uxthgt	r0, r6
      ILI9341_DrawPixel(x0, y0, color);
 8001e40:	b2b1      	uxthle	r1, r6
 8001e42:	b2a8      	uxthle	r0, r5
 8001e44:	f7ff ff5a 	bl	8001cfc <ILI9341_DrawPixel>
    err -= dy;
 8001e48:	eba4 040a 	sub.w	r4, r4, sl
 8001e4c:	b2a3      	uxth	r3, r4
 8001e4e:	b21c      	sxth	r4, r3
    if (err < 0) {
 8001e50:	2c00      	cmp	r4, #0
 8001e52:	daec      	bge.n	8001e2e <ILI9341_drawLine+0x82>
      y0 += ystep;
 8001e54:	9a01      	ldr	r2, [sp, #4]
 8001e56:	4416      	add	r6, r2
 8001e58:	b236      	sxth	r6, r6
      err += dx;
 8001e5a:	eb0b 0403 	add.w	r4, fp, r3
 8001e5e:	b224      	sxth	r4, r4
 8001e60:	e7e5      	b.n	8001e2e <ILI9341_drawLine+0x82>

08001e62 <ILI9341_drawFastVLine>:
{
	ILI9341_drawLine(x, y, x+w-1, y, color);
}

void ILI9341_drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8001e62:	b500      	push	{lr}
 8001e64:	b083      	sub	sp, #12
	ILI9341_drawLine(x, y, x, y+h-1, color);
 8001e66:	3a01      	subs	r2, #1
 8001e68:	440a      	add	r2, r1
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	b213      	sxth	r3, r2
 8001e6e:	4602      	mov	r2, r0
 8001e70:	f7ff ff9c 	bl	8001dac <ILI9341_drawLine>
}
 8001e74:	b003      	add	sp, #12
 8001e76:	f85d fb04 	ldr.w	pc, [sp], #4

08001e7a <fillCircleHelper>:
{
 8001e7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e7e:	b089      	sub	sp, #36	; 0x24
 8001e80:	9006      	str	r0, [sp, #24]
 8001e82:	9107      	str	r1, [sp, #28]
 8001e84:	4691      	mov	r9, r2
 8001e86:	4619      	mov	r1, r3
 8001e88:	9304      	str	r3, [sp, #16]
 8001e8a:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
 8001e8e:	9201      	str	r2, [sp, #4]
	int16_t f     = 1 - r;
 8001e90:	fa1f f389 	uxth.w	r3, r9
 8001e94:	f1c3 0401 	rsb	r4, r3, #1
  int16_t ddF_y = -2 * r;
 8001e98:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	b21a      	sxth	r2, r3
 8001ea0:	9203      	str	r2, [sp, #12]
  while (x<y) {
 8001ea2:	f1b9 0f00 	cmp.w	r9, #0
 8001ea6:	dd68      	ble.n	8001f7a <fillCircleHelper+0x100>
 8001ea8:	b224      	sxth	r4, r4
  int16_t x     = 0;
 8001eaa:	2700      	movs	r7, #0
    if (cornername & 0x1) {
 8001eac:	f001 0301 	and.w	r3, r1, #1
 8001eb0:	9305      	str	r3, [sp, #20]
 8001eb2:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	9302      	str	r3, [sp, #8]
 8001ebc:	e00f      	b.n	8001ede <fillCircleHelper+0x64>
 8001ebe:	3701      	adds	r7, #1
 8001ec0:	b2be      	uxth	r6, r7
 8001ec2:	b237      	sxth	r7, r6
 8001ec4:	0075      	lsls	r5, r6, #1
 8001ec6:	b2ad      	uxth	r5, r5
    f     += ddF_x;
 8001ec8:	1c6b      	adds	r3, r5, #1
 8001eca:	441c      	add	r4, r3
 8001ecc:	b224      	sxth	r4, r4
    if (cornername & 0x1) {
 8001ece:	9b05      	ldr	r3, [sp, #20]
 8001ed0:	b99b      	cbnz	r3, 8001efa <fillCircleHelper+0x80>
    if (cornername & 0x2) {
 8001ed2:	9b04      	ldr	r3, [sp, #16]
 8001ed4:	f013 0f02 	tst.w	r3, #2
 8001ed8:	d12f      	bne.n	8001f3a <fillCircleHelper+0xc0>
  while (x<y) {
 8001eda:	454f      	cmp	r7, r9
 8001edc:	da4d      	bge.n	8001f7a <fillCircleHelper+0x100>
    if (f >= 0) {
 8001ede:	2c00      	cmp	r4, #0
 8001ee0:	dbed      	blt.n	8001ebe <fillCircleHelper+0x44>
      y--;
 8001ee2:	f109 39ff 	add.w	r9, r9, #4294967295
 8001ee6:	fa0f f989 	sxth.w	r9, r9
      ddF_y += 2;
 8001eea:	9b03      	ldr	r3, [sp, #12]
 8001eec:	3302      	adds	r3, #2
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	b21a      	sxth	r2, r3
 8001ef2:	9203      	str	r2, [sp, #12]
      f     += ddF_y;
 8001ef4:	441c      	add	r4, r3
 8001ef6:	b224      	sxth	r4, r4
 8001ef8:	e7e1      	b.n	8001ebe <fillCircleHelper+0x44>
      ILI9341_drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
 8001efa:	f8bd 8018 	ldrh.w	r8, [sp, #24]
 8001efe:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 8001f02:	fa1f fb89 	uxth.w	fp, r9
 8001f06:	9b02      	ldr	r3, [sp, #8]
 8001f08:	eb03 024b 	add.w	r2, r3, fp, lsl #1
 8001f0c:	ebaa 010b 	sub.w	r1, sl, fp
 8001f10:	eb08 0006 	add.w	r0, r8, r6
 8001f14:	9b01      	ldr	r3, [sp, #4]
 8001f16:	b212      	sxth	r2, r2
 8001f18:	b209      	sxth	r1, r1
 8001f1a:	b200      	sxth	r0, r0
 8001f1c:	f7ff ffa1 	bl	8001e62 <ILI9341_drawFastVLine>
      ILI9341_drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
 8001f20:	9a02      	ldr	r2, [sp, #8]
 8001f22:	442a      	add	r2, r5
 8001f24:	ebaa 0106 	sub.w	r1, sl, r6
 8001f28:	eb08 000b 	add.w	r0, r8, fp
 8001f2c:	9b01      	ldr	r3, [sp, #4]
 8001f2e:	b212      	sxth	r2, r2
 8001f30:	b209      	sxth	r1, r1
 8001f32:	b200      	sxth	r0, r0
 8001f34:	f7ff ff95 	bl	8001e62 <ILI9341_drawFastVLine>
 8001f38:	e7cb      	b.n	8001ed2 <fillCircleHelper+0x58>
      ILI9341_drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
 8001f3a:	f8bd 8018 	ldrh.w	r8, [sp, #24]
 8001f3e:	f8bd a01c 	ldrh.w	sl, [sp, #28]
 8001f42:	fa1f fb89 	uxth.w	fp, r9
 8001f46:	9b02      	ldr	r3, [sp, #8]
 8001f48:	eb03 024b 	add.w	r2, r3, fp, lsl #1
 8001f4c:	ebaa 010b 	sub.w	r1, sl, fp
 8001f50:	eba8 0006 	sub.w	r0, r8, r6
 8001f54:	9b01      	ldr	r3, [sp, #4]
 8001f56:	b212      	sxth	r2, r2
 8001f58:	b209      	sxth	r1, r1
 8001f5a:	b200      	sxth	r0, r0
 8001f5c:	f7ff ff81 	bl	8001e62 <ILI9341_drawFastVLine>
      ILI9341_drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
 8001f60:	9a02      	ldr	r2, [sp, #8]
 8001f62:	442a      	add	r2, r5
 8001f64:	ebaa 0106 	sub.w	r1, sl, r6
 8001f68:	eba8 000b 	sub.w	r0, r8, fp
 8001f6c:	9b01      	ldr	r3, [sp, #4]
 8001f6e:	b212      	sxth	r2, r2
 8001f70:	b209      	sxth	r1, r1
 8001f72:	b200      	sxth	r0, r0
 8001f74:	f7ff ff75 	bl	8001e62 <ILI9341_drawFastVLine>
 8001f78:	e7af      	b.n	8001eda <fillCircleHelper+0x60>
}
 8001f7a:	b009      	add	sp, #36	; 0x24
 8001f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001f80 <ILI9341_fillCircle>:
{
 8001f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f82:	b083      	sub	sp, #12
 8001f84:	4606      	mov	r6, r0
 8001f86:	460c      	mov	r4, r1
 8001f88:	4615      	mov	r5, r2
 8001f8a:	461f      	mov	r7, r3
	ILI9341_drawFastVLine(x0, y0-r, 2*r+1, color);
 8001f8c:	b291      	uxth	r1, r2
 8001f8e:	004a      	lsls	r2, r1, #1
 8001f90:	3201      	adds	r2, #1
 8001f92:	1a61      	subs	r1, r4, r1
 8001f94:	b212      	sxth	r2, r2
 8001f96:	b209      	sxth	r1, r1
 8001f98:	f7ff ff63 	bl	8001e62 <ILI9341_drawFastVLine>
  fillCircleHelper(x0, y0, r, 3, 0, color);
 8001f9c:	9701      	str	r7, [sp, #4]
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	462a      	mov	r2, r5
 8001fa6:	4621      	mov	r1, r4
 8001fa8:	4630      	mov	r0, r6
 8001faa:	f7ff ff66 	bl	8001e7a <fillCircleHelper>
}
 8001fae:	b003      	add	sp, #12
 8001fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001fb4 <ILI9341_drawChar>:
	}
}

//11. Text printing functions
void ILI9341_drawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size)
{
 8001fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fb8:	b08d      	sub	sp, #52	; 0x34
 8001fba:	9009      	str	r0, [sp, #36]	; 0x24
 8001fbc:	9107      	str	r1, [sp, #28]
 8001fbe:	4699      	mov	r9, r3
 8001fc0:	f8bd a058 	ldrh.w	sl, [sp, #88]	; 0x58
 8001fc4:	f89d b05c 	ldrb.w	fp, [sp, #92]	; 0x5c
     (y >= ILI9341_HEIGHT)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;
*/
  if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 8001fc8:	2aaf      	cmp	r2, #175	; 0xaf
 8001fca:	bf84      	itt	hi
 8001fcc:	3201      	addhi	r2, #1
 8001fce:	b2d2      	uxtbhi	r2, r2
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font1+(c*5)+i);
 8001fd0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001fd4:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8001fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001fda:	9303      	str	r3, [sp, #12]
 8001fdc:	2300      	movs	r3, #0
 8001fde:	9306      	str	r3, [sp, #24]
 8001fe0:	4b2c      	ldr	r3, [pc, #176]	; (8002094 <ILI9341_drawChar+0xe0>)
 8001fe2:	4413      	add	r3, r2
 8001fe4:	930b      	str	r3, [sp, #44]	; 0x2c
 8001fe6:	e03a      	b.n	800205e <ILI9341_drawChar+0xaa>
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          ILI9341_DrawPixel(x+i, y+j, color);
 8001fe8:	9b07      	ldr	r3, [sp, #28]
 8001fea:	1919      	adds	r1, r3, r4
 8001fec:	464a      	mov	r2, r9
 8001fee:	b289      	uxth	r1, r1
 8001ff0:	9808      	ldr	r0, [sp, #32]
 8001ff2:	f7ff fe83 	bl	8001cfc <ILI9341_DrawPixel>
 8001ff6:	e00d      	b.n	8002014 <ILI9341_drawChar+0x60>
        else {  // big size
          ILI9341_Fill_Rect(x+(i*size), y+(j*size), size + x+(i*size), size+1 + y+(j*size), color);
        } 
      } else if (bg != color) {
 8001ff8:	45ca      	cmp	sl, r9
 8001ffa:	d00b      	beq.n	8002014 <ILI9341_drawChar+0x60>
        if (size == 1) // default size
 8001ffc:	f1bb 0f01 	cmp.w	fp, #1
 8002000:	d01e      	beq.n	8002040 <ILI9341_drawChar+0x8c>
          ILI9341_DrawPixel(x+i, y+j, bg);
        else {  // big size
          ILI9341_Fill_Rect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 8002002:	f8cd a000 	str.w	sl, [sp]
 8002006:	9b05      	ldr	r3, [sp, #20]
 8002008:	443b      	add	r3, r7
 800200a:	9a04      	ldr	r2, [sp, #16]
 800200c:	4639      	mov	r1, r7
 800200e:	9803      	ldr	r0, [sp, #12]
 8002010:	f7ff feac 	bl	8001d6c <ILI9341_Fill_Rect>
        }
      }
      line >>= 1;
 8002014:	086d      	lsrs	r5, r5, #1
 8002016:	3401      	adds	r4, #1
 8002018:	4446      	add	r6, r8
 800201a:	4447      	add	r7, r8
    for (int8_t j = 0; j<8; j++) {
 800201c:	2c08      	cmp	r4, #8
 800201e:	d017      	beq.n	8002050 <ILI9341_drawChar+0x9c>
      if (line & 0x1) {
 8002020:	f015 0f01 	tst.w	r5, #1
 8002024:	d0e8      	beq.n	8001ff8 <ILI9341_drawChar+0x44>
        if (size == 1) // default size
 8002026:	f1bb 0f01 	cmp.w	fp, #1
 800202a:	d0dd      	beq.n	8001fe8 <ILI9341_drawChar+0x34>
          ILI9341_Fill_Rect(x+(i*size), y+(j*size), size + x+(i*size), size+1 + y+(j*size), color);
 800202c:	f8cd 9000 	str.w	r9, [sp]
 8002030:	9b05      	ldr	r3, [sp, #20]
 8002032:	4433      	add	r3, r6
 8002034:	9a04      	ldr	r2, [sp, #16]
 8002036:	4631      	mov	r1, r6
 8002038:	9803      	ldr	r0, [sp, #12]
 800203a:	f7ff fe97 	bl	8001d6c <ILI9341_Fill_Rect>
 800203e:	e7e9      	b.n	8002014 <ILI9341_drawChar+0x60>
          ILI9341_DrawPixel(x+i, y+j, bg);
 8002040:	9b07      	ldr	r3, [sp, #28]
 8002042:	1919      	adds	r1, r3, r4
 8002044:	4652      	mov	r2, sl
 8002046:	b289      	uxth	r1, r1
 8002048:	9808      	ldr	r0, [sp, #32]
 800204a:	f7ff fe57 	bl	8001cfc <ILI9341_DrawPixel>
 800204e:	e7e1      	b.n	8002014 <ILI9341_drawChar+0x60>
 8002050:	9b06      	ldr	r3, [sp, #24]
 8002052:	3301      	adds	r3, #1
 8002054:	9306      	str	r3, [sp, #24]
 8002056:	9a04      	ldr	r2, [sp, #16]
 8002058:	9203      	str	r2, [sp, #12]
  for (int8_t i=0; i<6; i++ ) {
 800205a:	2b06      	cmp	r3, #6
 800205c:	d017      	beq.n	800208e <ILI9341_drawChar+0xda>
    if (i == 5) 
 800205e:	9a06      	ldr	r2, [sp, #24]
 8002060:	b253      	sxtb	r3, r2
 8002062:	2b05      	cmp	r3, #5
      line = pgm_read_byte(font1+(c*5)+i);
 8002064:	bf1a      	itte	ne
 8002066:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8002068:	5c9d      	ldrbne	r5, [r3, r2]
      line = 0x0;
 800206a:	2500      	moveq	r5, #0
 800206c:	9b03      	ldr	r3, [sp, #12]
 800206e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002070:	4413      	add	r3, r2
 8002072:	9304      	str	r3, [sp, #16]
 8002074:	46d8      	mov	r8, fp
 8002076:	9f07      	ldr	r7, [sp, #28]
 8002078:	463e      	mov	r6, r7
 800207a:	2400      	movs	r4, #0
          ILI9341_Fill_Rect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 800207c:	f10b 0301 	add.w	r3, fp, #1
 8002080:	9305      	str	r3, [sp, #20]
          ILI9341_DrawPixel(x+i, y+j, bg);
 8002082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002084:	9a06      	ldr	r2, [sp, #24]
 8002086:	4413      	add	r3, r2
 8002088:	b29b      	uxth	r3, r3
 800208a:	9308      	str	r3, [sp, #32]
 800208c:	e7c8      	b.n	8002020 <ILI9341_drawChar+0x6c>
    }
  }
}
 800208e:	b00d      	add	sp, #52	; 0x34
 8002090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002094:	08007d18 	.word	0x08007d18

08002098 <ILI9341_printText>:
void ILI9341_printText(char text[], int16_t x, int16_t y, uint16_t color, uint16_t bg, uint8_t size)
{
 8002098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800209c:	b083      	sub	sp, #12
 800209e:	f8bd b030 	ldrh.w	fp, [sp, #48]	; 0x30
 80020a2:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
	int16_t offset;
	offset = size*6;
 80020a6:	eb08 0748 	add.w	r7, r8, r8, lsl #1
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 80020aa:	7805      	ldrb	r5, [r0, #0]
 80020ac:	b30d      	cbz	r5, 80020f2 <ILI9341_printText+0x5a>
 80020ae:	007f      	lsls	r7, r7, #1
 80020b0:	469a      	mov	sl, r3
 80020b2:	4691      	mov	r9, r2
 80020b4:	460c      	mov	r4, r1
 80020b6:	4606      	mov	r6, r0
	{
		ILI9341_drawChar(x+(offset*i), y, text[i],color,bg,size);
 80020b8:	f8cd 8004 	str.w	r8, [sp, #4]
 80020bc:	f8cd b000 	str.w	fp, [sp]
 80020c0:	462a      	mov	r2, r5
 80020c2:	4649      	mov	r1, r9
 80020c4:	4620      	mov	r0, r4
 80020c6:	f7ff ff75 	bl	8001fb4 <ILI9341_drawChar>
 80020ca:	4635      	mov	r5, r6
 80020cc:	443c      	add	r4, r7
 80020ce:	b2a4      	uxth	r4, r4
 80020d0:	3627      	adds	r6, #39	; 0x27
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 80020d2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80020d6:	b162      	cbz	r2, 80020f2 <ILI9341_printText+0x5a>
		ILI9341_drawChar(x+(offset*i), y, text[i],color,bg,size);
 80020d8:	f8cd 8004 	str.w	r8, [sp, #4]
 80020dc:	f8cd b000 	str.w	fp, [sp]
 80020e0:	4653      	mov	r3, sl
 80020e2:	4649      	mov	r1, r9
 80020e4:	b220      	sxth	r0, r4
 80020e6:	f7ff ff65 	bl	8001fb4 <ILI9341_drawChar>
 80020ea:	443c      	add	r4, r7
 80020ec:	b2a4      	uxth	r4, r4
	for(uint16_t i=0; i<40 && text[i]!=NULL; i++)
 80020ee:	42ae      	cmp	r6, r5
 80020f0:	d1ef      	bne.n	80020d2 <ILI9341_printText+0x3a>
	}
}
 80020f2:	b003      	add	sp, #12
 80020f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080020f8 <ILI9341_printImage>:

//12. Image print (RGB 565, 2 bytes per pixel)
void ILI9341_printImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t *data, uint32_t size)
{
 80020f8:	b538      	push	{r3, r4, r5, lr}
 80020fa:	9c05      	ldr	r4, [sp, #20]
	uint32_t n = size;
	ILI9341_SetCursorPosition(x, y, w+x-1, h+y-1);
 80020fc:	1e4d      	subs	r5, r1, #1
 80020fe:	442b      	add	r3, r5
 8002100:	1e45      	subs	r5, r0, #1
 8002102:	442a      	add	r2, r5
 8002104:	b29b      	uxth	r3, r3
 8002106:	b292      	uxth	r2, r2
 8002108:	f7ff fd80 	bl	8001c0c <ILI9341_SetCursorPosition>
	for(uint32_t i=0; i<n ; i++)
 800210c:	b144      	cbz	r4, 8002120 <ILI9341_printImage+0x28>
 800210e:	9b04      	ldr	r3, [sp, #16]
 8002110:	3b01      	subs	r3, #1
 8002112:	1919      	adds	r1, r3, r4
	*(__IO uint8_t *)(0x60040000) = data;
 8002114:	4803      	ldr	r0, [pc, #12]	; (8002124 <ILI9341_printImage+0x2c>)
	{
		ILI9341_SendData(data[i]);
 8002116:	f813 2f01 	ldrb.w	r2, [r3, #1]!
	*(__IO uint8_t *)(0x60040000) = data;
 800211a:	7002      	strb	r2, [r0, #0]
	for(uint32_t i=0; i<n ; i++)
 800211c:	428b      	cmp	r3, r1
 800211e:	d1fa      	bne.n	8002116 <ILI9341_printImage+0x1e>
	}
}
 8002120:	bd38      	pop	{r3, r4, r5, pc}
 8002122:	bf00      	nop
 8002124:	60040000 	.word	0x60040000

08002128 <ILI9341_setRotation>:

//13. Set screen rotation
void ILI9341_setRotation(uint8_t rotate)
{
	switch(rotate)
 8002128:	3801      	subs	r0, #1
 800212a:	2803      	cmp	r0, #3
 800212c:	d833      	bhi.n	8002196 <ILI9341_setRotation+0x6e>
 800212e:	e8df f000 	tbb	[pc, r0]
 8002132:	0e02      	.short	0x0e02
 8002134:	261a      	.short	0x261a
	{
		case 1:
			rotationNum = 1;
 8002136:	4b1e      	ldr	r3, [pc, #120]	; (80021b0 <ILI9341_setRotation+0x88>)
 8002138:	2201      	movs	r2, #1
 800213a:	701a      	strb	r2, [r3, #0]
	*(__IO uint8_t *)(0x60000000) = com;
 800213c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8002140:	2236      	movs	r2, #54	; 0x36
 8002142:	701a      	strb	r2, [r3, #0]
	*(__IO uint8_t *)(0x60040000) = data;
 8002144:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8002148:	2288      	movs	r2, #136	; 0x88
 800214a:	701a      	strb	r2, [r3, #0]
 800214c:	4770      	bx	lr
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
			break;
		case 2:
			rotationNum = 2;
 800214e:	4b18      	ldr	r3, [pc, #96]	; (80021b0 <ILI9341_setRotation+0x88>)
 8002150:	2202      	movs	r2, #2
 8002152:	701a      	strb	r2, [r3, #0]
	*(__IO uint8_t *)(0x60000000) = com;
 8002154:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8002158:	2236      	movs	r2, #54	; 0x36
 800215a:	701a      	strb	r2, [r3, #0]
	*(__IO uint8_t *)(0x60040000) = data;
 800215c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8002160:	2228      	movs	r2, #40	; 0x28
 8002162:	701a      	strb	r2, [r3, #0]
 8002164:	4770      	bx	lr
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
			ILI9341_SendData(ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
			break;
		case 3:
			rotationNum = 3;
 8002166:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <ILI9341_setRotation+0x88>)
 8002168:	2203      	movs	r2, #3
 800216a:	701a      	strb	r2, [r3, #0]
	*(__IO uint8_t *)(0x60000000) = com;
 800216c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8002170:	2236      	movs	r2, #54	; 0x36
 8002172:	701a      	strb	r2, [r3, #0]
	*(__IO uint8_t *)(0x60040000) = data;
 8002174:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8002178:	2248      	movs	r2, #72	; 0x48
 800217a:	701a      	strb	r2, [r3, #0]
 800217c:	4770      	bx	lr
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
			break;
		case 4:
			rotationNum = 4;
 800217e:	4b0c      	ldr	r3, [pc, #48]	; (80021b0 <ILI9341_setRotation+0x88>)
 8002180:	2204      	movs	r2, #4
 8002182:	701a      	strb	r2, [r3, #0]
	*(__IO uint8_t *)(0x60000000) = com;
 8002184:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8002188:	2236      	movs	r2, #54	; 0x36
 800218a:	701a      	strb	r2, [r3, #0]
	*(__IO uint8_t *)(0x60040000) = data;
 800218c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8002190:	22e8      	movs	r2, #232	; 0xe8
 8002192:	701a      	strb	r2, [r3, #0]
 8002194:	4770      	bx	lr
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
			ILI9341_SendData(ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
			break;
		default:
			rotationNum = 1;
 8002196:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <ILI9341_setRotation+0x88>)
 8002198:	2201      	movs	r2, #1
 800219a:	701a      	strb	r2, [r3, #0]
	*(__IO uint8_t *)(0x60000000) = com;
 800219c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80021a0:	2236      	movs	r2, #54	; 0x36
 80021a2:	701a      	strb	r2, [r3, #0]
	*(__IO uint8_t *)(0x60040000) = data;
 80021a4:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80021a8:	2288      	movs	r2, #136	; 0x88
 80021aa:	701a      	strb	r2, [r3, #0]
			ILI9341_SendCommand(ILI9341_MEMCONTROL);
			ILI9341_SendData(ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
			break;
	}
}
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	20000c88 	.word	0x20000c88

080021b4 <drawgridline>:

// Zhi Functions
void drawgridline(void)
{
 80021b4:	b510      	push	{r4, lr}
 80021b6:	b082      	sub	sp, #8
	//rectangle, 308*225
	ILI9341_drawLine(6, 28, 6, 208, COLOR_BLACK);
 80021b8:	2400      	movs	r4, #0
 80021ba:	9400      	str	r4, [sp, #0]
 80021bc:	23d0      	movs	r3, #208	; 0xd0
 80021be:	2206      	movs	r2, #6
 80021c0:	211c      	movs	r1, #28
 80021c2:	4610      	mov	r0, r2
 80021c4:	f7ff fdf2 	bl	8001dac <ILI9341_drawLine>
	ILI9341_drawLine(314, 28, 314, 208, COLOR_BLACK);
 80021c8:	9400      	str	r4, [sp, #0]
 80021ca:	23d0      	movs	r3, #208	; 0xd0
 80021cc:	f44f 729d 	mov.w	r2, #314	; 0x13a
 80021d0:	211c      	movs	r1, #28
 80021d2:	4610      	mov	r0, r2
 80021d4:	f7ff fdea 	bl	8001dac <ILI9341_drawLine>
	ILI9341_drawLine(6, 28, 314, 28, COLOR_BLACK);
 80021d8:	9400      	str	r4, [sp, #0]
 80021da:	231c      	movs	r3, #28
 80021dc:	f44f 729d 	mov.w	r2, #314	; 0x13a
 80021e0:	4619      	mov	r1, r3
 80021e2:	2006      	movs	r0, #6
 80021e4:	f7ff fde2 	bl	8001dac <ILI9341_drawLine>
	ILI9341_drawLine(6, 208, 314, 208, COLOR_BLACK);
 80021e8:	9400      	str	r4, [sp, #0]
 80021ea:	23d0      	movs	r3, #208	; 0xd0
 80021ec:	f44f 729d 	mov.w	r2, #314	; 0x13a
 80021f0:	4619      	mov	r1, r3
 80021f2:	2006      	movs	r0, #6
 80021f4:	f7ff fdda 	bl	8001dac <ILI9341_drawLine>
	//grid
}
 80021f8:	b002      	add	sp, #8
 80021fa:	bd10      	pop	{r4, pc}

080021fc <drawmic>:

void drawmic(void)
{
 80021fc:	b508      	push	{r3, lr}
	static uint8_t mic2_conn = 1;
	static uint8_t mic3_conn = 1;
	static uint8_t mic4_conn = 1;

	if(mic1_conn == 1)
		ILI9341_fillCircle(9,29, 6, COLOR_NAVY);
 80021fe:	230f      	movs	r3, #15
 8002200:	2206      	movs	r2, #6
 8002202:	211d      	movs	r1, #29
 8002204:	2009      	movs	r0, #9
 8002206:	f7ff febb 	bl	8001f80 <ILI9341_fillCircle>
	if(mic2_conn == 1)
		ILI9341_fillCircle(311,29, 6, COLOR_NAVY);
 800220a:	230f      	movs	r3, #15
 800220c:	2206      	movs	r2, #6
 800220e:	211d      	movs	r1, #29
 8002210:	f240 1037 	movw	r0, #311	; 0x137
 8002214:	f7ff feb4 	bl	8001f80 <ILI9341_fillCircle>
	if(mic3_conn == 1)
		ILI9341_fillCircle(9,208, 6, COLOR_RED);
 8002218:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800221c:	2206      	movs	r2, #6
 800221e:	21d0      	movs	r1, #208	; 0xd0
 8002220:	2009      	movs	r0, #9
 8002222:	f7ff fead 	bl	8001f80 <ILI9341_fillCircle>
	if(mic4_conn == 1)
		ILI9341_fillCircle(311,208, 6, COLOR_NAVY);
 8002226:	230f      	movs	r3, #15
 8002228:	2206      	movs	r2, #6
 800222a:	21d0      	movs	r1, #208	; 0xd0
 800222c:	f240 1037 	movw	r0, #311	; 0x137
 8002230:	f7ff fea6 	bl	8001f80 <ILI9341_fillCircle>

}
 8002234:	bd08      	pop	{r3, pc}
	...

08002238 <getinput>:

char getinput(int x)
{
 8002238:	b410      	push	{r4}
 800223a:	4b0c      	ldr	r3, [pc, #48]	; (800226c <getinput+0x34>)
 800223c:	7819      	ldrb	r1, [r3, #0]
 800223e:	2200      	movs	r2, #0
	static char digit;
	for(int i=0;i<10;i++){
 8002240:	4613      	mov	r3, r2
		if(x==i)
 8002242:	2401      	movs	r4, #1
 8002244:	4298      	cmp	r0, r3
 8002246:	d008      	beq.n	800225a <getinput+0x22>
	for(int i=0;i<10;i++){
 8002248:	3301      	adds	r3, #1
 800224a:	2b0a      	cmp	r3, #10
 800224c:	d1fa      	bne.n	8002244 <getinput+0xc>
 800224e:	b94a      	cbnz	r2, 8002264 <getinput+0x2c>
			digit = '0' + i;
	}
	return digit;
}
 8002250:	4b06      	ldr	r3, [pc, #24]	; (800226c <getinput+0x34>)
 8002252:	7818      	ldrb	r0, [r3, #0]
 8002254:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800225e:	b2c9      	uxtb	r1, r1
		if(x==i)
 8002260:	4622      	mov	r2, r4
 8002262:	e7f1      	b.n	8002248 <getinput+0x10>
 8002264:	4b01      	ldr	r3, [pc, #4]	; (800226c <getinput+0x34>)
 8002266:	7019      	strb	r1, [r3, #0]
 8002268:	e7f2      	b.n	8002250 <getinput+0x18>
 800226a:	bf00      	nop
 800226c:	20015cb4 	.word	0x20015cb4

08002270 <loc_cor>:

void loc_cor(int x,int y,char* location){
 8002270:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002274:	460c      	mov	r4, r1
 8002276:	4617      	mov	r7, r2
	static char digitx[3],digity[3];
	static uint8_t temp[3];
	temp[0] = x%10; //oneth
 8002278:	4a4e      	ldr	r2, [pc, #312]	; (80023b4 <loc_cor+0x144>)
 800227a:	fb82 3100 	smull	r3, r1, r2, r0
 800227e:	17c3      	asrs	r3, r0, #31
 8002280:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 8002284:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002288:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
 800228c:	4e4a      	ldr	r6, [pc, #296]	; (80023b8 <loc_cor+0x148>)
 800228e:	7033      	strb	r3, [r6, #0]
	temp[1] = ((x-temp[0])/10)%10; //tenth
 8002290:	b2db      	uxtb	r3, r3
 8002292:	1ac0      	subs	r0, r0, r3
 8002294:	fb82 1300 	smull	r1, r3, r2, r0
 8002298:	17c1      	asrs	r1, r0, #31
 800229a:	ebc1 01a3 	rsb	r1, r1, r3, asr #2
 800229e:	fb82 3501 	smull	r3, r5, r2, r1
 80022a2:	17cb      	asrs	r3, r1, #31
 80022a4:	ebc3 03a5 	rsb	r3, r3, r5, asr #2
 80022a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80022ac:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
 80022b0:	7073      	strb	r3, [r6, #1]
	temp[2] = ((x-temp[0]-temp[1])/100)%10; //hunth
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	1ac0      	subs	r0, r0, r3
 80022b6:	4d41      	ldr	r5, [pc, #260]	; (80023bc <loc_cor+0x14c>)
 80022b8:	fb85 3500 	smull	r3, r5, r5, r0
 80022bc:	17c0      	asrs	r0, r0, #31
 80022be:	ebc0 1565 	rsb	r5, r0, r5, asr #5
 80022c2:	fb82 3205 	smull	r3, r2, r2, r5
 80022c6:	17eb      	asrs	r3, r5, #31
 80022c8:	ebc3 02a2 	rsb	r2, r3, r2, asr #2
 80022cc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80022d0:	eba5 0542 	sub.w	r5, r5, r2, lsl #1
 80022d4:	b2ed      	uxtb	r5, r5
 80022d6:	70b5      	strb	r5, [r6, #2]
 80022d8:	46b0      	mov	r8, r6
 80022da:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 80023c0 <loc_cor+0x150>
 80022de:	f106 0a03 	add.w	sl, r6, #3
	for(int i=0;i<3;i++){
		digitx[i] = getinput(temp[i]);
		if(temp[2]==0) digitx[2]=' ';
 80022e2:	f04f 0b20 	mov.w	fp, #32
 80022e6:	e001      	b.n	80022ec <loc_cor+0x7c>
	for(int i=0;i<3;i++){
 80022e8:	4556      	cmp	r6, sl
 80022ea:	d00b      	beq.n	8002304 <loc_cor+0x94>
		digitx[i] = getinput(temp[i]);
 80022ec:	f816 0b01 	ldrb.w	r0, [r6], #1
 80022f0:	f7ff ffa2 	bl	8002238 <getinput>
 80022f4:	f809 0b01 	strb.w	r0, [r9], #1
		if(temp[2]==0) digitx[2]=' ';
 80022f8:	2d00      	cmp	r5, #0
 80022fa:	d1f5      	bne.n	80022e8 <loc_cor+0x78>
 80022fc:	4b30      	ldr	r3, [pc, #192]	; (80023c0 <loc_cor+0x150>)
 80022fe:	f883 b002 	strb.w	fp, [r3, #2]
 8002302:	e7f1      	b.n	80022e8 <loc_cor+0x78>
	}

	temp[0] = y%10; //oneth
 8002304:	492b      	ldr	r1, [pc, #172]	; (80023b4 <loc_cor+0x144>)
 8002306:	fb81 3204 	smull	r3, r2, r1, r4
 800230a:	17e3      	asrs	r3, r4, #31
 800230c:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8002310:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002314:	eba4 0343 	sub.w	r3, r4, r3, lsl #1
 8002318:	4a27      	ldr	r2, [pc, #156]	; (80023b8 <loc_cor+0x148>)
 800231a:	7013      	strb	r3, [r2, #0]
	temp[1] = ((y-temp[0])/10)%10; //tenth
 800231c:	b2db      	uxtb	r3, r3
 800231e:	1ae4      	subs	r4, r4, r3
 8002320:	fb81 0304 	smull	r0, r3, r1, r4
 8002324:	17e0      	asrs	r0, r4, #31
 8002326:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 800232a:	fb81 3500 	smull	r3, r5, r1, r0
 800232e:	17c3      	asrs	r3, r0, #31
 8002330:	ebc3 03a5 	rsb	r3, r3, r5, asr #2
 8002334:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002338:	eba0 0343 	sub.w	r3, r0, r3, lsl #1
 800233c:	7053      	strb	r3, [r2, #1]
	temp[2] = ((y-temp[0]-temp[1])/100)%10; //hunth
 800233e:	b2db      	uxtb	r3, r3
 8002340:	1ae4      	subs	r4, r4, r3
 8002342:	4b1e      	ldr	r3, [pc, #120]	; (80023bc <loc_cor+0x14c>)
 8002344:	fb83 0304 	smull	r0, r3, r3, r4
 8002348:	17e4      	asrs	r4, r4, #31
 800234a:	ebc4 1463 	rsb	r4, r4, r3, asr #5
 800234e:	fb81 3104 	smull	r3, r1, r1, r4
 8002352:	17e3      	asrs	r3, r4, #31
 8002354:	ebc3 01a1 	rsb	r1, r3, r1, asr #2
 8002358:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800235c:	eba4 0441 	sub.w	r4, r4, r1, lsl #1
 8002360:	b2e4      	uxtb	r4, r4
 8002362:	7094      	strb	r4, [r2, #2]
 8002364:	4d17      	ldr	r5, [pc, #92]	; (80023c4 <loc_cor+0x154>)
	for(int i=0;i<3;i++){
		digity[i] = getinput(temp[i]);
		if(temp[2]==0) digity[2]=' ';
 8002366:	46aa      	mov	sl, r5
 8002368:	f04f 0920 	mov.w	r9, #32
 800236c:	e001      	b.n	8002372 <loc_cor+0x102>
	for(int i=0;i<3;i++){
 800236e:	45b0      	cmp	r8, r6
 8002370:	d00a      	beq.n	8002388 <loc_cor+0x118>
		digity[i] = getinput(temp[i]);
 8002372:	f818 0b01 	ldrb.w	r0, [r8], #1
 8002376:	f7ff ff5f 	bl	8002238 <getinput>
 800237a:	f805 0b01 	strb.w	r0, [r5], #1
		if(temp[2]==0) digity[2]=' ';
 800237e:	2c00      	cmp	r4, #0
 8002380:	d1f5      	bne.n	800236e <loc_cor+0xfe>
 8002382:	f88a 9002 	strb.w	r9, [sl, #2]
 8002386:	e7f2      	b.n	800236e <loc_cor+0xfe>
	}

	location[0] = '(';
 8002388:	2328      	movs	r3, #40	; 0x28
 800238a:	703b      	strb	r3, [r7, #0]
	location[1] = digitx[2];
 800238c:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <loc_cor+0x150>)
 800238e:	789a      	ldrb	r2, [r3, #2]
 8002390:	707a      	strb	r2, [r7, #1]
	location[2] = digitx[1];
 8002392:	785a      	ldrb	r2, [r3, #1]
 8002394:	70ba      	strb	r2, [r7, #2]
	location[3] = digitx[0];
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	70fb      	strb	r3, [r7, #3]
	location[4] = ',';
 800239a:	232c      	movs	r3, #44	; 0x2c
 800239c:	713b      	strb	r3, [r7, #4]
	location[5] = digity[2];
 800239e:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <loc_cor+0x154>)
 80023a0:	789a      	ldrb	r2, [r3, #2]
 80023a2:	717a      	strb	r2, [r7, #5]
	location[6] = digity[1];
 80023a4:	785a      	ldrb	r2, [r3, #1]
 80023a6:	71ba      	strb	r2, [r7, #6]
	location[7] = digity[0];
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	71fb      	strb	r3, [r7, #7]
	location[8] = ')';
 80023ac:	2329      	movs	r3, #41	; 0x29
 80023ae:	723b      	strb	r3, [r7, #8]
}
 80023b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023b4:	66666667 	.word	0x66666667
 80023b8:	20015cc0 	.word	0x20015cc0
 80023bc:	51eb851f 	.word	0x51eb851f
 80023c0:	20015cb8 	.word	0x20015cb8
 80023c4:	20015cbc 	.word	0x20015cbc

080023c8 <printlocation>:

void printlocation(int x, int y)
{
 80023c8:	b530      	push	{r4, r5, lr}
 80023ca:	b083      	sub	sp, #12
	if(x<16 & y<198 & y>=38) ILI9341_printImage(6, y-10, 40, 40, clap, sizeof(clap));
 80023cc:	280f      	cmp	r0, #15
 80023ce:	bfcc      	ite	gt
 80023d0:	2300      	movgt	r3, #0
 80023d2:	2301      	movle	r3, #1
 80023d4:	f1a1 0226 	sub.w	r2, r1, #38	; 0x26
 80023d8:	2a9f      	cmp	r2, #159	; 0x9f
 80023da:	d801      	bhi.n	80023e0 <printlocation+0x18>
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d13a      	bne.n	8002456 <printlocation+0x8e>
	else if(x<16 & y<38) ILI9341_printImage(6, 28, 40, 40, clap, sizeof(clap));
 80023e0:	2925      	cmp	r1, #37	; 0x25
 80023e2:	bfcc      	ite	gt
 80023e4:	2200      	movgt	r2, #0
 80023e6:	2201      	movle	r2, #1
 80023e8:	b10b      	cbz	r3, 80023ee <printlocation+0x26>
 80023ea:	2a00      	cmp	r2, #0
 80023ec:	d141      	bne.n	8002472 <printlocation+0xaa>
	else if(x<16 & y>198) ILI9341_printImage(6, 188, 40, 40, clap, sizeof(clap));
 80023ee:	29c6      	cmp	r1, #198	; 0xc6
 80023f0:	bfd4      	ite	le
 80023f2:	2400      	movle	r4, #0
 80023f4:	2401      	movgt	r4, #1
 80023f6:	b10b      	cbz	r3, 80023fc <printlocation+0x34>
 80023f8:	2c00      	cmp	r4, #0
 80023fa:	d146      	bne.n	800248a <printlocation+0xc2>

	else if(x<=304& y>198) ILI9341_printImage(x-10, 188, 40, 40, clap, sizeof(clap));
 80023fc:	f5b0 7f98 	cmp.w	r0, #304	; 0x130
 8002400:	dc01      	bgt.n	8002406 <printlocation+0x3e>
 8002402:	2c00      	cmp	r4, #0
 8002404:	d14d      	bne.n	80024a2 <printlocation+0xda>
	else if(x>304 & y>198) ILI9341_printImage(294, 188, 40, 40, clap, sizeof(clap));
 8002406:	f5b0 7f98 	cmp.w	r0, #304	; 0x130
 800240a:	dd01      	ble.n	8002410 <printlocation+0x48>
 800240c:	2c00      	cmp	r4, #0
 800240e:	d155      	bne.n	80024bc <printlocation+0xf4>

	else if(x>301 & y>38) ILI9341_printImage(294, y-10, 40, 40, clap, sizeof(clap));
 8002410:	f5b0 7f97 	cmp.w	r0, #302	; 0x12e
 8002414:	bfb4      	ite	lt
 8002416:	2400      	movlt	r4, #0
 8002418:	2401      	movge	r4, #1
 800241a:	2926      	cmp	r1, #38	; 0x26
 800241c:	bfd4      	ite	le
 800241e:	2500      	movle	r5, #0
 8002420:	2501      	movgt	r5, #1
 8002422:	b10c      	cbz	r4, 8002428 <printlocation+0x60>
 8002424:	2d00      	cmp	r5, #0
 8002426:	d156      	bne.n	80024d6 <printlocation+0x10e>
	else if(x>301 & y<38) ILI9341_printImage(294, 28, 40, 40, clap, sizeof(clap));
 8002428:	b10a      	cbz	r2, 800242e <printlocation+0x66>
 800242a:	2c00      	cmp	r4, #0
 800242c:	d161      	bne.n	80024f2 <printlocation+0x12a>

	else if(x<16 & y>38) ILI9341_printImage(304, y-10, 40, 40, clap, sizeof(clap));
 800242e:	b10b      	cbz	r3, 8002434 <printlocation+0x6c>
 8002430:	2d00      	cmp	r5, #0
 8002432:	d16b      	bne.n	800250c <printlocation+0x144>
	else if(x>16 & y<38) ILI9341_printImage(x-10, 28, 40, 40, clap, sizeof(clap));
 8002434:	2810      	cmp	r0, #16
 8002436:	dd77      	ble.n	8002528 <printlocation+0x160>
 8002438:	2a00      	cmp	r2, #0
 800243a:	d075      	beq.n	8002528 <printlocation+0x160>
 800243c:	380a      	subs	r0, #10
 800243e:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8002442:	9301      	str	r3, [sp, #4]
 8002444:	4b3f      	ldr	r3, [pc, #252]	; (8002544 <printlocation+0x17c>)
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	2328      	movs	r3, #40	; 0x28
 800244a:	461a      	mov	r2, r3
 800244c:	211c      	movs	r1, #28
 800244e:	b280      	uxth	r0, r0
 8002450:	f7ff fe52 	bl	80020f8 <ILI9341_printImage>
 8002454:	e00b      	b.n	800246e <printlocation+0xa6>
	if(x<16 & y<198 & y>=38) ILI9341_printImage(6, y-10, 40, 40, clap, sizeof(clap));
 8002456:	390a      	subs	r1, #10
 8002458:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 800245c:	9301      	str	r3, [sp, #4]
 800245e:	4b39      	ldr	r3, [pc, #228]	; (8002544 <printlocation+0x17c>)
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	2328      	movs	r3, #40	; 0x28
 8002464:	461a      	mov	r2, r3
 8002466:	b289      	uxth	r1, r1
 8002468:	2006      	movs	r0, #6
 800246a:	f7ff fe45 	bl	80020f8 <ILI9341_printImage>
	else if(x<16 & y<38) ILI9341_printImage(134, 28, 40, 40, clap, sizeof(clap));
	else ILI9341_printImage(x-10, y-10, 40, 40, clap, sizeof(clap));
}
 800246e:	b003      	add	sp, #12
 8002470:	bd30      	pop	{r4, r5, pc}
	else if(x<16 & y<38) ILI9341_printImage(6, 28, 40, 40, clap, sizeof(clap));
 8002472:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8002476:	9301      	str	r3, [sp, #4]
 8002478:	4b32      	ldr	r3, [pc, #200]	; (8002544 <printlocation+0x17c>)
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	2328      	movs	r3, #40	; 0x28
 800247e:	461a      	mov	r2, r3
 8002480:	211c      	movs	r1, #28
 8002482:	2006      	movs	r0, #6
 8002484:	f7ff fe38 	bl	80020f8 <ILI9341_printImage>
 8002488:	e7f1      	b.n	800246e <printlocation+0xa6>
	else if(x<16 & y>198) ILI9341_printImage(6, 188, 40, 40, clap, sizeof(clap));
 800248a:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 800248e:	9301      	str	r3, [sp, #4]
 8002490:	4b2c      	ldr	r3, [pc, #176]	; (8002544 <printlocation+0x17c>)
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	2328      	movs	r3, #40	; 0x28
 8002496:	461a      	mov	r2, r3
 8002498:	21bc      	movs	r1, #188	; 0xbc
 800249a:	2006      	movs	r0, #6
 800249c:	f7ff fe2c 	bl	80020f8 <ILI9341_printImage>
 80024a0:	e7e5      	b.n	800246e <printlocation+0xa6>
	else if(x<=304& y>198) ILI9341_printImage(x-10, 188, 40, 40, clap, sizeof(clap));
 80024a2:	380a      	subs	r0, #10
 80024a4:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 80024a8:	9301      	str	r3, [sp, #4]
 80024aa:	4b26      	ldr	r3, [pc, #152]	; (8002544 <printlocation+0x17c>)
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	2328      	movs	r3, #40	; 0x28
 80024b0:	461a      	mov	r2, r3
 80024b2:	21bc      	movs	r1, #188	; 0xbc
 80024b4:	b280      	uxth	r0, r0
 80024b6:	f7ff fe1f 	bl	80020f8 <ILI9341_printImage>
 80024ba:	e7d8      	b.n	800246e <printlocation+0xa6>
	else if(x>304 & y>198) ILI9341_printImage(294, 188, 40, 40, clap, sizeof(clap));
 80024bc:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 80024c0:	9301      	str	r3, [sp, #4]
 80024c2:	4b20      	ldr	r3, [pc, #128]	; (8002544 <printlocation+0x17c>)
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	2328      	movs	r3, #40	; 0x28
 80024c8:	461a      	mov	r2, r3
 80024ca:	21bc      	movs	r1, #188	; 0xbc
 80024cc:	f44f 7093 	mov.w	r0, #294	; 0x126
 80024d0:	f7ff fe12 	bl	80020f8 <ILI9341_printImage>
 80024d4:	e7cb      	b.n	800246e <printlocation+0xa6>
	else if(x>301 & y>38) ILI9341_printImage(294, y-10, 40, 40, clap, sizeof(clap));
 80024d6:	390a      	subs	r1, #10
 80024d8:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 80024dc:	9301      	str	r3, [sp, #4]
 80024de:	4b19      	ldr	r3, [pc, #100]	; (8002544 <printlocation+0x17c>)
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	2328      	movs	r3, #40	; 0x28
 80024e4:	461a      	mov	r2, r3
 80024e6:	b289      	uxth	r1, r1
 80024e8:	f44f 7093 	mov.w	r0, #294	; 0x126
 80024ec:	f7ff fe04 	bl	80020f8 <ILI9341_printImage>
 80024f0:	e7bd      	b.n	800246e <printlocation+0xa6>
	else if(x>301 & y<38) ILI9341_printImage(294, 28, 40, 40, clap, sizeof(clap));
 80024f2:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 80024f6:	9301      	str	r3, [sp, #4]
 80024f8:	4b12      	ldr	r3, [pc, #72]	; (8002544 <printlocation+0x17c>)
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	2328      	movs	r3, #40	; 0x28
 80024fe:	461a      	mov	r2, r3
 8002500:	211c      	movs	r1, #28
 8002502:	f44f 7093 	mov.w	r0, #294	; 0x126
 8002506:	f7ff fdf7 	bl	80020f8 <ILI9341_printImage>
 800250a:	e7b0      	b.n	800246e <printlocation+0xa6>
	else if(x<16 & y>38) ILI9341_printImage(304, y-10, 40, 40, clap, sizeof(clap));
 800250c:	390a      	subs	r1, #10
 800250e:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8002512:	9301      	str	r3, [sp, #4]
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <printlocation+0x17c>)
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	2328      	movs	r3, #40	; 0x28
 800251a:	461a      	mov	r2, r3
 800251c:	b289      	uxth	r1, r1
 800251e:	f44f 7098 	mov.w	r0, #304	; 0x130
 8002522:	f7ff fde9 	bl	80020f8 <ILI9341_printImage>
 8002526:	e7a2      	b.n	800246e <printlocation+0xa6>
	else ILI9341_printImage(x-10, y-10, 40, 40, clap, sizeof(clap));
 8002528:	390a      	subs	r1, #10
 800252a:	380a      	subs	r0, #10
 800252c:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8002530:	9301      	str	r3, [sp, #4]
 8002532:	4b04      	ldr	r3, [pc, #16]	; (8002544 <printlocation+0x17c>)
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	2328      	movs	r3, #40	; 0x28
 8002538:	461a      	mov	r2, r3
 800253a:	b289      	uxth	r1, r1
 800253c:	b280      	uxth	r0, r0
 800253e:	f7ff fddb 	bl	80020f8 <ILI9341_printImage>
}
 8002542:	e794      	b.n	800246e <printlocation+0xa6>
 8002544:	20000008 	.word	0x20000008

08002548 <printgrid>:

void printgrid(void)
{
 8002548:	b530      	push	{r4, r5, lr}
 800254a:	b083      	sub	sp, #12
		ILI9341_drawLine(20, 4, 20, 20, COLOR_BLACK);
 800254c:	2400      	movs	r4, #0
 800254e:	9400      	str	r4, [sp, #0]
 8002550:	2314      	movs	r3, #20
 8002552:	461a      	mov	r2, r3
 8002554:	2104      	movs	r1, #4
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff fc28 	bl	8001dac <ILI9341_drawLine>
		ILI9341_drawLine(20, 4, 18, 8, COLOR_BLACK);
 800255c:	9400      	str	r4, [sp, #0]
 800255e:	2308      	movs	r3, #8
 8002560:	2212      	movs	r2, #18
 8002562:	2104      	movs	r1, #4
 8002564:	2014      	movs	r0, #20
 8002566:	f7ff fc21 	bl	8001dac <ILI9341_drawLine>
		ILI9341_drawLine(20, 4, 22, 8, COLOR_BLACK);
 800256a:	9400      	str	r4, [sp, #0]
 800256c:	2308      	movs	r3, #8
 800256e:	2216      	movs	r2, #22
 8002570:	2104      	movs	r1, #4
 8002572:	2014      	movs	r0, #20
 8002574:	f7ff fc1a 	bl	8001dac <ILI9341_drawLine>

		ILI9341_drawLine(20, 20, 36, 20, COLOR_BLACK);
 8002578:	9400      	str	r4, [sp, #0]
 800257a:	2314      	movs	r3, #20
 800257c:	2224      	movs	r2, #36	; 0x24
 800257e:	4619      	mov	r1, r3
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff fc13 	bl	8001dac <ILI9341_drawLine>
		ILI9341_drawLine(36, 20, 32, 18, COLOR_BLACK);
 8002586:	9400      	str	r4, [sp, #0]
 8002588:	2312      	movs	r3, #18
 800258a:	2220      	movs	r2, #32
 800258c:	2114      	movs	r1, #20
 800258e:	2024      	movs	r0, #36	; 0x24
 8002590:	f7ff fc0c 	bl	8001dac <ILI9341_drawLine>
		ILI9341_drawLine(36, 20, 32, 22, COLOR_BLACK);
 8002594:	9400      	str	r4, [sp, #0]
 8002596:	2316      	movs	r3, #22
 8002598:	2220      	movs	r2, #32
 800259a:	2114      	movs	r1, #20
 800259c:	2024      	movs	r0, #36	; 0x24
 800259e:	f7ff fc05 	bl	8001dac <ILI9341_drawLine>

		ILI9341_printText("y", 12, 3, COLOR_BLACK, COLOR_BLACK, 1);
 80025a2:	2501      	movs	r5, #1
 80025a4:	9501      	str	r5, [sp, #4]
 80025a6:	9400      	str	r4, [sp, #0]
 80025a8:	4623      	mov	r3, r4
 80025aa:	2203      	movs	r2, #3
 80025ac:	210c      	movs	r1, #12
 80025ae:	480e      	ldr	r0, [pc, #56]	; (80025e8 <printgrid+0xa0>)
 80025b0:	f7ff fd72 	bl	8002098 <ILI9341_printText>
		ILI9341_printText("x", 38, 16, COLOR_BLACK, COLOR_BLACK, 1);
 80025b4:	9501      	str	r5, [sp, #4]
 80025b6:	9400      	str	r4, [sp, #0]
 80025b8:	4623      	mov	r3, r4
 80025ba:	2210      	movs	r2, #16
 80025bc:	2126      	movs	r1, #38	; 0x26
 80025be:	480b      	ldr	r0, [pc, #44]	; (80025ec <printgrid+0xa4>)
 80025c0:	f7ff fd6a 	bl	8002098 <ILI9341_printText>
		ILI9341_printText("0", 12, 17, COLOR_BLACK, COLOR_BLACK, 1);
 80025c4:	9501      	str	r5, [sp, #4]
 80025c6:	9400      	str	r4, [sp, #0]
 80025c8:	4623      	mov	r3, r4
 80025ca:	2211      	movs	r2, #17
 80025cc:	210c      	movs	r1, #12
 80025ce:	4808      	ldr	r0, [pc, #32]	; (80025f0 <printgrid+0xa8>)
 80025d0:	f7ff fd62 	bl	8002098 <ILI9341_printText>

		ILI9341_fillCircle(20,19, 2, COLOR_RED);
 80025d4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80025d8:	2202      	movs	r2, #2
 80025da:	2113      	movs	r1, #19
 80025dc:	2014      	movs	r0, #20
 80025de:	f7ff fccf 	bl	8001f80 <ILI9341_fillCircle>
}
 80025e2:	b003      	add	sp, #12
 80025e4:	bd30      	pop	{r4, r5, pc}
 80025e6:	bf00      	nop
 80025e8:	08008218 	.word	0x08008218
 80025ec:	0800821c 	.word	0x0800821c
 80025f0:	08008220 	.word	0x08008220

080025f4 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80025f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025f6:	b095      	sub	sp, #84	; 0x54
  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80025f8:	2400      	movs	r4, #0
 80025fa:	9411      	str	r4, [sp, #68]	; 0x44
 80025fc:	9412      	str	r4, [sp, #72]	; 0x48
 80025fe:	9413      	str	r4, [sp, #76]	; 0x4c
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8002600:	940c      	str	r4, [sp, #48]	; 0x30
 8002602:	940d      	str	r4, [sp, #52]	; 0x34
 8002604:	940e      	str	r4, [sp, #56]	; 0x38
 8002606:	940f      	str	r4, [sp, #60]	; 0x3c
 8002608:	9410      	str	r4, [sp, #64]	; 0x40
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 800260a:	9408      	str	r4, [sp, #32]
 800260c:	9409      	str	r4, [sp, #36]	; 0x24
 800260e:	940a      	str	r4, [sp, #40]	; 0x28
 8002610:	940b      	str	r4, [sp, #44]	; 0x2c

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002612:	9404      	str	r4, [sp, #16]
 8002614:	9405      	str	r4, [sp, #20]
 8002616:	9406      	str	r4, [sp, #24]
 8002618:	9407      	str	r4, [sp, #28]
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800261a:	4b78      	ldr	r3, [pc, #480]	; (80027fc <MX_ADC1_Init+0x208>)
 800261c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800261e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002622:	645a      	str	r2, [r3, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002624:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002626:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800262a:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800262c:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800262e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002630:	f042 0204 	orr.w	r2, r2, #4
 8002634:	631a      	str	r2, [r3, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800263e:	9b00      	ldr	r3, [sp, #0]
  PC0   ------> ADC1_IN10
  PC1   ------> ADC1_IN11
  PC2   ------> ADC1_IN12
  PC3   ------> ADC1_IN13 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8002640:	230f      	movs	r3, #15
 8002642:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8002644:	2303      	movs	r3, #3
 8002646:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002648:	a902      	add	r1, sp, #8
 800264a:	486d      	ldr	r0, [pc, #436]	; (8002800 <MX_ADC1_Init+0x20c>)
 800264c:	f002 fa18 	bl	8004a80 <LL_GPIO_Init>
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 8002650:	4b6c      	ldr	r3, [pc, #432]	; (8002804 <MX_ADC1_Init+0x210>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8002658:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002660:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002668:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002670:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002674:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800267c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002684:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 800268c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002690:	601a      	str	r2, [r3, #0]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8002698:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800269c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 800269e:	695a      	ldr	r2, [r3, #20]
 80026a0:	f022 0204 	bic.w	r2, r2, #4
 80026a4:	615a      	str	r2, [r3, #20]

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_0);

  /** Common config 
  */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80026a6:	9411      	str	r4, [sp, #68]	; 0x44
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80026a8:	9412      	str	r4, [sp, #72]	; 0x48
  ADC_InitStruct.SequencersScanMode = LL_ADC_SEQ_SCAN_ENABLE;
 80026aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026ae:	9313      	str	r3, [sp, #76]	; 0x4c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80026b0:	4d55      	ldr	r5, [pc, #340]	; (8002808 <MX_ADC1_Init+0x214>)
 80026b2:	a911      	add	r1, sp, #68	; 0x44
 80026b4:	4628      	mov	r0, r5
 80026b6:	f002 f92f 	bl	8004918 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_EXT_TIM2_TRGO;
 80026ba:	f04f 53b0 	mov.w	r3, #369098752	; 0x16000000
 80026be:	930c      	str	r3, [sp, #48]	; 0x30
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS;
 80026c0:	f44f 1740 	mov.w	r7, #3145728	; 0x300000
 80026c4:	970d      	str	r7, [sp, #52]	; 0x34
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 80026c6:	940e      	str	r4, [sp, #56]	; 0x38
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 80026c8:	940f      	str	r4, [sp, #60]	; 0x3c
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 80026ca:	f44f 7640 	mov.w	r6, #768	; 0x300
 80026ce:	9610      	str	r6, [sp, #64]	; 0x40
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80026d0:	a90c      	add	r1, sp, #48	; 0x30
 80026d2:	4628      	mov	r0, r5
 80026d4:	f002 f93c 	bl	8004950 <LL_ADC_REG_Init>
  MODIFY_REG(ADCx->CR2, ADC_CR2_EOCS, EocSelection);
 80026d8:	68ab      	ldr	r3, [r5, #8]
 80026da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80026de:	60ab      	str	r3, [r5, #8]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 80026e0:	686b      	ldr	r3, [r5, #4]
 80026e2:	f023 0320 	bic.w	r3, r3, #32
 80026e6:	606b      	str	r3, [r5, #4]
  LL_ADC_REG_SetFlagEndOfConversion(ADC1, LL_ADC_REG_FLAG_EOC_SEQUENCE_CONV);
  LL_ADC_DisableIT_EOCS(ADC1);
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 80026e8:	9408      	str	r4, [sp, #32]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80026ea:	9409      	str	r4, [sp, #36]	; 0x24
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80026ec:	a908      	add	r1, sp, #32
 80026ee:	4847      	ldr	r0, [pc, #284]	; (800280c <MX_ADC1_Init+0x218>)
 80026f0:	f002 f8e4 	bl	80048bc <LL_ADC_CommonInit>
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 80026f4:	68ab      	ldr	r3, [r5, #8]
 80026f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026fa:	60ab      	str	r3, [r5, #8]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80026fc:	4a44      	ldr	r2, [pc, #272]	; (8002810 <MX_ADC1_Init+0x21c>)
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fe:	fa96 f3a6 	rbit	r3, r6
 8002702:	fab3 f383 	clz	r3, r3
 8002706:	f44f 7100 	mov.w	r1, #512	; 0x200
 800270a:	fa21 f303 	lsr.w	r3, r1, r3
  MODIFY_REG(*preg,
 800270e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002712:	f020 001f 	bic.w	r0, r0, #31
 8002716:	f040 000a 	orr.w	r0, r0, #10
 800271a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 800271e:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8002722:	fa94 f3a4 	rbit	r3, r4
  MODIFY_REG(*preg,
 8002726:	68e8      	ldr	r0, [r5, #12]
 8002728:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 800272c:	fa93 fca3 	rbit	ip, r3
 8002730:	f020 0007 	bic.w	r0, r0, #7
 8002734:	fa93 fca3 	rbit	ip, r3
 8002738:	60e8      	str	r0, [r5, #12]
 800273a:	fa96 f0a6 	rbit	r0, r6
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800273e:	fab0 f080 	clz	r0, r0
 8002742:	fa21 f000 	lsr.w	r0, r1, r0
  MODIFY_REG(*preg,
 8002746:	f852 c020 	ldr.w	ip, [r2, r0, lsl #2]
 800274a:	f42c 7c78 	bic.w	ip, ip, #992	; 0x3e0
 800274e:	f44c 7cb0 	orr.w	ip, ip, #352	; 0x160
 8002752:	f842 c020 	str.w	ip, [r2, r0, lsl #2]
 8002756:	fa94 f0a4 	rbit	r0, r4
  MODIFY_REG(*preg,
 800275a:	68e8      	ldr	r0, [r5, #12]
 800275c:	fa93 fca3 	rbit	ip, r3
 8002760:	fabc fc8c 	clz	ip, ip
 8002764:	fa27 f70c 	lsr.w	r7, r7, ip
 8002768:	f04f 0c07 	mov.w	ip, #7
 800276c:	fa0c f707 	lsl.w	r7, ip, r7
 8002770:	ea20 0707 	bic.w	r7, r0, r7
 8002774:	fa93 f0a3 	rbit	r0, r3
 8002778:	60ef      	str	r7, [r5, #12]
 800277a:	fa96 f0a6 	rbit	r0, r6
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800277e:	fab0 f080 	clz	r0, r0
 8002782:	fa21 f000 	lsr.w	r0, r1, r0
  MODIFY_REG(*preg,
 8002786:	f852 7020 	ldr.w	r7, [r2, r0, lsl #2]
 800278a:	f427 47f8 	bic.w	r7, r7, #31744	; 0x7c00
 800278e:	f447 5740 	orr.w	r7, r7, #12288	; 0x3000
 8002792:	f842 7020 	str.w	r7, [r2, r0, lsl #2]
 8002796:	fa94 f0a4 	rbit	r0, r4
  MODIFY_REG(*preg,
 800279a:	68ef      	ldr	r7, [r5, #12]
 800279c:	fa93 f0a3 	rbit	r0, r3
 80027a0:	fab0 fe80 	clz	lr, r0
 80027a4:	f44f 00c0 	mov.w	r0, #6291456	; 0x600000
 80027a8:	fa20 f00e 	lsr.w	r0, r0, lr
 80027ac:	fa0c f000 	lsl.w	r0, ip, r0
 80027b0:	ea27 0000 	bic.w	r0, r7, r0
 80027b4:	fa93 f7a3 	rbit	r7, r3
 80027b8:	60e8      	str	r0, [r5, #12]
 80027ba:	fa96 f6a6 	rbit	r6, r6
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80027be:	fab6 f686 	clz	r6, r6
 80027c2:	fa21 f606 	lsr.w	r6, r1, r6
  MODIFY_REG(*preg,
 80027c6:	f852 1026 	ldr.w	r1, [r2, r6, lsl #2]
 80027ca:	f421 2178 	bic.w	r1, r1, #1015808	; 0xf8000
 80027ce:	f441 21d0 	orr.w	r1, r1, #425984	; 0x68000
 80027d2:	f842 1026 	str.w	r1, [r2, r6, lsl #2]
 80027d6:	fa94 f4a4 	rbit	r4, r4
  MODIFY_REG(*preg,
 80027da:	68ea      	ldr	r2, [r5, #12]
 80027dc:	fa93 f1a3 	rbit	r1, r3
 80027e0:	fab1 f081 	clz	r0, r1
 80027e4:	f44f 0110 	mov.w	r1, #9437184	; 0x900000
 80027e8:	40c1      	lsrs	r1, r0
 80027ea:	fa0c fc01 	lsl.w	ip, ip, r1
 80027ee:	ea22 020c 	bic.w	r2, r2, ip
 80027f2:	fa93 f3a3 	rbit	r3, r3
 80027f6:	60ea      	str	r2, [r5, #12]
  /** Configure Regular Channel 
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_4, LL_ADC_CHANNEL_13);
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_13, LL_ADC_SAMPLINGTIME_3CYCLES);

}
 80027f8:	b015      	add	sp, #84	; 0x54
 80027fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027fc:	40023800 	.word	0x40023800
 8002800:	40020800 	.word	0x40020800
 8002804:	40026410 	.word	0x40026410
 8002808:	40012000 	.word	0x40012000
 800280c:	40012300 	.word	0x40012300
 8002810:	4001202c 	.word	0x4001202c

08002814 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8002814:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	9301      	str	r3, [sp, #4]
 800281a:	4b14      	ldr	r3, [pc, #80]	; (800286c <MX_DMA_Init+0x58>)
 800281c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800281e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002822:	631a      	str	r2, [r3, #48]	; 0x30
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800282a:	9301      	str	r3, [sp, #4]
 800282c:	9b01      	ldr	r3, [sp, #4]
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800282e:	4b10      	ldr	r3, [pc, #64]	; (8002870 <MX_DMA_Init+0x5c>)
 8002830:	68da      	ldr	r2, [r3, #12]
 8002832:	f3c2 2202 	ubfx	r2, r2, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002836:	f1c2 0107 	rsb	r1, r2, #7
 800283a:	2904      	cmp	r1, #4
 800283c:	bf28      	it	cs
 800283e:	2104      	movcs	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002840:	1d13      	adds	r3, r2, #4
 8002842:	2b06      	cmp	r3, #6
 8002844:	bf8c      	ite	hi
 8002846:	3a03      	subhi	r2, #3
 8002848:	2200      	movls	r2, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800284a:	f04f 33ff 	mov.w	r3, #4294967295
 800284e:	408b      	lsls	r3, r1
 8002850:	43db      	mvns	r3, r3
 8002852:	f003 0305 	and.w	r3, r3, #5
 8002856:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002858:	011b      	lsls	r3, r3, #4
 800285a:	b2db      	uxtb	r3, r3
 800285c:	4a05      	ldr	r2, [pc, #20]	; (8002874 <MX_DMA_Init+0x60>)
 800285e:	f882 3338 	strb.w	r3, [r2, #824]	; 0x338
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002862:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002866:	6053      	str	r3, [r2, #4]
  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
  NVIC_EnableIRQ(DMA2_Stream0_IRQn);

}
 8002868:	b002      	add	sp, #8
 800286a:	4770      	bx	lr
 800286c:	40023800 	.word	0x40023800
 8002870:	e000ed00 	.word	0xe000ed00
 8002874:	e000e100 	.word	0xe000e100

08002878 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002878:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800287a:	2401      	movs	r4, #1
 800287c:	4620      	mov	r0, r4
 800287e:	f002 fbb3 	bl	8004fe8 <osDelay>
 8002882:	e7fb      	b.n	800287c <StartDefaultTask+0x4>

08002884 <DSPTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DSPTask */
void DSPTask(void *argument)
{
 8002884:	b500      	push	{lr}
 8002886:	b083      	sub	sp, #12
  /* USER CODE BEGIN DSPTask */
	DMA_Configuration();
 8002888:	f7fe fdf2 	bl	8001470 <DMA_Configuration>
	int16_t location[2];

  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(DMA_CompleteHandle,osWaitForever);
 800288c:	4e19      	ldr	r6, [pc, #100]	; (80028f4 <DSPTask+0x70>)

	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0) == GPIO_PIN_SET){
 800288e:	4c1a      	ldr	r4, [pc, #104]	; (80028f8 <DSPTask+0x74>)
 8002890:	2501      	movs	r5, #1
 8002892:	e009      	b.n	80028a8 <DSPTask+0x24>

	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_1,GPIO_PIN_SET);
	classification_Algorithm(&decision);

	if(decision == 1){
		location_Algorithm(location);
 8002894:	4668      	mov	r0, sp
 8002896:	f7fe fe4f 	bl	8001538 <location_Algorithm>
		osMessageQueuePut(locationHandle, location,0, 0);
 800289a:	2300      	movs	r3, #0
 800289c:	461a      	mov	r2, r3
 800289e:	4669      	mov	r1, sp
 80028a0:	4816      	ldr	r0, [pc, #88]	; (80028fc <DSPTask+0x78>)
 80028a2:	6800      	ldr	r0, [r0, #0]
 80028a4:	f002 fd10 	bl	80052c8 <osMessageQueuePut>
	osSemaphoreAcquire(DMA_CompleteHandle,osWaitForever);
 80028a8:	f04f 31ff 	mov.w	r1, #4294967295
 80028ac:	6830      	ldr	r0, [r6, #0]
 80028ae:	f002 fc29 	bl	8005104 <osSemaphoreAcquire>
	if(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0) == GPIO_PIN_SET){
 80028b2:	4629      	mov	r1, r5
 80028b4:	4620      	mov	r0, r4
 80028b6:	f001 fb45 	bl	8003f44 <HAL_GPIO_ReadPin>
 80028ba:	2801      	cmp	r0, #1
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_0,GPIO_PIN_RESET);
 80028bc:	bf07      	ittee	eq
 80028be:	2200      	moveq	r2, #0
 80028c0:	4629      	moveq	r1, r5
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_0,GPIO_PIN_SET);
 80028c2:	462a      	movne	r2, r5
 80028c4:	4611      	movne	r1, r2
 80028c6:	4620      	mov	r0, r4
 80028c8:	f001 fb42 	bl	8003f50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_1,GPIO_PIN_SET);
 80028cc:	462a      	mov	r2, r5
 80028ce:	2102      	movs	r1, #2
 80028d0:	4620      	mov	r0, r4
 80028d2:	f001 fb3d 	bl	8003f50 <HAL_GPIO_WritePin>
	classification_Algorithm(&decision);
 80028d6:	f10d 0007 	add.w	r0, sp, #7
 80028da:	f7fe fb77 	bl	8000fcc <classification_Algorithm>
	if(decision == 1){
 80028de:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d0d6      	beq.n	8002894 <DSPTask+0x10>
	}else{
		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_1,GPIO_PIN_RESET);
 80028e6:	2200      	movs	r2, #0
 80028e8:	2102      	movs	r1, #2
 80028ea:	4620      	mov	r0, r4
 80028ec:	f001 fb30 	bl	8003f50 <HAL_GPIO_WritePin>
 80028f0:	e7da      	b.n	80028a8 <DSPTask+0x24>
 80028f2:	bf00      	nop
 80028f4:	2001a3f8 	.word	0x2001a3f8
 80028f8:	40021000 	.word	0x40021000
 80028fc:	2001a398 	.word	0x2001a398

08002900 <DisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_DisplayTask */
void DisplayTask(void *argument)
{
 8002900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002904:	b087      	sub	sp, #28
	int16_t cy;
	int16_t sx;
	int16_t sy;

	// Initialize Screen
	ILI9341_Init();
 8002906:	f7ff f99f 	bl	8001c48 <ILI9341_Init>
	ILI9341_setRotation(4);
 800290a:	2004      	movs	r0, #4
 800290c:	f7ff fc0c 	bl	8002128 <ILI9341_setRotation>
	ILI9341_Fill(COLOR_CYAN);
 8002910:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8002914:	f7ff fa00 	bl	8001d18 <ILI9341_Fill>
	ILI9341_printText("A.R.C.H.E.R.", 60, 0, COLOR_RED, COLOR_RED, 3);
 8002918:	2303      	movs	r3, #3
 800291a:	9301      	str	r3, [sp, #4]
 800291c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	2200      	movs	r2, #0
 8002924:	213c      	movs	r1, #60	; 0x3c
 8002926:	4850      	ldr	r0, [pc, #320]	; (8002a68 <DisplayTask+0x168>)
 8002928:	f7ff fbb6 	bl	8002098 <ILI9341_printText>
	ILI9341_printText("Sound position", 15, 218, COLOR_ORANGE, COLOR_ORANGE, 2);
 800292c:	2502      	movs	r5, #2
 800292e:	9501      	str	r5, [sp, #4]
 8002930:	f64f 5420 	movw	r4, #64800	; 0xfd20
 8002934:	9400      	str	r4, [sp, #0]
 8002936:	4623      	mov	r3, r4
 8002938:	22da      	movs	r2, #218	; 0xda
 800293a:	210f      	movs	r1, #15
 800293c:	484b      	ldr	r0, [pc, #300]	; (8002a6c <DisplayTask+0x16c>)
 800293e:	f7ff fbab 	bl	8002098 <ILI9341_printText>
	ILI9341_fillCircle(190,221, 2, COLOR_ORANGE);
 8002942:	4623      	mov	r3, r4
 8002944:	462a      	mov	r2, r5
 8002946:	21dd      	movs	r1, #221	; 0xdd
 8002948:	20be      	movs	r0, #190	; 0xbe
 800294a:	f7ff fb19 	bl	8001f80 <ILI9341_fillCircle>
	ILI9341_fillCircle(190,231, 2, COLOR_ORANGE);
 800294e:	4623      	mov	r3, r4
 8002950:	462a      	mov	r2, r5
 8002952:	21e7      	movs	r1, #231	; 0xe7
 8002954:	20be      	movs	r0, #190	; 0xbe
 8002956:	f7ff fb13 	bl	8001f80 <ILI9341_fillCircle>
	printgrid();
 800295a:	f7ff fdf5 	bl	8002548 <printgrid>
	drawgridline();
 800295e:	f7ff fc29 	bl	80021b4 <drawgridline>
	drawmic();
 8002962:	f7ff fc4b 	bl	80021fc <drawmic>
	osMessageQueueGet(locationHandle, &location, NULL, osWaitForever);



	// Clear Screen
	ILI9341_Fill_Rect(6,26,316,210,COLOR_CYAN);
 8002966:	25d2      	movs	r5, #210	; 0xd2

	// Update Screen
	cy = location[1];	//length
	cx = location[0]; //width
	sx = 8+cx*1.3; //length
	sy = 208-cy*1.2;	//width
 8002968:	f04f 0a00 	mov.w	sl, #0
 800296c:	f8df b110 	ldr.w	fp, [pc, #272]	; 8002a80 <DisplayTask+0x180>
	osMessageQueueGet(locationHandle, &location, NULL, osWaitForever);
 8002970:	f04f 33ff 	mov.w	r3, #4294967295
 8002974:	2200      	movs	r2, #0
 8002976:	a905      	add	r1, sp, #20
 8002978:	483d      	ldr	r0, [pc, #244]	; (8002a70 <DisplayTask+0x170>)
 800297a:	6800      	ldr	r0, [r0, #0]
 800297c:	f002 fcf8 	bl	8005370 <osMessageQueueGet>
	ILI9341_Fill_Rect(6,26,316,210,COLOR_CYAN);
 8002980:	f240 74ff 	movw	r4, #2047	; 0x7ff
 8002984:	9400      	str	r4, [sp, #0]
 8002986:	462b      	mov	r3, r5
 8002988:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800298c:	211a      	movs	r1, #26
 800298e:	2006      	movs	r0, #6
 8002990:	f7ff f9ec 	bl	8001d6c <ILI9341_Fill_Rect>
	drawmic();
 8002994:	f7ff fc32 	bl	80021fc <drawmic>
	drawgridline();
 8002998:	f7ff fc0c 	bl	80021b4 <drawgridline>
	ILI9341_Fill_Rect(200,210,300,239,COLOR_CYAN);
 800299c:	9400      	str	r4, [sp, #0]
 800299e:	23ef      	movs	r3, #239	; 0xef
 80029a0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029a4:	4629      	mov	r1, r5
 80029a6:	20c8      	movs	r0, #200	; 0xc8
 80029a8:	f7ff f9e0 	bl	8001d6c <ILI9341_Fill_Rect>
	cy = location[1];	//length
 80029ac:	f9bd 9016 	ldrsh.w	r9, [sp, #22]
	cx = location[0]; //width
 80029b0:	f9bd 6014 	ldrsh.w	r6, [sp, #20]
	sx = 8+cx*1.3; //length
 80029b4:	4630      	mov	r0, r6
 80029b6:	f7fd fdbd 	bl	8000534 <__aeabi_i2d>
 80029ba:	a329      	add	r3, pc, #164	; (adr r3, 8002a60 <DisplayTask+0x160>)
 80029bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c0:	f7fd fe22 	bl	8000608 <__aeabi_dmul>
 80029c4:	2200      	movs	r2, #0
 80029c6:	4b2b      	ldr	r3, [pc, #172]	; (8002a74 <DisplayTask+0x174>)
 80029c8:	f7fd fc68 	bl	800029c <__adddf3>
 80029cc:	f7fe f8b6 	bl	8000b3c <__aeabi_d2iz>
 80029d0:	b207      	sxth	r7, r0
	sy = 208-cy*1.2;	//width
 80029d2:	4648      	mov	r0, r9
 80029d4:	f7fd fdae 	bl	8000534 <__aeabi_i2d>
 80029d8:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80029dc:	4b26      	ldr	r3, [pc, #152]	; (8002a78 <DisplayTask+0x178>)
 80029de:	f7fd fe13 	bl	8000608 <__aeabi_dmul>
 80029e2:	4602      	mov	r2, r0
 80029e4:	460b      	mov	r3, r1
 80029e6:	4650      	mov	r0, sl
 80029e8:	4659      	mov	r1, fp
 80029ea:	f7fd fc55 	bl	8000298 <__aeabi_dsub>
 80029ee:	f7fe f8a5 	bl	8000b3c <__aeabi_d2iz>
 80029f2:	fa0f f880 	sxth.w	r8, r0
	printlocation(sx,sy); //image
 80029f6:	4641      	mov	r1, r8
 80029f8:	4638      	mov	r0, r7
 80029fa:	f7ff fce5 	bl	80023c8 <printlocation>
	loc_cor(cx,cy,charloc);
 80029fe:	aa02      	add	r2, sp, #8
 8002a00:	4649      	mov	r1, r9
 8002a02:	4630      	mov	r0, r6
 8002a04:	f7ff fc34 	bl	8002270 <loc_cor>
	ILI9341_printText(charloc, 200, 218, COLOR_RED, COLOR_RED, 2); //coordinate output
 8002a08:	2302      	movs	r3, #2
 8002a0a:	9301      	str	r3, [sp, #4]
 8002a0c:	f44f 4678 	mov.w	r6, #63488	; 0xf800
 8002a10:	9600      	str	r6, [sp, #0]
 8002a12:	4633      	mov	r3, r6
 8002a14:	22da      	movs	r2, #218	; 0xda
 8002a16:	21c8      	movs	r1, #200	; 0xc8
 8002a18:	a802      	add	r0, sp, #8
 8002a1a:	f7ff fb3d 	bl	8002098 <ILI9341_printText>
	if(sx>314) sx=314;
	if(sy>208) sy=208;
	ILI9341_fillCircle(sx,sy, 1, COLOR_RED); //exact location
 8002a1e:	4633      	mov	r3, r6
 8002a20:	2201      	movs	r2, #1
 8002a22:	4641      	mov	r1, r8
 8002a24:	29d0      	cmp	r1, #208	; 0xd0
 8002a26:	bfa8      	it	ge
 8002a28:	21d0      	movge	r1, #208	; 0xd0
 8002a2a:	4638      	mov	r0, r7
 8002a2c:	f5b7 7f9d 	cmp.w	r7, #314	; 0x13a
 8002a30:	bfa8      	it	ge
 8002a32:	f44f 709d 	movge.w	r0, #314	; 0x13a
 8002a36:	f7ff faa3 	bl	8001f80 <ILI9341_fillCircle>
	ILI9341_Fill_Rect(308,210,320,239,COLOR_CYAN);
 8002a3a:	9400      	str	r4, [sp, #0]
 8002a3c:	23ef      	movs	r3, #239	; 0xef
 8002a3e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002a42:	4629      	mov	r1, r5
 8002a44:	f44f 709a 	mov.w	r0, #308	; 0x134
 8002a48:	f7ff f990 	bl	8001d6c <ILI9341_Fill_Rect>
	drawmic();
 8002a4c:	f7ff fbd6 	bl	80021fc <drawmic>

	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_9,GPIO_PIN_RESET);
 8002a50:	2200      	movs	r2, #0
 8002a52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a56:	4809      	ldr	r0, [pc, #36]	; (8002a7c <DisplayTask+0x17c>)
 8002a58:	f001 fa7a 	bl	8003f50 <HAL_GPIO_WritePin>
 8002a5c:	e788      	b.n	8002970 <DisplayTask+0x70>
 8002a5e:	bf00      	nop
 8002a60:	cccccccd 	.word	0xcccccccd
 8002a64:	3ff4cccc 	.word	0x3ff4cccc
 8002a68:	08008224 	.word	0x08008224
 8002a6c:	08008234 	.word	0x08008234
 8002a70:	2001a398 	.word	0x2001a398
 8002a74:	40200000 	.word	0x40200000
 8002a78:	3ff33333 	.word	0x3ff33333
 8002a7c:	40020400 	.word	0x40020400
 8002a80:	406a0000 	.word	0x406a0000

08002a84 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8002a84:	b570      	push	{r4, r5, r6, lr}
 8002a86:	b0a6      	sub	sp, #152	; 0x98
osKernelInitialize();
 8002a88:	f002 f9fa 	bl	8004e80 <osKernelInitialize>
  const osSemaphoreAttr_t DMA_Complete_attributes = {
 8002a8c:	2400      	movs	r4, #0
 8002a8e:	9423      	str	r4, [sp, #140]	; 0x8c
 8002a90:	9424      	str	r4, [sp, #144]	; 0x90
 8002a92:	9425      	str	r4, [sp, #148]	; 0x94
 8002a94:	aa26      	add	r2, sp, #152	; 0x98
 8002a96:	4b30      	ldr	r3, [pc, #192]	; (8002b58 <MX_FREERTOS_Init+0xd4>)
 8002a98:	f842 3d10 	str.w	r3, [r2, #-16]!
  DMA_CompleteHandle = osSemaphoreNew(1, 1, &DMA_Complete_attributes);
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	4608      	mov	r0, r1
 8002aa0:	f002 fac4 	bl	800502c <osSemaphoreNew>
 8002aa4:	4b2d      	ldr	r3, [pc, #180]	; (8002b5c <MX_FREERTOS_Init+0xd8>)
 8002aa6:	6018      	str	r0, [r3, #0]
  const osMessageQueueAttr_t location_attributes = {
 8002aa8:	941d      	str	r4, [sp, #116]	; 0x74
 8002aaa:	4b2d      	ldr	r3, [pc, #180]	; (8002b60 <MX_FREERTOS_Init+0xdc>)
 8002aac:	931c      	str	r3, [sp, #112]	; 0x70
 8002aae:	4b2d      	ldr	r3, [pc, #180]	; (8002b64 <MX_FREERTOS_Init+0xe0>)
 8002ab0:	931e      	str	r3, [sp, #120]	; 0x78
 8002ab2:	2350      	movs	r3, #80	; 0x50
 8002ab4:	931f      	str	r3, [sp, #124]	; 0x7c
 8002ab6:	4b2c      	ldr	r3, [pc, #176]	; (8002b68 <MX_FREERTOS_Init+0xe4>)
 8002ab8:	9320      	str	r3, [sp, #128]	; 0x80
 8002aba:	2104      	movs	r1, #4
 8002abc:	9121      	str	r1, [sp, #132]	; 0x84
  locationHandle = osMessageQueueNew (1, 4, &location_attributes);
 8002abe:	aa1c      	add	r2, sp, #112	; 0x70
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	f002 fba1 	bl	8005208 <osMessageQueueNew>
 8002ac6:	4b29      	ldr	r3, [pc, #164]	; (8002b6c <MX_FREERTOS_Init+0xe8>)
 8002ac8:	6018      	str	r0, [r3, #0]
  const osThreadAttr_t defaultTask_attributes = {
 8002aca:	2520      	movs	r5, #32
 8002acc:	462a      	mov	r2, r5
 8002ace:	4621      	mov	r1, r4
 8002ad0:	a814      	add	r0, sp, #80	; 0x50
 8002ad2:	f004 fcd8 	bl	8007486 <memset>
 8002ad6:	4b26      	ldr	r3, [pc, #152]	; (8002b70 <MX_FREERTOS_Init+0xec>)
 8002ad8:	9313      	str	r3, [sp, #76]	; 0x4c
 8002ada:	2380      	movs	r3, #128	; 0x80
 8002adc:	9318      	str	r3, [sp, #96]	; 0x60
 8002ade:	2318      	movs	r3, #24
 8002ae0:	9319      	str	r3, [sp, #100]	; 0x64
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002ae2:	aa13      	add	r2, sp, #76	; 0x4c
 8002ae4:	4621      	mov	r1, r4
 8002ae6:	4823      	ldr	r0, [pc, #140]	; (8002b74 <MX_FREERTOS_Init+0xf0>)
 8002ae8:	f002 fa16 	bl	8004f18 <osThreadNew>
 8002aec:	4b22      	ldr	r3, [pc, #136]	; (8002b78 <MX_FREERTOS_Init+0xf4>)
 8002aee:	6018      	str	r0, [r3, #0]
  const osThreadAttr_t DanielTask_attributes = {
 8002af0:	462a      	mov	r2, r5
 8002af2:	4621      	mov	r1, r4
 8002af4:	a80b      	add	r0, sp, #44	; 0x2c
 8002af6:	f004 fcc6 	bl	8007486 <memset>
 8002afa:	4b20      	ldr	r3, [pc, #128]	; (8002b7c <MX_FREERTOS_Init+0xf8>)
 8002afc:	930a      	str	r3, [sp, #40]	; 0x28
 8002afe:	4b20      	ldr	r3, [pc, #128]	; (8002b80 <MX_FREERTOS_Init+0xfc>)
 8002b00:	930c      	str	r3, [sp, #48]	; 0x30
 8002b02:	265c      	movs	r6, #92	; 0x5c
 8002b04:	960d      	str	r6, [sp, #52]	; 0x34
 8002b06:	4b1f      	ldr	r3, [pc, #124]	; (8002b84 <MX_FREERTOS_Init+0x100>)
 8002b08:	930e      	str	r3, [sp, #56]	; 0x38
 8002b0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8002b10:	2328      	movs	r3, #40	; 0x28
 8002b12:	9310      	str	r3, [sp, #64]	; 0x40
  DanielTaskHandle = osThreadNew(DSPTask, NULL, &DanielTask_attributes);
 8002b14:	eb0d 0203 	add.w	r2, sp, r3
 8002b18:	4621      	mov	r1, r4
 8002b1a:	481b      	ldr	r0, [pc, #108]	; (8002b88 <MX_FREERTOS_Init+0x104>)
 8002b1c:	f002 f9fc 	bl	8004f18 <osThreadNew>
 8002b20:	4b1a      	ldr	r3, [pc, #104]	; (8002b8c <MX_FREERTOS_Init+0x108>)
 8002b22:	6018      	str	r0, [r3, #0]
  const osThreadAttr_t ZhiTask_attributes = {
 8002b24:	462a      	mov	r2, r5
 8002b26:	4621      	mov	r1, r4
 8002b28:	a802      	add	r0, sp, #8
 8002b2a:	f004 fcac 	bl	8007486 <memset>
 8002b2e:	4b18      	ldr	r3, [pc, #96]	; (8002b90 <MX_FREERTOS_Init+0x10c>)
 8002b30:	9301      	str	r3, [sp, #4]
 8002b32:	4b18      	ldr	r3, [pc, #96]	; (8002b94 <MX_FREERTOS_Init+0x110>)
 8002b34:	9303      	str	r3, [sp, #12]
 8002b36:	9604      	str	r6, [sp, #16]
 8002b38:	4b17      	ldr	r3, [pc, #92]	; (8002b98 <MX_FREERTOS_Init+0x114>)
 8002b3a:	9305      	str	r3, [sp, #20]
 8002b3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b40:	9306      	str	r3, [sp, #24]
 8002b42:	2308      	movs	r3, #8
 8002b44:	9307      	str	r3, [sp, #28]
  ZhiTaskHandle = osThreadNew(DisplayTask, NULL, &ZhiTask_attributes);
 8002b46:	aa01      	add	r2, sp, #4
 8002b48:	4621      	mov	r1, r4
 8002b4a:	4814      	ldr	r0, [pc, #80]	; (8002b9c <MX_FREERTOS_Init+0x118>)
 8002b4c:	f002 f9e4 	bl	8004f18 <osThreadNew>
 8002b50:	4b13      	ldr	r3, [pc, #76]	; (8002ba0 <MX_FREERTOS_Init+0x11c>)
 8002b52:	6018      	str	r0, [r3, #0]
}
 8002b54:	b026      	add	sp, #152	; 0x98
 8002b56:	bd70      	pop	{r4, r5, r6, pc}
 8002b58:	08008244 	.word	0x08008244
 8002b5c:	2001a3f8 	.word	0x2001a3f8
 8002b60:	08008254 	.word	0x08008254
 8002b64:	200190e0 	.word	0x200190e0
 8002b68:	20019134 	.word	0x20019134
 8002b6c:	2001a398 	.word	0x2001a398
 8002b70:	08008260 	.word	0x08008260
 8002b74:	08002879 	.word	0x08002879
 8002b78:	200190dc 	.word	0x200190dc
 8002b7c:	0800826c 	.word	0x0800826c
 8002b80:	20019138 	.word	0x20019138
 8002b84:	20019194 	.word	0x20019194
 8002b88:	08002885 	.word	0x08002885
 8002b8c:	20019130 	.word	0x20019130
 8002b90:	08008278 	.word	0x08008278
 8002b94:	2001a39c 	.word	0x2001a39c
 8002b98:	2001a198 	.word	0x2001a198
 8002b9c:	08002901 	.word	0x08002901
 8002ba0:	2001a194 	.word	0x2001a194

08002ba4 <DMA_Semaphore_Release>:
  /* USER CODE END DisplayTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void DMA_Semaphore_Release() {
 8002ba4:	b508      	push	{r3, lr}

	osSemaphoreRelease(DMA_CompleteHandle);
 8002ba6:	4b02      	ldr	r3, [pc, #8]	; (8002bb0 <DMA_Semaphore_Release+0xc>)
 8002ba8:	6818      	ldr	r0, [r3, #0]
 8002baa:	f002 faef 	bl	800518c <osSemaphoreRelease>

}
 8002bae:	bd08      	pop	{r3, pc}
 8002bb0:	2001a3f8 	.word	0x2001a3f8

08002bb4 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8002bb4:	b500      	push	{lr}
 8002bb6:	b089      	sub	sp, #36	; 0x24
  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8002bb8:	2200      	movs	r2, #0
 8002bba:	9202      	str	r2, [sp, #8]
 8002bbc:	9204      	str	r2, [sp, #16]
 8002bbe:	9205      	str	r2, [sp, #20]
 8002bc0:	9206      	str	r2, [sp, #24]
 8002bc2:	9207      	str	r2, [sp, #28]

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8002bc4:	4811      	ldr	r0, [pc, #68]	; (8002c0c <MX_FSMC_Init+0x58>)
 8002bc6:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8002bca:	6003      	str	r3, [r0, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002bcc:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002bd0:	6043      	str	r3, [r0, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8002bd2:	6082      	str	r2, [r0, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002bd4:	60c2      	str	r2, [r0, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8002bd6:	6102      	str	r2, [r0, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_8;
 8002bd8:	6142      	str	r2, [r0, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002bda:	6182      	str	r2, [r0, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002bdc:	61c2      	str	r2, [r0, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8002bde:	6202      	str	r2, [r0, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002be0:	6242      	str	r2, [r0, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8002be2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002be6:	6283      	str	r3, [r0, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8002be8:	62c2      	str	r2, [r0, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8002bea:	6302      	str	r2, [r0, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002bec:	6342      	str	r2, [r0, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002bee:	6382      	str	r2, [r0, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8002bf0:	6442      	str	r2, [r0, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 6;
 8002bf2:	2306      	movs	r3, #6
 8002bf4:	9301      	str	r3, [sp, #4]
  Timing.AddressHoldTime = 0;
  Timing.DataSetupTime = 6;
 8002bf6:	9303      	str	r3, [sp, #12]
  Timing.CLKDivision = 0;
  Timing.DataLatency = 0;
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8002bf8:	a901      	add	r1, sp, #4
 8002bfa:	f001 fcc7 	bl	800458c <HAL_SRAM_Init>
 8002bfe:	b910      	cbnz	r0, 8002c06 <MX_FSMC_Init+0x52>
  {
    Error_Handler( );
  }

}
 8002c00:	b009      	add	sp, #36	; 0x24
 8002c02:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler( );
 8002c06:	f000 f903 	bl	8002e10 <Error_Handler>
}
 8002c0a:	e7f9      	b.n	8002c00 <MX_FSMC_Init+0x4c>
 8002c0c:	2001a3fc 	.word	0x2001a3fc

08002c10 <HAL_SRAM_MspInit>:
  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8002c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c12:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c14:	2300      	movs	r3, #0
 8002c16:	9301      	str	r3, [sp, #4]
 8002c18:	9302      	str	r3, [sp, #8]
 8002c1a:	9303      	str	r3, [sp, #12]
 8002c1c:	9304      	str	r3, [sp, #16]
 8002c1e:	9305      	str	r3, [sp, #20]
  if (FSMC_Initialized) {
 8002c20:	4b16      	ldr	r3, [pc, #88]	; (8002c7c <HAL_SRAM_MspInit+0x6c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	b10b      	cbz	r3, 8002c2a <HAL_SRAM_MspInit+0x1a>
  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002c26:	b007      	add	sp, #28
 8002c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FSMC_Initialized = 1;
 8002c2a:	4b14      	ldr	r3, [pc, #80]	; (8002c7c <HAL_SRAM_MspInit+0x6c>)
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002c30:	2600      	movs	r6, #0
 8002c32:	9600      	str	r6, [sp, #0]
 8002c34:	4b12      	ldr	r3, [pc, #72]	; (8002c80 <HAL_SRAM_MspInit+0x70>)
 8002c36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c38:	f042 0201 	orr.w	r2, r2, #1
 8002c3c:	639a      	str	r2, [r3, #56]	; 0x38
 8002c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002c48:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8002c4c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4e:	2702      	movs	r7, #2
 8002c50:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c52:	2503      	movs	r5, #3
 8002c54:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002c56:	240c      	movs	r4, #12
 8002c58:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c5a:	a901      	add	r1, sp, #4
 8002c5c:	4809      	ldr	r0, [pc, #36]	; (8002c84 <HAL_SRAM_MspInit+0x74>)
 8002c5e:	f001 f88b 	bl	8003d78 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0 
 8002c62:	f24e 03b3 	movw	r3, #57523	; 0xe0b3
 8002c66:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c68:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6a:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c6c:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002c6e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c70:	a901      	add	r1, sp, #4
 8002c72:	4805      	ldr	r0, [pc, #20]	; (8002c88 <HAL_SRAM_MspInit+0x78>)
 8002c74:	f001 f880 	bl	8003d78 <HAL_GPIO_Init>
 8002c78:	e7d5      	b.n	8002c26 <HAL_SRAM_MspInit+0x16>
 8002c7a:	bf00      	nop
 8002c7c:	20015cc4 	.word	0x20015cc4
 8002c80:	40023800 	.word	0x40023800
 8002c84:	40021000 	.word	0x40021000
 8002c88:	40020c00 	.word	0x40020c00

08002c8c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c8e:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c90:	2400      	movs	r4, #0
 8002c92:	9405      	str	r4, [sp, #20]
 8002c94:	9406      	str	r4, [sp, #24]
 8002c96:	9407      	str	r4, [sp, #28]
 8002c98:	9408      	str	r4, [sp, #32]
 8002c9a:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c9c:	9401      	str	r4, [sp, #4]
 8002c9e:	4b24      	ldr	r3, [pc, #144]	; (8002d30 <MX_GPIO_Init+0xa4>)
 8002ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ca2:	f042 0204 	orr.w	r2, r2, #4
 8002ca6:	631a      	str	r2, [r3, #48]	; 0x30
 8002ca8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002caa:	f002 0204 	and.w	r2, r2, #4
 8002cae:	9201      	str	r2, [sp, #4]
 8002cb0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb2:	9402      	str	r4, [sp, #8]
 8002cb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cb6:	f042 0201 	orr.w	r2, r2, #1
 8002cba:	631a      	str	r2, [r3, #48]	; 0x30
 8002cbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cbe:	f002 0201 	and.w	r2, r2, #1
 8002cc2:	9202      	str	r2, [sp, #8]
 8002cc4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cc6:	9403      	str	r4, [sp, #12]
 8002cc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cca:	f042 0210 	orr.w	r2, r2, #16
 8002cce:	631a      	str	r2, [r3, #48]	; 0x30
 8002cd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cd2:	f002 0210 	and.w	r2, r2, #16
 8002cd6:	9203      	str	r2, [sp, #12]
 8002cd8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cda:	9404      	str	r4, [sp, #16]
 8002cdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cde:	f042 0208 	orr.w	r2, r2, #8
 8002ce2:	631a      	str	r2, [r3, #48]	; 0x30
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	9304      	str	r3, [sp, #16]
 8002cec:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RST_GPIO_Port, RST_Pin, GPIO_PIN_SET);
 8002cee:	4f11      	ldr	r7, [pc, #68]	; (8002d34 <MX_GPIO_Init+0xa8>)
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	2104      	movs	r1, #4
 8002cf4:	4638      	mov	r0, r7
 8002cf6:	f001 f92b 	bl	8003f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8002cfa:	4d0f      	ldr	r5, [pc, #60]	; (8002d38 <MX_GPIO_Init+0xac>)
 8002cfc:	4622      	mov	r2, r4
 8002cfe:	2103      	movs	r1, #3
 8002d00:	4628      	mov	r0, r5
 8002d02:	f001 f925 	bl	8003f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RST_Pin;
 8002d06:	2304      	movs	r3, #4
 8002d08:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d0a:	2601      	movs	r6, #1
 8002d0c:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d10:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8002d12:	a905      	add	r1, sp, #20
 8002d14:	4638      	mov	r0, r7
 8002d16:	f001 f82f 	bl	8003d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d1e:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d20:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d22:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d24:	a905      	add	r1, sp, #20
 8002d26:	4628      	mov	r0, r5
 8002d28:	f001 f826 	bl	8003d78 <HAL_GPIO_Init>

}
 8002d2c:	b00b      	add	sp, #44	; 0x2c
 8002d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d30:	40023800 	.word	0x40023800
 8002d34:	40020c00 	.word	0x40020c00
 8002d38:	40021000 	.word	0x40021000

08002d3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d3c:	b530      	push	{r4, r5, lr}
 8002d3e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d40:	2230      	movs	r2, #48	; 0x30
 8002d42:	2100      	movs	r1, #0
 8002d44:	a808      	add	r0, sp, #32
 8002d46:	f004 fb9e 	bl	8007486 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d4a:	2400      	movs	r4, #0
 8002d4c:	9403      	str	r4, [sp, #12]
 8002d4e:	9404      	str	r4, [sp, #16]
 8002d50:	9405      	str	r4, [sp, #20]
 8002d52:	9406      	str	r4, [sp, #24]
 8002d54:	9407      	str	r4, [sp, #28]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d56:	9401      	str	r4, [sp, #4]
 8002d58:	4b1b      	ldr	r3, [pc, #108]	; (8002dc8 <SystemClock_Config+0x8c>)
 8002d5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d5c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d60:	641a      	str	r2, [r3, #64]	; 0x40
 8002d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d68:	9301      	str	r3, [sp, #4]
 8002d6a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d6c:	9402      	str	r4, [sp, #8]
 8002d6e:	4b17      	ldr	r3, [pc, #92]	; (8002dcc <SystemClock_Config+0x90>)
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d7e:	9302      	str	r3, [sp, #8]
 8002d80:	9b02      	ldr	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d82:	2502      	movs	r5, #2
 8002d84:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d86:	2301      	movs	r3, #1
 8002d88:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d8a:	2310      	movs	r3, #16
 8002d8c:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d8e:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d90:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002d92:	2308      	movs	r3, #8
 8002d94:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 8002d96:	2378      	movs	r3, #120	; 0x78
 8002d98:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d9a:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002d9c:	2304      	movs	r3, #4
 8002d9e:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002da0:	a808      	add	r0, sp, #32
 8002da2:	f001 f8db 	bl	8003f5c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002da6:	230f      	movs	r3, #15
 8002da8:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002daa:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dac:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002dae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002db2:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002db4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002db8:	9307      	str	r3, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002dba:	2103      	movs	r1, #3
 8002dbc:	a803      	add	r0, sp, #12
 8002dbe:	f001 fb07 	bl	80043d0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8002dc2:	b015      	add	sp, #84	; 0x54
 8002dc4:	bd30      	pop	{r4, r5, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	40007000 	.word	0x40007000

08002dd0 <main>:
{
 8002dd0:	b508      	push	{r3, lr}
  HAL_Init();
 8002dd2:	f000 ff3f 	bl	8003c54 <HAL_Init>
  SystemClock_Config();
 8002dd6:	f7ff ffb1 	bl	8002d3c <SystemClock_Config>
  MX_GPIO_Init();
 8002dda:	f7ff ff57 	bl	8002c8c <MX_GPIO_Init>
  MX_DMA_Init();
 8002dde:	f7ff fd19 	bl	8002814 <MX_DMA_Init>
  MX_ADC1_Init();
 8002de2:	f7ff fc07 	bl	80025f4 <MX_ADC1_Init>
  MX_TIM2_Init();
 8002de6:	f000 f8b3 	bl	8002f50 <MX_TIM2_Init>
  MX_FSMC_Init();
 8002dea:	f7ff fee3 	bl	8002bb4 <MX_FSMC_Init>
  MX_FREERTOS_Init(); 
 8002dee:	f7ff fe49 	bl	8002a84 <MX_FREERTOS_Init>
  osKernelStart();
 8002df2:	f002 f869 	bl	8004ec8 <osKernelStart>
 8002df6:	e7fe      	b.n	8002df6 <main+0x26>

08002df8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002df8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002dfa:	6802      	ldr	r2, [r0, #0]
 8002dfc:	4b03      	ldr	r3, [pc, #12]	; (8002e0c <HAL_TIM_PeriodElapsedCallback+0x14>)
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d000      	beq.n	8002e04 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002e02:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8002e04:	f000 ff40 	bl	8003c88 <HAL_IncTick>
}
 8002e08:	e7fb      	b.n	8002e02 <HAL_TIM_PeriodElapsedCallback+0xa>
 8002e0a:	bf00      	nop
 8002e0c:	40010000 	.word	0x40010000

08002e10 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002e10:	4770      	bx	lr
	...

08002e14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e14:	b500      	push	{lr}
 8002e16:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e18:	2200      	movs	r2, #0
 8002e1a:	9200      	str	r2, [sp, #0]
 8002e1c:	4b0d      	ldr	r3, [pc, #52]	; (8002e54 <HAL_MspInit+0x40>)
 8002e1e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002e20:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002e24:	6459      	str	r1, [r3, #68]	; 0x44
 8002e26:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002e28:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8002e2c:	9100      	str	r1, [sp, #0]
 8002e2e:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e30:	9201      	str	r2, [sp, #4]
 8002e32:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002e34:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002e38:	6419      	str	r1, [r3, #64]	; 0x40
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e40:	9301      	str	r3, [sp, #4]
 8002e42:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002e44:	210f      	movs	r1, #15
 8002e46:	f06f 0001 	mvn.w	r0, #1
 8002e4a:	f000 ff55 	bl	8003cf8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e4e:	b003      	add	sp, #12
 8002e50:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e54:	40023800 	.word	0x40023800

08002e58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e58:	b510      	push	{r4, lr}
 8002e5a:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	4601      	mov	r1, r0
 8002e60:	2019      	movs	r0, #25
 8002e62:	f000 ff49 	bl	8003cf8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8002e66:	2019      	movs	r0, #25
 8002e68:	f000 ff78 	bl	8003d5c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002e6c:	2400      	movs	r4, #0
 8002e6e:	9401      	str	r4, [sp, #4]
 8002e70:	4b14      	ldr	r3, [pc, #80]	; (8002ec4 <HAL_InitTick+0x6c>)
 8002e72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e74:	f042 0201 	orr.w	r2, r2, #1
 8002e78:	645a      	str	r2, [r3, #68]	; 0x44
 8002e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	9301      	str	r3, [sp, #4]
 8002e82:	9b01      	ldr	r3, [sp, #4]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002e84:	a902      	add	r1, sp, #8
 8002e86:	a803      	add	r0, sp, #12
 8002e88:	f001 fb62 	bl	8004550 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002e8c:	f001 fb50 	bl	8004530 <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002e90:	4b0d      	ldr	r3, [pc, #52]	; (8002ec8 <HAL_InitTick+0x70>)
 8002e92:	4a0e      	ldr	r2, [pc, #56]	; (8002ecc <HAL_InitTick+0x74>)
 8002e94:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8002e96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e9a:	60da      	str	r2, [r3, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002e9c:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002e9e:	4a0c      	ldr	r2, [pc, #48]	; (8002ed0 <HAL_InitTick+0x78>)
 8002ea0:	fba2 2000 	umull	r2, r0, r2, r0
 8002ea4:	0c80      	lsrs	r0, r0, #18
 8002ea6:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
 8002ea8:	6058      	str	r0, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8002eaa:	611c      	str	r4, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eac:	609c      	str	r4, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f001 fce8 	bl	8004884 <HAL_TIM_Base_Init>
 8002eb4:	b110      	cbz	r0, 8002ebc <HAL_InitTick+0x64>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002eb6:	2001      	movs	r0, #1
}
 8002eb8:	b008      	add	sp, #32
 8002eba:	bd10      	pop	{r4, pc}
    return HAL_TIM_Base_Start_IT(&htim1);
 8002ebc:	4802      	ldr	r0, [pc, #8]	; (8002ec8 <HAL_InitTick+0x70>)
 8002ebe:	f001 fb8f 	bl	80045e0 <HAL_TIM_Base_Start_IT>
 8002ec2:	e7f9      	b.n	8002eb8 <HAL_InitTick+0x60>
 8002ec4:	40023800 	.word	0x40023800
 8002ec8:	2001a44c 	.word	0x2001a44c
 8002ecc:	40010000 	.word	0x40010000
 8002ed0:	431bde83 	.word	0x431bde83

08002ed4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002ed4:	4770      	bx	lr

08002ed6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ed6:	e7fe      	b.n	8002ed6 <HardFault_Handler>

08002ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ed8:	e7fe      	b.n	8002ed8 <MemManage_Handler>

08002eda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eda:	e7fe      	b.n	8002eda <BusFault_Handler>

08002edc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002edc:	e7fe      	b.n	8002edc <UsageFault_Handler>

08002ede <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ede:	4770      	bx	lr

08002ee0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002ee0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ee2:	4802      	ldr	r0, [pc, #8]	; (8002eec <TIM1_UP_TIM10_IRQHandler+0xc>)
 8002ee4:	f001 fb91 	bl	800460a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002ee8:	bd08      	pop	{r3, pc}
 8002eea:	bf00      	nop
 8002eec:	2001a44c 	.word	0x2001a44c

08002ef0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002ef0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */
	DMA_Semaphore_Release();
 8002ef2:	f7ff fe57 	bl	8002ba4 <DMA_Semaphore_Release>
  WRITE_REG(DMAx->LIFCR , DMA_LIFCR_CTCIF0);
 8002ef6:	4b02      	ldr	r3, [pc, #8]	; (8002f00 <DMA2_Stream0_IRQHandler+0x10>)
 8002ef8:	2220      	movs	r2, #32
 8002efa:	609a      	str	r2, [r3, #8]
	LL_DMA_ClearFlag_TC0(DMA2);
  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002efc:	bd08      	pop	{r3, pc}
 8002efe:	bf00      	nop
 8002f00:	40026400 	.word	0x40026400

08002f04 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f04:	490f      	ldr	r1, [pc, #60]	; (8002f44 <SystemInit+0x40>)
 8002f06:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002f0a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002f12:	4b0d      	ldr	r3, [pc, #52]	; (8002f48 <SystemInit+0x44>)
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	f042 0201 	orr.w	r2, r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002f1c:	2000      	movs	r0, #0
 8002f1e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002f26:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002f2a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002f2c:	4a07      	ldr	r2, [pc, #28]	; (8002f4c <SystemInit+0x48>)
 8002f2e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f36:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002f38:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f3e:	608b      	str	r3, [r1, #8]
#endif
}
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	e000ed00 	.word	0xe000ed00
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	24003010 	.word	0x24003010

08002f50 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002f50:	b570      	push	{r4, r5, r6, lr}
 8002f52:	b096      	sub	sp, #88	; 0x58
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002f54:	2400      	movs	r4, #0
 8002f56:	f8cd 4046 	str.w	r4, [sp, #70]	; 0x46
 8002f5a:	f8cd 404a 	str.w	r4, [sp, #74]	; 0x4a
 8002f5e:	f8cd 404e 	str.w	r4, [sp, #78]	; 0x4e
 8002f62:	f8cd 4052 	str.w	r4, [sp, #82]	; 0x52
 8002f66:	f8ad 4056 	strh.w	r4, [sp, #86]	; 0x56
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	4621      	mov	r1, r4
 8002f6e:	a809      	add	r0, sp, #36	; 0x24
 8002f70:	f004 fa89 	bl	8007486 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f74:	9403      	str	r4, [sp, #12]
 8002f76:	9404      	str	r4, [sp, #16]
 8002f78:	9405      	str	r4, [sp, #20]
 8002f7a:	9406      	str	r4, [sp, #24]
 8002f7c:	9407      	str	r4, [sp, #28]
 8002f7e:	9408      	str	r4, [sp, #32]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002f80:	4e25      	ldr	r6, [pc, #148]	; (8003018 <MX_TIM2_Init+0xc8>)
 8002f82:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8002f84:	f043 0301 	orr.w	r3, r3, #1
 8002f88:	6433      	str	r3, [r6, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002f8a:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8002f92:	9b02      	ldr	r3, [sp, #8]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);

  TIM_InitStruct.Prescaler = 4;
 8002f94:	2304      	movs	r3, #4
 8002f96:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
  TIM_InitStruct.Autoreload = 289;
 8002f9a:	f240 1321 	movw	r3, #289	; 0x121
 8002f9e:	9313      	str	r3, [sp, #76]	; 0x4c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8002fa0:	a911      	add	r1, sp, #68	; 0x44
 8002fa2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002fa6:	f001 fe15 	bl	8004bd4 <LL_TIM_Init>
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002faa:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
 8002fae:	682b      	ldr	r3, [r5, #0]
 8002fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fb4:	602b      	str	r3, [r5, #0]
  LL_TIM_EnableARRPreload(TIM2);
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_TOGGLE;
 8002fb6:	2330      	movs	r3, #48	; 0x30
 8002fb8:	9309      	str	r3, [sp, #36]	; 0x24
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002fba:	940a      	str	r4, [sp, #40]	; 0x28
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002fbc:	940b      	str	r4, [sp, #44]	; 0x2c
  TIM_OC_InitStruct.CompareValue = 0;
 8002fbe:	940c      	str	r4, [sp, #48]	; 0x30
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002fc0:	940d      	str	r4, [sp, #52]	; 0x34
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8002fc2:	aa09      	add	r2, sp, #36	; 0x24
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	4628      	mov	r0, r5
 8002fc8:	f001 fe7a 	bl	8004cc0 <LL_TIM_OC_Init>
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8002fcc:	69ab      	ldr	r3, [r5, #24]
 8002fce:	f023 0304 	bic.w	r3, r3, #4
 8002fd2:	61ab      	str	r3, [r5, #24]
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002fd4:	686b      	ldr	r3, [r5, #4]
 8002fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fda:	f043 0320 	orr.w	r3, r3, #32
 8002fde:	606b      	str	r3, [r5, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002fe0:	68ab      	ldr	r3, [r5, #8]
 8002fe2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fe6:	60ab      	str	r3, [r5, #8]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002fe8:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002fea:	f043 0301 	orr.w	r3, r3, #1
 8002fee:	6333      	str	r3, [r6, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002ff0:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002ff8:	9b01      	ldr	r3, [sp, #4]
  LL_TIM_DisableMasterSlaveMode(TIM2);
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1 
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002ffe:	2202      	movs	r2, #2
 8003000:	9204      	str	r2, [sp, #16]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003002:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003004:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003006:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8003008:	9308      	str	r3, [sp, #32]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800300a:	a903      	add	r1, sp, #12
 800300c:	4803      	ldr	r0, [pc, #12]	; (800301c <MX_TIM2_Init+0xcc>)
 800300e:	f001 fd37 	bl	8004a80 <LL_GPIO_Init>

}
 8003012:	b016      	add	sp, #88	; 0x58
 8003014:	bd70      	pop	{r4, r5, r6, pc}
 8003016:	bf00      	nop
 8003018:	40023800 	.word	0x40023800
 800301c:	40020000 	.word	0x40020000

08003020 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003020:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003058 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003024:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003026:	e003      	b.n	8003030 <LoopCopyDataInit>

08003028 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003028:	4b0c      	ldr	r3, [pc, #48]	; (800305c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800302a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800302c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800302e:	3104      	adds	r1, #4

08003030 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003030:	480b      	ldr	r0, [pc, #44]	; (8003060 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003032:	4b0c      	ldr	r3, [pc, #48]	; (8003064 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003034:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003036:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003038:	d3f6      	bcc.n	8003028 <CopyDataInit>
  ldr  r2, =_sbss
 800303a:	4a0b      	ldr	r2, [pc, #44]	; (8003068 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800303c:	e002      	b.n	8003044 <LoopFillZerobss>

0800303e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800303e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003040:	f842 3b04 	str.w	r3, [r2], #4

08003044 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003044:	4b09      	ldr	r3, [pc, #36]	; (800306c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003046:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003048:	d3f9      	bcc.n	800303e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800304a:	f7ff ff5b 	bl	8002f04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800304e:	f004 f9eb 	bl	8007428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003052:	f7ff febd 	bl	8002dd0 <main>
  bx  lr    
 8003056:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003058:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800305c:	0801a118 	.word	0x0801a118
  ldr  r0, =_sdata
 8003060:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003064:	20000c98 	.word	0x20000c98
  ldr  r2, =_sbss
 8003068:	20000c98 	.word	0x20000c98
  ldr  r3, = _ebss
 800306c:	2001a4d0 	.word	0x2001a4d0

08003070 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003070:	e7fe      	b.n	8003070 <ADC_IRQHandler>

08003072 <arm_abs_f32>:

void arm_abs_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t blockSize)
{
 8003072:	b470      	push	{r4, r5, r6}
  /*loop Unrolling */
  blkCnt = blockSize >> 2U;

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8003074:	0896      	lsrs	r6, r2, #2
 8003076:	d023      	beq.n	80030c0 <arm_abs_f32+0x4e>
 8003078:	f100 0410 	add.w	r4, r0, #16
 800307c:	f101 0310 	add.w	r3, r1, #16
  blkCnt = blockSize >> 2U;
 8003080:	4635      	mov	r5, r6
  {
    /* C = |A| */
    /* Calculate absolute and then store the results in the destination buffer. */
    /* read sample from source */
    in1 = *pSrc;
 8003082:	ed14 6a04 	vldr	s12, [r4, #-16]
    in2 = *(pSrc + 1);
 8003086:	ed54 6a03 	vldr	s13, [r4, #-12]
    in3 = *(pSrc + 2);
 800308a:	ed14 7a02 	vldr	s14, [r4, #-8]

    /* find absolute value */
    in1 = fabsf(in1);

    /* read sample from source */
    in4 = *(pSrc + 3);
 800308e:	ed54 7a01 	vldr	s15, [r4, #-4]
    in1 = fabsf(in1);
 8003092:	eeb0 6ac6 	vabs.f32	s12, s12

    /* find absolute value */
    in2 = fabsf(in2);

    /* read sample from source */
    *pDst = in1;
 8003096:	ed03 6a04 	vstr	s12, [r3, #-16]
    in2 = fabsf(in2);
 800309a:	eef0 6ae6 	vabs.f32	s13, s13

    /* find absolute value */
    in4 = fabsf(in4);

    /* store result to destination */
    *(pDst + 1) = in2;
 800309e:	ed43 6a03 	vstr	s13, [r3, #-12]
    in3 = fabsf(in3);
 80030a2:	eeb0 7ac7 	vabs.f32	s14, s14

    /* store result to destination */
    *(pDst + 2) = in3;
 80030a6:	ed03 7a02 	vstr	s14, [r3, #-8]
    in4 = fabsf(in4);
 80030aa:	eef0 7ae7 	vabs.f32	s15, s15

    /* store result to destination */
    *(pDst + 3) = in4;
 80030ae:	ed43 7a01 	vstr	s15, [r3, #-4]
 80030b2:	3410      	adds	r4, #16
 80030b4:	3310      	adds	r3, #16
  while (blkCnt > 0U)
 80030b6:	3d01      	subs	r5, #1
 80030b8:	d1e3      	bne.n	8003082 <arm_abs_f32+0x10>
 80030ba:	0136      	lsls	r6, r6, #4
 80030bc:	4430      	add	r0, r6
 80030be:	4431      	add	r1, r6
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /*   #if defined (ARM_MATH_DSP)   */

  while (blkCnt > 0U)
 80030c0:	f012 0203 	ands.w	r2, r2, #3
 80030c4:	d007      	beq.n	80030d6 <arm_abs_f32+0x64>
  {
    /* C = |A| */
    /* Calculate absolute and then store the results in the destination buffer. */
    *pDst++ = fabsf(*pSrc++);
 80030c6:	ecf0 7a01 	vldmia	r0!, {s15}
 80030ca:	eef0 7ae7 	vabs.f32	s15, s15
 80030ce:	ece1 7a01 	vstmia	r1!, {s15}
  while (blkCnt > 0U)
 80030d2:	3a01      	subs	r2, #1
 80030d4:	d1f7      	bne.n	80030c6 <arm_abs_f32+0x54>

    /* Decrement the loop counter */
    blkCnt--;
  }
}
 80030d6:	bc70      	pop	{r4, r5, r6}
 80030d8:	4770      	bx	lr

080030da <arm_abs_q15>:

void arm_abs_q15(
  q15_t * pSrc,
  q15_t * pDst,
  uint32_t blockSize)
{
 80030da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  blkCnt = blockSize >> 2U;

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  simd = __SIMD32_CONST(pDst);
  while (blkCnt > 0U)
 80030de:	ea5f 0c92 	movs.w	ip, r2, lsr #2
 80030e2:	d042      	beq.n	800316a <arm_abs_q15+0x90>
 80030e4:	f100 0408 	add.w	r4, r0, #8
 80030e8:	f101 0508 	add.w	r5, r1, #8
  blkCnt = blockSize >> 2U;
 80030ec:	4666      	mov	r6, ip

__STATIC_FORCEINLINE uint32_t __QSUB16(uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80030ee:	2700      	movs	r7, #0
 80030f0:	e018      	b.n	8003124 <arm_abs_q15+0x4a>
 80030f2:	fad7 f313 	qsub16	r3, r7, r3


    /* Store the Absolute result in the destination buffer by packing the two values, in a single cycle */
#ifndef  ARM_MATH_BIG_ENDIAN
    *simd++ =
      __PKHBT(((in1 > 0) ? in1 : (q15_t)__QSUB16(0, in1)),
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	e01c      	b.n	8003134 <arm_abs_q15+0x5a>
 80030fa:	fad7 fe1e 	qsub16	lr, r7, lr
 80030fe:	ea4f 490e 	mov.w	r9, lr, lsl #16
 8003102:	e01c      	b.n	800313e <arm_abs_q15+0x64>
 8003104:	fad7 f313 	qsub16	r3, r7, r3


#ifndef  ARM_MATH_BIG_ENDIAN

    *simd++ =
      __PKHBT(((in1 > 0) ? in1 : (q15_t)__QSUB16(0, in1)),
 8003108:	b29b      	uxth	r3, r3
 800310a:	e024      	b.n	8003156 <arm_abs_q15+0x7c>
 800310c:	fad7 f818 	qsub16	r8, r7, r8
 8003110:	ea4f 4808 	mov.w	r8, r8, lsl #16
 8003114:	ea43 0308 	orr.w	r3, r3, r8
    *simd++ =
 8003118:	f84e 3c04 	str.w	r3, [lr, #-4]
 800311c:	3408      	adds	r4, #8
 800311e:	3508      	adds	r5, #8
  while (blkCnt > 0U)
 8003120:	3e01      	subs	r6, #1
 8003122:	d01e      	beq.n	8003162 <arm_abs_q15+0x88>
 8003124:	46a0      	mov	r8, r4
    in1 = *pSrc++;
 8003126:	f934 3c08 	ldrsh.w	r3, [r4, #-8]
    in2 = *pSrc++;
 800312a:	f934 ec06 	ldrsh.w	lr, [r4, #-6]
      __PKHBT(((in1 > 0) ? in1 : (q15_t)__QSUB16(0, in1)),
 800312e:	2b00      	cmp	r3, #0
 8003130:	dddf      	ble.n	80030f2 <arm_abs_q15+0x18>
 8003132:	b29b      	uxth	r3, r3
 8003134:	f1be 0f00 	cmp.w	lr, #0
 8003138:	dddf      	ble.n	80030fa <arm_abs_q15+0x20>
 800313a:	ea4f 490e 	mov.w	r9, lr, lsl #16
 800313e:	46ae      	mov	lr, r5
 8003140:	ea43 0309 	orr.w	r3, r3, r9
    *simd++ =
 8003144:	f845 3c08 	str.w	r3, [r5, #-8]
    in1 = *pSrc++;
 8003148:	f938 3c04 	ldrsh.w	r3, [r8, #-4]
    in2 = *pSrc++;
 800314c:	f938 8c02 	ldrsh.w	r8, [r8, #-2]
      __PKHBT(((in1 > 0) ? in1 : (q15_t)__QSUB16(0, in1)),
 8003150:	2b00      	cmp	r3, #0
 8003152:	ddd7      	ble.n	8003104 <arm_abs_q15+0x2a>
 8003154:	b29b      	uxth	r3, r3
 8003156:	f1b8 0f00 	cmp.w	r8, #0
 800315a:	ddd7      	ble.n	800310c <arm_abs_q15+0x32>
 800315c:	ea4f 4808 	mov.w	r8, r8, lsl #16
 8003160:	e7d8      	b.n	8003114 <arm_abs_q15+0x3a>
 8003162:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8003166:	4460      	add	r0, ip
 8003168:	4461      	add	r1, ip

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;

  while (blkCnt > 0U)
 800316a:	f012 0203 	ands.w	r2, r2, #3
 800316e:	d00d      	beq.n	800318c <arm_abs_q15+0xb2>
 8003170:	2400      	movs	r4, #0
 8003172:	e003      	b.n	800317c <arm_abs_q15+0xa2>
    /* C = |A| */
    /* Read the input */
    in1 = *pSrc++;

    /* Calculate absolute value of input and then store the result in the destination buffer. */
    *pDst++ = (in1 > 0) ? in1 : (q15_t)__QSUB16(0, in1);
 8003174:	f821 3b02 	strh.w	r3, [r1], #2
  while (blkCnt > 0U)
 8003178:	3a01      	subs	r2, #1
 800317a:	d007      	beq.n	800318c <arm_abs_q15+0xb2>
    in1 = *pSrc++;
 800317c:	f930 3b02 	ldrsh.w	r3, [r0], #2
    *pDst++ = (in1 > 0) ? in1 : (q15_t)__QSUB16(0, in1);
 8003180:	2b00      	cmp	r3, #0
 8003182:	dcf7      	bgt.n	8003174 <arm_abs_q15+0x9a>
 8003184:	fad4 f313 	qsub16	r3, r4, r3
 8003188:	b21b      	sxth	r3, r3
 800318a:	e7f3      	b.n	8003174 <arm_abs_q15+0x9a>
    blkCnt--;
  }

#endif /* #if defined (ARM_MATH_DSP) */

}
 800318c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003190 <arm_max_q15>:
void arm_max_q15(
  q15_t * pSrc,
  uint32_t blockSize,
  q15_t * pResult,
  uint32_t * pIndex)
{
 8003190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* Initialise the count value. */
  count = 0U;
  /* Initialise the index value to zero. */
  outIndex = 0U;
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 8003194:	f100 0802 	add.w	r8, r0, #2
 8003198:	f9b0 4000 	ldrsh.w	r4, [r0]

  /* Loop unrolling */
  blkCnt = (blockSize - 1U) >> 2U;
 800319c:	1e4d      	subs	r5, r1, #1

  while (blkCnt > 0U)
 800319e:	ea5f 0a95 	movs.w	sl, r5, lsr #2
 80031a2:	d037      	beq.n	8003214 <arm_max_q15+0x84>
 80031a4:	300a      	adds	r0, #10
  blkCnt = (blockSize - 1U) >> 2U;
 80031a6:	4657      	mov	r7, sl
  while (blkCnt > 0U)
 80031a8:	2604      	movs	r6, #4
  outIndex = 0U;
 80031aa:	f04f 0e00 	mov.w	lr, #0
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 80031ae:	f930 bc08 	ldrsh.w	fp, [r0, #-8]
    maxVal2 = *pSrc++;
 80031b2:	f930 9c06 	ldrsh.w	r9, [r0, #-6]

    /* compare for the maximum value */
    if (out < maxVal1)
 80031b6:	45a3      	cmp	fp, r4
    {
      /* Update the maximum value and its index */
      out = maxVal1;
      outIndex = count + 1U;
 80031b8:	bfc4      	itt	gt
 80031ba:	f1a6 0e03 	subgt.w	lr, r6, #3
      out = maxVal1;
 80031be:	465c      	movgt	r4, fp
    }

    /* compare for the maximum value */
    if (out < maxVal2)
 80031c0:	454c      	cmp	r4, r9
    {
      /* Update the maximum value and its index */
      out = maxVal2;
      outIndex = count + 2U;
 80031c2:	bfbc      	itt	lt
 80031c4:	f1a6 0e02 	sublt.w	lr, r6, #2
      out = maxVal2;
 80031c8:	464c      	movlt	r4, r9
    }

    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 80031ca:	f930 9c04 	ldrsh.w	r9, [r0, #-4]
    maxVal2 = *pSrc++;
 80031ce:	f930 cc02 	ldrsh.w	ip, [r0, #-2]

    /* compare for the maximum value */
    if (out < maxVal1)
 80031d2:	454c      	cmp	r4, r9
    {
      /* Update the maximum value and its index */
      out = maxVal1;
      outIndex = count + 3U;
 80031d4:	bfbc      	itt	lt
 80031d6:	f106 3eff 	addlt.w	lr, r6, #4294967295
      out = maxVal1;
 80031da:	464c      	movlt	r4, r9
    }

    /* compare for the maximum value */
    if (out < maxVal2)
 80031dc:	4564      	cmp	r4, ip
    {
      /* Update the maximum value and its index */
      out = maxVal2;
      outIndex = count + 4U;
 80031de:	bfbc      	itt	lt
 80031e0:	46b6      	movlt	lr, r6
      out = maxVal2;
 80031e2:	4664      	movlt	r4, ip
 80031e4:	3008      	adds	r0, #8
 80031e6:	3604      	adds	r6, #4
  while (blkCnt > 0U)
 80031e8:	3f01      	subs	r7, #1
 80031ea:	d1e0      	bne.n	80031ae <arm_max_q15+0x1e>
 80031ec:	eb08 08ca 	add.w	r8, r8, sl, lsl #3

  blkCnt = (blockSize - 1U);

#endif /* #if defined (ARM_MATH_DSP) */

  while (blkCnt > 0U)
 80031f0:	f015 0003 	ands.w	r0, r5, #3
 80031f4:	d009      	beq.n	800320a <arm_max_q15+0x7a>
 80031f6:	1a08      	subs	r0, r1, r0
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 80031f8:	f938 5b02 	ldrsh.w	r5, [r8], #2

    /* compare for the maximum value */
    if (out < maxVal1)
 80031fc:	42a5      	cmp	r5, r4
    {
      /* Update the maximum value and it's index */
      out = maxVal1;
      outIndex = blockSize - blkCnt;
 80031fe:	bfc4      	itt	gt
 8003200:	4686      	movgt	lr, r0
      out = maxVal1;
 8003202:	462c      	movgt	r4, r5
 8003204:	3001      	adds	r0, #1
  while (blkCnt > 0U)
 8003206:	4281      	cmp	r1, r0
 8003208:	d1f6      	bne.n	80031f8 <arm_max_q15+0x68>
    /* Decrement the loop counter */
    blkCnt--;
  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 800320a:	8014      	strh	r4, [r2, #0]
  *pIndex = outIndex;
 800320c:	f8c3 e000 	str.w	lr, [r3]
}
 8003210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  outIndex = 0U;
 8003214:	46d6      	mov	lr, sl
 8003216:	e7eb      	b.n	80031f0 <arm_max_q15+0x60>

08003218 <arm_min_f32>:
void arm_min_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 8003218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* Initialise the count value. */
  count = 0U;
  /* Initialise the index value to zero. */
  outIndex = 0U;
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 800321c:	f100 0e04 	add.w	lr, r0, #4
 8003220:	edd0 7a00 	vldr	s15, [r0]

  /* Loop unrolling */
  blkCnt = (blockSize - 1U) >> 2U;
 8003224:	1e4c      	subs	r4, r1, #1

  while (blkCnt > 0U)
 8003226:	ea5f 0894 	movs.w	r8, r4, lsr #2
 800322a:	d04c      	beq.n	80032c6 <arm_min_f32+0xae>
 800322c:	3014      	adds	r0, #20
  blkCnt = (blockSize - 1U) >> 2U;
 800322e:	4646      	mov	r6, r8
  while (blkCnt > 0U)
 8003230:	2504      	movs	r5, #4
  outIndex = 0U;
 8003232:	f04f 0c00 	mov.w	ip, #0
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal1 = *pSrc++;
 8003236:	ed50 6a04 	vldr	s13, [r0, #-16]
    minVal2 = *pSrc++;
 800323a:	ed10 7a03 	vldr	s14, [r0, #-12]

    /* compare for the minimum value */
    if (out > minVal1)
 800323e:	eef4 6ae7 	vcmpe.f32	s13, s15
 8003242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    {
      /* Update the minimum value and its index */
      out = minVal1;
      outIndex = count + 1U;
 8003246:	bf44      	itt	mi
 8003248:	f1a5 0c03 	submi.w	ip, r5, #3
      out = minVal1;
 800324c:	eef0 7a66 	vmovmi.f32	s15, s13
    }

    /* compare for the minimum value */
    if (out > minVal2)
 8003250:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    {
      /* Update the minimum value and its index */
      out = minVal2;
      outIndex = count + 2U;
 8003258:	bfc4      	itt	gt
 800325a:	f1a5 0c02 	subgt.w	ip, r5, #2
      out = minVal2;
 800325e:	eef0 7a47 	vmovgt.f32	s15, s14
    }

    /* Initialize minVal to the next consecutive values one by one */
    minVal1 = *pSrc++;
 8003262:	ed50 6a02 	vldr	s13, [r0, #-8]
    minVal2 = *pSrc++;
 8003266:	ed10 7a01 	vldr	s14, [r0, #-4]

    /* compare for the minimum value */
    if (out > minVal1)
 800326a:	eef4 7ae6 	vcmpe.f32	s15, s13
 800326e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    {
      /* Update the minimum value and its index */
      out = minVal1;
      outIndex = count + 3U;
 8003272:	bfc4      	itt	gt
 8003274:	f105 3cff 	addgt.w	ip, r5, #4294967295
      out = minVal1;
 8003278:	eef0 7a66 	vmovgt.f32	s15, s13
    }

    /* compare for the minimum value */
    if (out > minVal2)
 800327c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    {
      /* Update the minimum value and its index */
      out = minVal2;
      outIndex = count + 4U;
 8003284:	bfc4      	itt	gt
 8003286:	46ac      	movgt	ip, r5
      out = minVal2;
 8003288:	eef0 7a47 	vmovgt.f32	s15, s14
 800328c:	3010      	adds	r0, #16
 800328e:	3504      	adds	r5, #4
  while (blkCnt > 0U)
 8003290:	3e01      	subs	r6, #1
 8003292:	d1d0      	bne.n	8003236 <arm_min_f32+0x1e>
 8003294:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4

  blkCnt = (blockSize - 1U);

#endif /* #if defined (ARM_MATH_DSP) */

  while (blkCnt > 0U)
 8003298:	f014 0003 	ands.w	r0, r4, #3
 800329c:	d00d      	beq.n	80032ba <arm_min_f32+0xa2>
 800329e:	1a08      	subs	r0, r1, r0
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal1 = *pSrc++;
 80032a0:	ecbe 7a01 	vldmia	lr!, {s14}

    /* compare for the minimum value */
    if (out > minVal1)
 80032a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    {
      /* Update the minimum value and it's index */
      out = minVal1;
      outIndex = blockSize - blkCnt;
 80032ac:	bf44      	itt	mi
 80032ae:	4684      	movmi	ip, r0
      out = minVal1;
 80032b0:	eef0 7a47 	vmovmi.f32	s15, s14
 80032b4:	3001      	adds	r0, #1
  while (blkCnt > 0U)
 80032b6:	4281      	cmp	r1, r0
 80032b8:	d1f2      	bne.n	80032a0 <arm_min_f32+0x88>
    /* Decrement the loop counter */
    blkCnt--;
  }

  /* Store the minimum value and it's index into destination pointers */
  *pResult = out;
 80032ba:	edc2 7a00 	vstr	s15, [r2]
  *pIndex = outIndex;
 80032be:	f8c3 c000 	str.w	ip, [r3]
}
 80032c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  outIndex = 0U;
 80032c6:	46c4      	mov	ip, r8
 80032c8:	e7e6      	b.n	8003298 <arm_min_f32+0x80>

080032ca <arm_power_q15>:

void arm_power_q15(
  q15_t * pSrc,
  uint32_t blockSize,
  q63_t * pResult)
{
 80032ca:	b4f0      	push	{r4, r5, r6, r7}
  /* loop Unrolling */
  blkCnt = blockSize >> 2U;

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 80032cc:	ea5f 0c91 	movs.w	ip, r1, lsr #2
 80032d0:	d01e      	beq.n	8003310 <arm_power_q15+0x46>
 80032d2:	f100 0608 	add.w	r6, r0, #8
  blkCnt = blockSize >> 2U;
 80032d6:	4667      	mov	r7, ip
  q63_t sum = 0;                                 /* Temporary result storage */
 80032d8:	2300      	movs	r3, #0
 80032da:	461c      	mov	r4, r3
  {
    /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
    /* Compute Power and then store the result in a temporary variable, sum. */
    in32 = *__SIMD32(pSrc)++;
    sum = __SMLALD(in32, in32, sum);
 80032dc:	f856 5c08 	ldr.w	r5, [r6, #-8]
    uint64_t w64;
  } llr;
  llr.w64 = acc;

#ifndef __ARMEB__   /* Little endian */
  __ASM volatile ("smlald %0, %1, %2, %3" : "=r" (llr.w32[0]), "=r" (llr.w32[1]): "r" (op1), "r" (op2) , "0" (llr.w32[0]), "1" (llr.w32[1]) );
 80032e0:	fbc5 34c5 	smlald	r3, r4, r5, r5
    in32 = *__SIMD32(pSrc)++;
    sum = __SMLALD(in32, in32, sum);
 80032e4:	f856 5c04 	ldr.w	r5, [r6, #-4]
 80032e8:	fbc5 34c5 	smlald	r3, r4, r5, r5
 80032ec:	3608      	adds	r6, #8
  while (blkCnt > 0U)
 80032ee:	3f01      	subs	r7, #1
 80032f0:	d1f4      	bne.n	80032dc <arm_power_q15+0x12>
 80032f2:	eb00 00cc 	add.w	r0, r0, ip, lsl #3

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;

  while (blkCnt > 0U)
 80032f6:	f011 0103 	ands.w	r1, r1, #3
 80032fa:	d005      	beq.n	8003308 <arm_power_q15+0x3e>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
    /* Compute Power and then store the result in a temporary variable, sum. */
    in16 = *pSrc++;
    sum = __SMLALD(in16, in16, sum);
 80032fc:	f930 5b02 	ldrsh.w	r5, [r0], #2
 8003300:	fbc5 34c5 	smlald	r3, r4, r5, r5
  while (blkCnt > 0U)
 8003304:	3901      	subs	r1, #1
 8003306:	d1f9      	bne.n	80032fc <arm_power_q15+0x32>
  }

#endif /* #if defined (ARM_MATH_DSP) */

  /* Store the results in 34.30 format  */
  *pResult = sum;
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	6054      	str	r4, [r2, #4]
}
 800330c:	bcf0      	pop	{r4, r5, r6, r7}
 800330e:	4770      	bx	lr
  q63_t sum = 0;                                 /* Temporary result storage */
 8003310:	2300      	movs	r3, #0
 8003312:	461c      	mov	r4, r3
 8003314:	e7ef      	b.n	80032f6 <arm_power_q15+0x2c>

08003316 <arm_cfft_radix4by2_q15>:

void arm_cfft_radix4by2_q15(
    q15_t * pSrc,
    uint32_t fftLen,
    const q15_t * pCoef)
{
 8003316:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800331a:	4605      	mov	r5, r0
 800331c:	4616      	mov	r6, r2
#if defined (ARM_MATH_DSP)
    q31_t T, S, R;
    q31_t coeff, out1, out2;
    const q15_t *pC = pCoef;
    q15_t *pSi = pSrc;
    q15_t *pSl = pSrc + fftLen;
 800331e:	eb00 0741 	add.w	r7, r0, r1, lsl #1

    n2 = fftLen >> 1;

#if defined (ARM_MATH_DSP)

    for (i = n2; i > 0; i--)
 8003322:	084c      	lsrs	r4, r1, #1
 8003324:	d045      	beq.n	80033b2 <arm_cfft_radix4by2_q15+0x9c>
 8003326:	f1a0 0c04 	sub.w	ip, r0, #4
    q15_t *pSl = pSrc + fftLen;
 800332a:	4638      	mov	r0, r7
    const q15_t *pC = pCoef;
 800332c:	4690      	mov	r8, r2
    for (i = n2; i > 0; i--)
 800332e:	4621      	mov	r1, r4
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003330:	f04f 0e00 	mov.w	lr, #0
    {
        coeff = _SIMD32_OFFSET(pC);
 8003334:	f858 3b04 	ldr.w	r3, [r8], #4
 8003338:	f85c 2f04 	ldr.w	r2, [ip, #4]!
 800333c:	fa92 f92e 	shadd16	r9, r2, lr
 8003340:	6802      	ldr	r2, [r0, #0]
 8003342:	fa92 f22e 	shadd16	r2, r2, lr
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003346:	fad9 fa12 	qsub16	sl, r9, r2
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800334a:	fa99 f222 	shadd16	r2, r9, r2
        S = _SIMD32_OFFSET(pSl);
        S = __SHADD16(S, 0); // this is just a SIMD arithmetic shift right by 1

        R = __QSUB16(T, S);

        _SIMD32_OFFSET(pSi) = __SHADD16(T, S);
 800334e:	f8cc 2000 	str.w	r2, [ip]
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003352:	fb23 f20a 	smuad	r2, r3, sl

__STATIC_FORCEINLINE uint32_t __SMUSDX (uint32_t op1, uint32_t op2)
{
  uint32_t result;

  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003356:	fb43 f31a 	smusdx	r3, r3, sl
        out2 = __SMUAD(coeff, R);

    #endif //     #ifndef ARM_MATH_BIG_ENDIAN

        _SIMD32_OFFSET(pSl) =
        (q31_t) ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 800335a:	0c1b      	lsrs	r3, r3, #16
 800335c:	041b      	lsls	r3, r3, #16
 800335e:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
        _SIMD32_OFFSET(pSl) =
 8003362:	f840 3b04 	str.w	r3, [r0], #4
    for (i = n2; i > 0; i--)
 8003366:	3901      	subs	r1, #1
 8003368:	d1e4      	bne.n	8003334 <arm_cfft_radix4by2_q15+0x1e>
    }

#endif //    #if defined (ARM_MATH_DSP)

    // first col
    arm_radix4_butterfly_q15( pSrc, n2, (q15_t*)pCoef, 2U);
 800336a:	2302      	movs	r3, #2
 800336c:	4632      	mov	r2, r6
 800336e:	4621      	mov	r1, r4
 8003370:	4628      	mov	r0, r5
 8003372:	f000 f8de 	bl	8003532 <arm_radix4_butterfly_q15>
    // second col
    arm_radix4_butterfly_q15( pSrc + fftLen, n2, (q15_t*)pCoef, 2U);
 8003376:	2302      	movs	r3, #2
 8003378:	4632      	mov	r2, r6
 800337a:	4621      	mov	r1, r4
 800337c:	4638      	mov	r0, r7
 800337e:	f000 f8d8 	bl	8003532 <arm_radix4_butterfly_q15>
 8003382:	462b      	mov	r3, r5
 8003384:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
        p0 = pSrc[4*i+0];
        p1 = pSrc[4*i+1];
        p2 = pSrc[4*i+2];
        p3 = pSrc[4*i+3];

        p0 <<= 1;
 8003388:	f9b3 7000 	ldrsh.w	r7, [r3]
 800338c:	007f      	lsls	r7, r7, #1
        p1 <<= 1;
 800338e:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8003392:	0076      	lsls	r6, r6, #1
        p2 <<= 1;
 8003394:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8003398:	0040      	lsls	r0, r0, #1
        p3 <<= 1;
 800339a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800339e:	0052      	lsls	r2, r2, #1
        p0 <<= 1;
 80033a0:	801f      	strh	r7, [r3, #0]
        p1 <<= 1;
 80033a2:	805e      	strh	r6, [r3, #2]
        p2 <<= 1;
 80033a4:	8098      	strh	r0, [r3, #4]
        p3 <<= 1;
 80033a6:	80da      	strh	r2, [r3, #6]
 80033a8:	3308      	adds	r3, #8
    for (i = 0; i < fftLen >> 1; i++)
 80033aa:	42a3      	cmp	r3, r4
 80033ac:	d1ec      	bne.n	8003388 <arm_cfft_radix4by2_q15+0x72>
        pSrc[4*i+0] = p0;
        pSrc[4*i+1] = p1;
        pSrc[4*i+2] = p2;
        pSrc[4*i+3] = p3;
    }
}
 80033ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    arm_radix4_butterfly_q15( pSrc, n2, (q15_t*)pCoef, 2U);
 80033b2:	2302      	movs	r3, #2
 80033b4:	2100      	movs	r1, #0
 80033b6:	f000 f8bc 	bl	8003532 <arm_radix4_butterfly_q15>
    arm_radix4_butterfly_q15( pSrc + fftLen, n2, (q15_t*)pCoef, 2U);
 80033ba:	2302      	movs	r3, #2
 80033bc:	4632      	mov	r2, r6
 80033be:	2100      	movs	r1, #0
 80033c0:	4638      	mov	r0, r7
 80033c2:	f000 f8b6 	bl	8003532 <arm_radix4_butterfly_q15>
 80033c6:	e7f2      	b.n	80033ae <arm_cfft_radix4by2_q15+0x98>

080033c8 <arm_cfft_radix4by2_inverse_q15>:

void arm_cfft_radix4by2_inverse_q15(
    q15_t * pSrc,
    uint32_t fftLen,
    const q15_t * pCoef)
{
 80033c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033cc:	4605      	mov	r5, r0
 80033ce:	4616      	mov	r6, r2
#if defined (ARM_MATH_DSP)
    q31_t T, S, R;
    q31_t coeff, out1, out2;
    const q15_t *pC = pCoef;
    q15_t *pSi = pSrc;
    q15_t *pSl = pSrc + fftLen;
 80033d0:	eb00 0741 	add.w	r7, r0, r1, lsl #1

    n2 = fftLen >> 1;

#if defined (ARM_MATH_DSP)

    for (i = n2; i > 0; i--)
 80033d4:	084c      	lsrs	r4, r1, #1
 80033d6:	d045      	beq.n	8003464 <arm_cfft_radix4by2_inverse_q15+0x9c>
 80033d8:	f1a0 0c04 	sub.w	ip, r0, #4
    q15_t *pSl = pSrc + fftLen;
 80033dc:	4638      	mov	r0, r7
    const q15_t *pC = pCoef;
 80033de:	4690      	mov	r8, r2
    for (i = n2; i > 0; i--)
 80033e0:	4621      	mov	r1, r4
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80033e2:	f04f 0e00 	mov.w	lr, #0
    {
        coeff = _SIMD32_OFFSET(pC);
 80033e6:	f858 3b04 	ldr.w	r3, [r8], #4
 80033ea:	f85c 2f04 	ldr.w	r2, [ip, #4]!
 80033ee:	fa92 f92e 	shadd16	r9, r2, lr
 80033f2:	6802      	ldr	r2, [r0, #0]
 80033f4:	fa92 f22e 	shadd16	r2, r2, lr
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80033f8:	fad9 fa12 	qsub16	sl, r9, r2
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80033fc:	fa99 f222 	shadd16	r2, r9, r2
        S = _SIMD32_OFFSET(pSl);
        S = __SHADD16(S, 0); // this is just a SIMD arithmetic shift right by 1

        R = __QSUB16(T, S);

        _SIMD32_OFFSET(pSi) = __SHADD16(T, S);
 8003400:	f8cc 2000 	str.w	r2, [ip]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003404:	fb43 f20a 	smusd	r2, r3, sl
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003408:	fb23 f31a 	smuadx	r3, r3, sl
        out2 = __SMUSD(__QSUB(0, coeff), R);

    #endif //     #ifndef ARM_MATH_BIG_ENDIAN

        _SIMD32_OFFSET(pSl) =
        (q31_t) ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 800340c:	0c1b      	lsrs	r3, r3, #16
 800340e:	041b      	lsls	r3, r3, #16
 8003410:	ea43 4312 	orr.w	r3, r3, r2, lsr #16
        _SIMD32_OFFSET(pSl) =
 8003414:	f840 3b04 	str.w	r3, [r0], #4
    for (i = n2; i > 0; i--)
 8003418:	3901      	subs	r1, #1
 800341a:	d1e4      	bne.n	80033e6 <arm_cfft_radix4by2_inverse_q15+0x1e>
    }

#endif //    #if defined (ARM_MATH_DSP)

    // first col
    arm_radix4_butterfly_inverse_q15( pSrc, n2, (q15_t*)pCoef, 2U);
 800341c:	2302      	movs	r3, #2
 800341e:	4632      	mov	r2, r6
 8003420:	4621      	mov	r1, r4
 8003422:	4628      	mov	r0, r5
 8003424:	f000 f9b2 	bl	800378c <arm_radix4_butterfly_inverse_q15>
    // second col
    arm_radix4_butterfly_inverse_q15( pSrc + fftLen, n2, (q15_t*)pCoef, 2U);
 8003428:	2302      	movs	r3, #2
 800342a:	4632      	mov	r2, r6
 800342c:	4621      	mov	r1, r4
 800342e:	4638      	mov	r0, r7
 8003430:	f000 f9ac 	bl	800378c <arm_radix4_butterfly_inverse_q15>
 8003434:	462b      	mov	r3, r5
 8003436:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
        p0 = pSrc[4*i+0];
        p1 = pSrc[4*i+1];
        p2 = pSrc[4*i+2];
        p3 = pSrc[4*i+3];

        p0 <<= 1;
 800343a:	f9b3 7000 	ldrsh.w	r7, [r3]
 800343e:	007f      	lsls	r7, r7, #1
        p1 <<= 1;
 8003440:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8003444:	0076      	lsls	r6, r6, #1
        p2 <<= 1;
 8003446:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 800344a:	0040      	lsls	r0, r0, #1
        p3 <<= 1;
 800344c:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8003450:	0052      	lsls	r2, r2, #1
        p0 <<= 1;
 8003452:	801f      	strh	r7, [r3, #0]
        p1 <<= 1;
 8003454:	805e      	strh	r6, [r3, #2]
        p2 <<= 1;
 8003456:	8098      	strh	r0, [r3, #4]
        p3 <<= 1;
 8003458:	80da      	strh	r2, [r3, #6]
 800345a:	3308      	adds	r3, #8
    for (i = 0; i < fftLen >> 1; i++)
 800345c:	42a3      	cmp	r3, r4
 800345e:	d1ec      	bne.n	800343a <arm_cfft_radix4by2_inverse_q15+0x72>
        pSrc[4*i+0] = p0;
        pSrc[4*i+1] = p1;
        pSrc[4*i+2] = p2;
        pSrc[4*i+3] = p3;
    }
}
 8003460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    arm_radix4_butterfly_inverse_q15( pSrc, n2, (q15_t*)pCoef, 2U);
 8003464:	2302      	movs	r3, #2
 8003466:	2100      	movs	r1, #0
 8003468:	f000 f990 	bl	800378c <arm_radix4_butterfly_inverse_q15>
    arm_radix4_butterfly_inverse_q15( pSrc + fftLen, n2, (q15_t*)pCoef, 2U);
 800346c:	2302      	movs	r3, #2
 800346e:	4632      	mov	r2, r6
 8003470:	2100      	movs	r1, #0
 8003472:	4638      	mov	r0, r7
 8003474:	f000 f98a 	bl	800378c <arm_radix4_butterfly_inverse_q15>
 8003478:	e7f2      	b.n	8003460 <arm_cfft_radix4by2_inverse_q15+0x98>

0800347a <arm_cfft_q15>:
{
 800347a:	b570      	push	{r4, r5, r6, lr}
 800347c:	4604      	mov	r4, r0
 800347e:	460d      	mov	r5, r1
 8003480:	461e      	mov	r6, r3
    uint32_t L = S->fftLen;
 8003482:	8801      	ldrh	r1, [r0, #0]
    if (ifftFlag == 1U)
 8003484:	2a01      	cmp	r2, #1
 8003486:	d00f      	beq.n	80034a8 <arm_cfft_q15+0x2e>
        switch (L)
 8003488:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800348c:	d035      	beq.n	80034fa <arm_cfft_q15+0x80>
 800348e:	d83b      	bhi.n	8003508 <arm_cfft_q15+0x8e>
 8003490:	2920      	cmp	r1, #32
 8003492:	d004      	beq.n	800349e <arm_cfft_q15+0x24>
 8003494:	d92f      	bls.n	80034f6 <arm_cfft_q15+0x7c>
 8003496:	2940      	cmp	r1, #64	; 0x40
 8003498:	d02f      	beq.n	80034fa <arm_cfft_q15+0x80>
 800349a:	2980      	cmp	r1, #128	; 0x80
 800349c:	d132      	bne.n	8003504 <arm_cfft_q15+0x8a>
            arm_cfft_radix4by2_q15  ( p1, L, S->pTwiddle );
 800349e:	6862      	ldr	r2, [r4, #4]
 80034a0:	4628      	mov	r0, r5
 80034a2:	f7ff ff38 	bl	8003316 <arm_cfft_radix4by2_q15>
            break;
 80034a6:	e02d      	b.n	8003504 <arm_cfft_q15+0x8a>
        switch (L)
 80034a8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80034ac:	d00e      	beq.n	80034cc <arm_cfft_q15+0x52>
 80034ae:	d813      	bhi.n	80034d8 <arm_cfft_q15+0x5e>
 80034b0:	2920      	cmp	r1, #32
 80034b2:	d004      	beq.n	80034be <arm_cfft_q15+0x44>
 80034b4:	d908      	bls.n	80034c8 <arm_cfft_q15+0x4e>
 80034b6:	2940      	cmp	r1, #64	; 0x40
 80034b8:	d008      	beq.n	80034cc <arm_cfft_q15+0x52>
 80034ba:	2980      	cmp	r1, #128	; 0x80
 80034bc:	d122      	bne.n	8003504 <arm_cfft_q15+0x8a>
            arm_cfft_radix4by2_inverse_q15  ( p1, L, S->pTwiddle );
 80034be:	6862      	ldr	r2, [r4, #4]
 80034c0:	4628      	mov	r0, r5
 80034c2:	f7ff ff81 	bl	80033c8 <arm_cfft_radix4by2_inverse_q15>
            break;
 80034c6:	e01d      	b.n	8003504 <arm_cfft_q15+0x8a>
        switch (L)
 80034c8:	2910      	cmp	r1, #16
 80034ca:	d11b      	bne.n	8003504 <arm_cfft_q15+0x8a>
            arm_radix4_butterfly_inverse_q15  ( p1, L, (q15_t*)S->pTwiddle, 1 );
 80034cc:	2301      	movs	r3, #1
 80034ce:	6862      	ldr	r2, [r4, #4]
 80034d0:	4628      	mov	r0, r5
 80034d2:	f000 f95b 	bl	800378c <arm_radix4_butterfly_inverse_q15>
            break;
 80034d6:	e015      	b.n	8003504 <arm_cfft_q15+0x8a>
        switch (L)
 80034d8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80034dc:	d0f6      	beq.n	80034cc <arm_cfft_q15+0x52>
 80034de:	d906      	bls.n	80034ee <arm_cfft_q15+0x74>
 80034e0:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 80034e4:	d0eb      	beq.n	80034be <arm_cfft_q15+0x44>
 80034e6:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80034ea:	d10b      	bne.n	8003504 <arm_cfft_q15+0x8a>
 80034ec:	e7ee      	b.n	80034cc <arm_cfft_q15+0x52>
 80034ee:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80034f2:	d0e4      	beq.n	80034be <arm_cfft_q15+0x44>
 80034f4:	e006      	b.n	8003504 <arm_cfft_q15+0x8a>
        switch (L)
 80034f6:	2910      	cmp	r1, #16
 80034f8:	d104      	bne.n	8003504 <arm_cfft_q15+0x8a>
            arm_radix4_butterfly_q15  ( p1, L, (q15_t*)S->pTwiddle, 1 );
 80034fa:	2301      	movs	r3, #1
 80034fc:	6862      	ldr	r2, [r4, #4]
 80034fe:	4628      	mov	r0, r5
 8003500:	f000 f817 	bl	8003532 <arm_radix4_butterfly_q15>
    if ( bitReverseFlag )
 8003504:	b97e      	cbnz	r6, 8003526 <arm_cfft_q15+0xac>
}
 8003506:	bd70      	pop	{r4, r5, r6, pc}
        switch (L)
 8003508:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800350c:	d0f5      	beq.n	80034fa <arm_cfft_q15+0x80>
 800350e:	d906      	bls.n	800351e <arm_cfft_q15+0xa4>
 8003510:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8003514:	d0c3      	beq.n	800349e <arm_cfft_q15+0x24>
 8003516:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800351a:	d1f3      	bne.n	8003504 <arm_cfft_q15+0x8a>
 800351c:	e7ed      	b.n	80034fa <arm_cfft_q15+0x80>
 800351e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8003522:	d0bc      	beq.n	800349e <arm_cfft_q15+0x24>
 8003524:	e7ee      	b.n	8003504 <arm_cfft_q15+0x8a>
        arm_bitreversal_16((uint16_t*)p1,S->bitRevLength,S->pBitRevTable);
 8003526:	68a2      	ldr	r2, [r4, #8]
 8003528:	89a1      	ldrh	r1, [r4, #12]
 800352a:	4628      	mov	r0, r5
 800352c:	f7fc fe85 	bl	800023a <arm_bitreversal_16>
}
 8003530:	e7e9      	b.n	8003506 <arm_cfft_q15+0x8c>

08003532 <arm_radix4_butterfly_q15>:
void arm_radix4_butterfly_q15(
  q15_t * pSrc16,
  uint32_t fftLen,
  q15_t * pCoef16,
  uint32_t twidCoefModifier)
{
 8003532:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003536:	b08f      	sub	sp, #60	; 0x3c
 8003538:	4605      	mov	r5, r0
 800353a:	900b      	str	r0, [sp, #44]	; 0x2c
 800353c:	9102      	str	r1, [sp, #8]
 800353e:	4691      	mov	r9, r2
 8003540:	9209      	str	r2, [sp, #36]	; 0x24
  /*  Initializations for the first stage */
  n2 = fftLen;
  n1 = n2;

  /* n2 = fftLen/4 */
  n2 >>= 2U;
 8003542:	0889      	lsrs	r1, r1, #2
 8003544:	910d      	str	r1, [sp, #52]	; 0x34

  /* Index for input read and output write */
  j = n2;

  pSi0 = pSrc16;
  pSi1 = pSi0 + 2 * n2;
 8003546:	008a      	lsls	r2, r1, #2
 8003548:	1884      	adds	r4, r0, r2
  pSi2 = pSi1 + 2 * n2;
 800354a:	18a0      	adds	r0, r4, r2
 800354c:	f1a5 0c04 	sub.w	ip, r5, #4
 8003550:	1f07      	subs	r7, r0, #4
 8003552:	3a04      	subs	r2, #4
 8003554:	4410      	add	r0, r2
 8003556:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 800355a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800355e:	464e      	mov	r6, r9
  j = n2;
 8003560:	460a      	mov	r2, r1
  ic = 0U;
 8003562:	2500      	movs	r5, #0
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003564:	4629      	mov	r1, r5
 8003566:	4690      	mov	r8, r2
 8003568:	f8cd b004 	str.w	fp, [sp, #4]
 800356c:	f85c 2f04 	ldr.w	r2, [ip, #4]!
 8003570:	fa92 fe21 	shadd16	lr, r2, r1
 8003574:	fa9e fe21 	shadd16	lr, lr, r1
 8003578:	f857 2f04 	ldr.w	r2, [r7, #4]!
 800357c:	fa92 f221 	shadd16	r2, r2, r1
 8003580:	fa92 f221 	shadd16	r2, r2, r1
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003584:	fa9e fa12 	qadd16	sl, lr, r2
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003588:	fade fe12 	qsub16	lr, lr, r2
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800358c:	6822      	ldr	r2, [r4, #0]
 800358e:	fa92 f221 	shadd16	r2, r2, r1
 8003592:	fa92 fb21 	shadd16	fp, r2, r1
 8003596:	6842      	ldr	r2, [r0, #4]
 8003598:	fa92 f221 	shadd16	r2, r2, r1
 800359c:	fa92 f221 	shadd16	r2, r2, r1
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80035a0:	fa9b f212 	qadd16	r2, fp, r2
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80035a4:	fa9a fb22 	shadd16	fp, sl, r2
    T = __QADD16(T, U);

    /*  writing the butterfly processed i0 sample */
    /* xa' = xa + xb + xc + xd */
    /* ya' = ya + yb + yc + yd */
    _SIMD32_OFFSET(pSi0) = __SHADD16(R, T);
 80035a8:	f8cc b000 	str.w	fp, [ip]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80035ac:	fada f212 	qsub16	r2, sl, r2
    C2 = _SIMD32_OFFSET(pCoef16 + (4U * ic));

#ifndef ARM_MATH_BIG_ENDIAN

    /* xc' = (xa-xb+xc-xd)* co2 + (ya-yb+yc-yd)* (si2) */
    out1 = __SMUAD(C2, R) >> 16U;
 80035b0:	f859 b035 	ldr.w	fp, [r9, r5, lsl #3]
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80035b4:	fb2b fa02 	smuad	sl, fp, r2
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80035b8:	fb4b fb12 	smusdx	fp, fp, r2
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80035bc:	6822      	ldr	r2, [r4, #0]
 80035be:	fa92 f221 	shadd16	r2, r2, r1
 80035c2:	fa92 f221 	shadd16	r2, r2, r1
    T = __SHADD16(T, 0);

    /* writing the butterfly processed i0 + fftLen/4 sample */
    /* writing output(xc', yc') in little endian format */
    _SIMD32_OFFSET(pSi1) =
      (q31_t) ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 80035c6:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
 80035ca:	ea4f 4b0b 	mov.w	fp, fp, lsl #16
 80035ce:	ea4b 4b1a 	orr.w	fp, fp, sl, lsr #16
    _SIMD32_OFFSET(pSi1) =
 80035d2:	f844 bb04 	str.w	fp, [r4], #4
 80035d6:	f850 af04 	ldr.w	sl, [r0, #4]!
 80035da:	fa9a fa21 	shadd16	sl, sl, r1
 80035de:	fa9a fa21 	shadd16	sl, sl, r1
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80035e2:	fad2 f21a 	qsub16	r2, r2, sl
  __ASM volatile ("qasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80035e6:	faae fa12 	qasx	sl, lr, r2
  __ASM volatile ("qsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80035ea:	faee fe12 	qsax	lr, lr, r2
    /*  Butterfly process for the i0+fftLen/2 sample */

#ifndef ARM_MATH_BIG_ENDIAN

    /* xb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
    out1 = __SMUAD(C1, S) >> 16U;
 80035ee:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80035f2:	fb22 fb0e 	smuad	fp, r2, lr
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80035f6:	fb42 f21e 	smusdx	r2, r2, lr

#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

    /* writing output(xb', yb') in little endian format */
    _SIMD32_OFFSET(pSi2) =
      ((out2) & 0xFFFF0000) | ((out1) & 0x0000FFFF);
 80035fa:	0c12      	lsrs	r2, r2, #16
 80035fc:	0412      	lsls	r2, r2, #16
 80035fe:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
    _SIMD32_OFFSET(pSi2) =
 8003602:	603a      	str	r2, [r7, #0]
    /*  Butterfly process for the i0+3fftLen/4 sample */

#ifndef ARM_MATH_BIG_ENDIAN

    /* xd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
    out1 = __SMUAD(C3, R) >> 16U;
 8003604:	f8d6 e000 	ldr.w	lr, [r6]
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003608:	fb2e f20a 	smuad	r2, lr, sl
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800360c:	fb4e fa1a 	smusdx	sl, lr, sl

#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

    /* writing output(xd', yd') in little endian format */
    _SIMD32_OFFSET(pSi3) =
      ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 8003610:	ea4f 4a1a 	mov.w	sl, sl, lsr #16
 8003614:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
 8003618:	ea4a 4212 	orr.w	r2, sl, r2, lsr #16
    _SIMD32_OFFSET(pSi3) =
 800361c:	6002      	str	r2, [r0, #0]
    pSi3 += 2;

    /*  Twiddle coefficients index modifier */
    ic = ic + twidCoefModifier;
 800361e:	441d      	add	r5, r3
 8003620:	9a01      	ldr	r2, [sp, #4]
 8003622:	4416      	add	r6, r2

  } while (--j);
 8003624:	f1b8 0801 	subs.w	r8, r8, #1
 8003628:	d1a0      	bne.n	800356c <arm_radix4_butterfly_q15+0x3a>
 800362a:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30


  /* start of middle stage process */

  /*  Twiddle coefficients index modifier */
  twidCoefModifier <<= 2U;
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	9306      	str	r3, [sp, #24]

  /*  Calculation of Middle stage */
  for (k = fftLen / 4U; k > 4U; k >>= 2U)
 8003632:	9a02      	ldr	r2, [sp, #8]
 8003634:	0893      	lsrs	r3, r2, #2
 8003636:	930a      	str	r3, [sp, #40]	; 0x28
 8003638:	2b04      	cmp	r3, #4
 800363a:	d97c      	bls.n	8003736 <arm_radix4_butterfly_q15+0x204>
  n2 >>= 2U;
 800363c:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003640:	f8cd a008 	str.w	sl, [sp, #8]
 8003644:	4692      	mov	sl, r2
  {
    /*  Initializations for the middle stage */
    n1 = n2;
    n2 >>= 2U;
 8003646:	9a02      	ldr	r2, [sp, #8]
 8003648:	0893      	lsrs	r3, r2, #2
 800364a:	9308      	str	r3, [sp, #32]

      /*  Twiddle coefficients index modifier */
      ic = ic + twidCoefModifier;

      pSi0 = pSrc16 + 2 * j;
      pSi1 = pSi0 + 2 * n2;
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	9307      	str	r3, [sp, #28]
        /* xa' = xa + xb + xc + xd */
        /* ya' = ya + yb + yc + yd */
        out1 = __SHADD16(R, T);
        out1 = __SHADD16(out1, 0);
        _SIMD32_OFFSET(pSi0) = out1;
        pSi0 += 2 * n1;
 8003650:	0097      	lsls	r7, r2, #2
 8003652:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003654:	9304      	str	r3, [sp, #16]
    for (j = 0U; j <= (n2 - 1U); j++)
 8003656:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003658:	9303      	str	r3, [sp, #12]
    ic = 0U;
 800365a:	9305      	str	r3, [sp, #20]
      C1 = _SIMD32_OFFSET(pCoef16 + (2U * ic));
 800365c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800365e:	9a05      	ldr	r2, [sp, #20]
 8003660:	f851 e022 	ldr.w	lr, [r1, r2, lsl #2]
      C2 = _SIMD32_OFFSET(pCoef16 + (4U * ic));
 8003664:	f851 8032 	ldr.w	r8, [r1, r2, lsl #3]
      C3 = _SIMD32_OFFSET(pCoef16 + (6U * ic));
 8003668:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800366c:	f851 9023 	ldr.w	r9, [r1, r3, lsl #2]
      ic = ic + twidCoefModifier;
 8003670:	9b06      	ldr	r3, [sp, #24]
 8003672:	18d3      	adds	r3, r2, r3
 8003674:	9305      	str	r3, [sp, #20]
      pSi0 = pSrc16 + 2 * j;
 8003676:	9a04      	ldr	r2, [sp, #16]
 8003678:	4616      	mov	r6, r2
 800367a:	9b07      	ldr	r3, [sp, #28]
 800367c:	1898      	adds	r0, r3, r2
 800367e:	181d      	adds	r5, r3, r0
 8003680:	195c      	adds	r4, r3, r5
      for (i0 = j; i0 < fftLen; i0 += n1)
 8003682:	9b03      	ldr	r3, [sp, #12]
 8003684:	459a      	cmp	sl, r3
 8003686:	d943      	bls.n	8003710 <arm_radix4_butterfly_q15+0x1de>
 8003688:	469c      	mov	ip, r3
 800368a:	f8cd a004 	str.w	sl, [sp, #4]
        R = __QADD16(T, S);
 800368e:	6833      	ldr	r3, [r6, #0]
 8003690:	682a      	ldr	r2, [r5, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003692:	fa93 fb12 	qadd16	fp, r3, r2
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003696:	fad3 f312 	qsub16	r3, r3, r2
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800369a:	6802      	ldr	r2, [r0, #0]
 800369c:	6821      	ldr	r1, [r4, #0]
 800369e:	fa92 f211 	qadd16	r2, r2, r1
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80036a2:	fa9b f122 	shadd16	r1, fp, r2
 80036a6:	f04f 0a00 	mov.w	sl, #0
 80036aa:	fa91 f12a 	shadd16	r1, r1, sl
        _SIMD32_OFFSET(pSi0) = out1;
 80036ae:	6031      	str	r1, [r6, #0]
        pSi0 += 2 * n1;
 80036b0:	443e      	add	r6, r7
  __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80036b2:	fadb f122 	shsub16	r1, fp, r2
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80036b6:	fb28 f201 	smuad	r2, r8, r1
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80036ba:	fb48 f111 	smusdx	r1, r8, r1

#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

        /*  Reading i0+3fftLen/4 */
        /* Read yb (real), xb(imag) input */
        T = _SIMD32_OFFSET(pSi1);
 80036be:	f8d0 b000 	ldr.w	fp, [r0]

        /*  writing the butterfly processed i0 + fftLen/4 sample */
        /* xc' = (xa-xb+xc-xd)* co2 + (ya-yb+yc-yd)* (si2) */
        /* yc' = (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
        _SIMD32_OFFSET(pSi1) =
          ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 80036c2:	0c09      	lsrs	r1, r1, #16
 80036c4:	0409      	lsls	r1, r1, #16
 80036c6:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
        _SIMD32_OFFSET(pSi1) =
 80036ca:	6001      	str	r1, [r0, #0]
        pSi1 += 2 * n1;
 80036cc:	4438      	add	r0, r7
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80036ce:	6822      	ldr	r2, [r4, #0]
 80036d0:	fadb f212 	qsub16	r2, fp, r2
  __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80036d4:	faa3 f122 	shasx	r1, r3, r2
  __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80036d8:	fae3 f322 	shsax	r3, r3, r2
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80036dc:	fb2e fb03 	smuad	fp, lr, r3
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80036e0:	fb4e f313 	smusdx	r3, lr, r3
#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

        /* xb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
        /* yb' = (ya-xb-yc+xd)* co1 - (xa+yb-xc-yd)* (si1) */
        _SIMD32_OFFSET(pSi2) =
          ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 80036e4:	0c1b      	lsrs	r3, r3, #16
 80036e6:	041b      	lsls	r3, r3, #16
 80036e8:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
        _SIMD32_OFFSET(pSi2) =
 80036ec:	602b      	str	r3, [r5, #0]
        pSi2 += 2 * n1;
 80036ee:	443d      	add	r5, r7
  __ASM volatile ("smuad %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80036f0:	fb29 f301 	smuad	r3, r9, r1
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80036f4:	fb49 f111 	smusdx	r1, r9, r1
#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

        /* xd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
        /* yd' = (ya+xb-yc-xd)* co3 - (xa-yb-xc+yd)* (si3) */
        _SIMD32_OFFSET(pSi3) =
          ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 80036f8:	0c09      	lsrs	r1, r1, #16
 80036fa:	0409      	lsls	r1, r1, #16
 80036fc:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
        _SIMD32_OFFSET(pSi3) =
 8003700:	6021      	str	r1, [r4, #0]
        pSi3 += 2 * n1;
 8003702:	443c      	add	r4, r7
      for (i0 = j; i0 < fftLen; i0 += n1)
 8003704:	9b02      	ldr	r3, [sp, #8]
 8003706:	449c      	add	ip, r3
 8003708:	9b01      	ldr	r3, [sp, #4]
 800370a:	4563      	cmp	r3, ip
 800370c:	d8bf      	bhi.n	800368e <arm_radix4_butterfly_q15+0x15c>
 800370e:	469a      	mov	sl, r3
    for (j = 0U; j <= (n2 - 1U); j++)
 8003710:	9b03      	ldr	r3, [sp, #12]
 8003712:	3301      	adds	r3, #1
 8003714:	9303      	str	r3, [sp, #12]
 8003716:	9a04      	ldr	r2, [sp, #16]
 8003718:	3204      	adds	r2, #4
 800371a:	9204      	str	r2, [sp, #16]
 800371c:	9a08      	ldr	r2, [sp, #32]
 800371e:	429a      	cmp	r2, r3
 8003720:	d19c      	bne.n	800365c <arm_radix4_butterfly_q15+0x12a>
      }
    }
    /*  Twiddle coefficients index modifier */
    twidCoefModifier <<= 2U;
 8003722:	9b06      	ldr	r3, [sp, #24]
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	9306      	str	r3, [sp, #24]
  for (k = fftLen / 4U; k > 4U; k >>= 2U)
 8003728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800372a:	089b      	lsrs	r3, r3, #2
 800372c:	930a      	str	r3, [sp, #40]	; 0x28
    n2 >>= 2U;
 800372e:	9a03      	ldr	r2, [sp, #12]
 8003730:	9202      	str	r2, [sp, #8]
  for (k = fftLen / 4U; k > 4U; k >>= 2U)
 8003732:	2b04      	cmp	r3, #4
 8003734:	d887      	bhi.n	8003646 <arm_radix4_butterfly_q15+0x114>
 8003736:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8003738:	3410      	adds	r4, #16
 800373a:	9e0d      	ldr	r6, [sp, #52]	; 0x34

    /* Read xd (real), yd(imag) input */
    xdyd = *__SIMD32(ptr1)++;

    /* R = packed((ya + yc), (xa + xc)) */
    R = __QADD16(xaya, xcyc);
 800373c:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8003740:	f854 7c08 	ldr.w	r7, [r4, #-8]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003744:	fa93 f117 	qadd16	r1, r3, r7

    /* T = packed((yb + yd), (xb + xd)) */
    T = __QADD16(xbyb, xdyd);
 8003748:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 800374c:	f854 0c04 	ldr.w	r0, [r4, #-4]
 8003750:	fa92 f510 	qadd16	r5, r2, r0
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003754:	fa91 f525 	shadd16	r5, r1, r5
    ptr1 = ptr1 - 8U;


    /* xa' = xa + xb + xc + xd */
    /* ya' = ya + yb + yc + yd */
    *__SIMD32(ptr1)++ = __SHADD16(R, T);
 8003758:	f844 5c10 	str.w	r5, [r4, #-16]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800375c:	fa92 f510 	qadd16	r5, r2, r0
  __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003760:	fad1 f125 	shsub16	r1, r1, r5
    /* T = packed((yb + yd), (xb + xd)) */
    T = __QADD16(xbyb, xdyd);

    /* xc' = (xa-xb+xc-xd) */
    /* yc' = (ya-yb+yc-yd) */
    *__SIMD32(ptr1)++ = __SHSUB16(R, T);
 8003764:	f844 1c0c 	str.w	r1, [r4, #-12]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003768:	fad3 f317 	qsub16	r3, r3, r7
 800376c:	fad2 f210 	qsub16	r2, r2, r0
  __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003770:	fae3 f122 	shsax	r1, r3, r2

#ifndef ARM_MATH_BIG_ENDIAN

    /* xb' = (xa+yb-xc-yd) */
    /* yb' = (ya-xb-yc+xd) */
    *__SIMD32(ptr1)++ = __SHSAX(S, U);
 8003774:	f844 1c08 	str.w	r1, [r4, #-8]
  __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003778:	faa3 f322 	shasx	r3, r3, r2


    /* xd' = (xa-yb-xc+yd) */
    /* yd' = (ya+xb-yc-xd) */
    *__SIMD32(ptr1)++ = __SHASX(S, U);
 800377c:	f844 3c04 	str.w	r3, [r4, #-4]
 8003780:	3410      	adds	r4, #16
    /* yd' = (ya+xb-yc-xd) */
    *__SIMD32(ptr1)++ = __SHSAX(S, U);

#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

  } while (--j);
 8003782:	3e01      	subs	r6, #1
 8003784:	d1da      	bne.n	800373c <arm_radix4_butterfly_q15+0x20a>
  /* output is in 7.9(q9) format for the 64 point  */
  /* output is in 5.11(q11) format for the 16 point  */

#endif /* #if defined (ARM_MATH_DSP) */

}
 8003786:	b00f      	add	sp, #60	; 0x3c
 8003788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800378c <arm_radix4_butterfly_inverse_q15>:
void arm_radix4_butterfly_inverse_q15(
  q15_t * pSrc16,
  uint32_t fftLen,
  q15_t * pCoef16,
  uint32_t twidCoefModifier)
{
 800378c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003790:	b08f      	sub	sp, #60	; 0x3c
 8003792:	4605      	mov	r5, r0
 8003794:	900b      	str	r0, [sp, #44]	; 0x2c
 8003796:	9102      	str	r1, [sp, #8]
 8003798:	4691      	mov	r9, r2
 800379a:	9209      	str	r2, [sp, #36]	; 0x24
  /*  Initializations for the first stage */
  n2 = fftLen;
  n1 = n2;

  /* n2 = fftLen/4 */
  n2 >>= 2U;
 800379c:	0889      	lsrs	r1, r1, #2
 800379e:	910d      	str	r1, [sp, #52]	; 0x34

  /* Index for input read and output write */
  j = n2;

  pSi0 = pSrc16;
  pSi1 = pSi0 + 2 * n2;
 80037a0:	008a      	lsls	r2, r1, #2
 80037a2:	1884      	adds	r4, r0, r2
  pSi2 = pSi1 + 2 * n2;
 80037a4:	18a0      	adds	r0, r4, r2
 80037a6:	f1a5 0c04 	sub.w	ip, r5, #4
 80037aa:	1f07      	subs	r7, r0, #4
 80037ac:	3a04      	subs	r2, #4
 80037ae:	4410      	add	r0, r2
 80037b0:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 80037b4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80037b8:	464e      	mov	r6, r9
  j = n2;
 80037ba:	460a      	mov	r2, r1
  ic = 0U;
 80037bc:	2500      	movs	r5, #0
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80037be:	4629      	mov	r1, r5
 80037c0:	4690      	mov	r8, r2
 80037c2:	f8cd b004 	str.w	fp, [sp, #4]
 80037c6:	f85c 2f04 	ldr.w	r2, [ip, #4]!
 80037ca:	fa92 fe21 	shadd16	lr, r2, r1
 80037ce:	fa9e fe21 	shadd16	lr, lr, r1
 80037d2:	f857 2f04 	ldr.w	r2, [r7, #4]!
 80037d6:	fa92 f221 	shadd16	r2, r2, r1
 80037da:	fa92 f221 	shadd16	r2, r2, r1
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80037de:	fa9e fa12 	qadd16	sl, lr, r2
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80037e2:	fade fe12 	qsub16	lr, lr, r2
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80037e6:	6822      	ldr	r2, [r4, #0]
 80037e8:	fa92 f221 	shadd16	r2, r2, r1
 80037ec:	fa92 fb21 	shadd16	fp, r2, r1
 80037f0:	6842      	ldr	r2, [r0, #4]
 80037f2:	fa92 f221 	shadd16	r2, r2, r1
 80037f6:	fa92 f221 	shadd16	r2, r2, r1
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80037fa:	fa9b f212 	qadd16	r2, fp, r2
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80037fe:	fa9a fb22 	shadd16	fp, sl, r2
    T = __QADD16(T, U);

    /*  writing the butterfly processed i0 sample */
    /* xa' = xa + xb + xc + xd */
    /* ya' = ya + yb + yc + yd */
    _SIMD32_OFFSET(pSi0) = __SHADD16(R, T);
 8003802:	f8cc b000 	str.w	fp, [ip]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003806:	fada f212 	qsub16	r2, sl, r2
    C2 = _SIMD32_OFFSET(pCoef16 + (4U * ic));

#ifndef ARM_MATH_BIG_ENDIAN

    /* xc' = (xa-xb+xc-xd)* co2 + (ya-yb+yc-yd)* (si2) */
    out1 = __SMUSD(C2, R) >> 16U;
 800380a:	f859 b035 	ldr.w	fp, [r9, r5, lsl #3]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800380e:	fb4b fa02 	smusd	sl, fp, r2
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003812:	fb2b fb12 	smuadx	fp, fp, r2
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003816:	6822      	ldr	r2, [r4, #0]
 8003818:	fa92 f221 	shadd16	r2, r2, r1
 800381c:	fa92 f221 	shadd16	r2, r2, r1
    T = __SHADD16(T, 0);

    /* writing the butterfly processed i0 + fftLen/4 sample */
    /* writing output(xc', yc') in little endian format */
    _SIMD32_OFFSET(pSi1) =
      (q31_t) ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 8003820:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
 8003824:	ea4f 4b0b 	mov.w	fp, fp, lsl #16
 8003828:	ea4b 4b1a 	orr.w	fp, fp, sl, lsr #16
    _SIMD32_OFFSET(pSi1) =
 800382c:	f844 bb04 	str.w	fp, [r4], #4
 8003830:	f850 af04 	ldr.w	sl, [r0, #4]!
 8003834:	fa9a fa21 	shadd16	sl, sl, r1
 8003838:	fa9a fa21 	shadd16	sl, sl, r1
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800383c:	fad2 f21a 	qsub16	r2, r2, sl
  __ASM volatile ("qsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003840:	faee fa12 	qsax	sl, lr, r2
  __ASM volatile ("qasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003844:	faae fe12 	qasx	lr, lr, r2
    /*  Butterfly process for the i0+fftLen/2 sample */

#ifndef ARM_MATH_BIG_ENDIAN

    /* xb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
    out1 = __SMUSD(C1, S) >> 16U;
 8003848:	f859 2025 	ldr.w	r2, [r9, r5, lsl #2]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800384c:	fb42 fb0e 	smusd	fp, r2, lr
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003850:	fb22 f21e 	smuadx	r2, r2, lr

#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

    /* writing output(xb', yb') in little endian format */
    _SIMD32_OFFSET(pSi2) =
      ((out2) & 0xFFFF0000) | ((out1) & 0x0000FFFF);
 8003854:	0c12      	lsrs	r2, r2, #16
 8003856:	0412      	lsls	r2, r2, #16
 8003858:	ea42 421b 	orr.w	r2, r2, fp, lsr #16
    _SIMD32_OFFSET(pSi2) =
 800385c:	603a      	str	r2, [r7, #0]
    /*  Butterfly process for the i0+3fftLen/4 sample */

#ifndef ARM_MATH_BIG_ENDIAN

    /* xd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
    out1 = __SMUSD(C3, R) >> 16U;
 800385e:	f8d6 e000 	ldr.w	lr, [r6]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003862:	fb4e f20a 	smusd	r2, lr, sl
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003866:	fb2e fa1a 	smuadx	sl, lr, sl

#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

    /* writing output(xd', yd') in little endian format */
    _SIMD32_OFFSET(pSi3) =
      ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 800386a:	ea4f 4a1a 	mov.w	sl, sl, lsr #16
 800386e:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
 8003872:	ea4a 4212 	orr.w	r2, sl, r2, lsr #16
    _SIMD32_OFFSET(pSi3) =
 8003876:	6002      	str	r2, [r0, #0]
    pSi3 += 2;

    /*  Twiddle coefficients index modifier */
    ic = ic + twidCoefModifier;
 8003878:	441d      	add	r5, r3
 800387a:	9a01      	ldr	r2, [sp, #4]
 800387c:	4416      	add	r6, r2

  } while (--j);
 800387e:	f1b8 0801 	subs.w	r8, r8, #1
 8003882:	d1a0      	bne.n	80037c6 <arm_radix4_butterfly_inverse_q15+0x3a>
 8003884:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30


  /* start of middle stage process */

  /*  Twiddle coefficients index modifier */
  twidCoefModifier <<= 2U;
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	9306      	str	r3, [sp, #24]

  /*  Calculation of Middle stage */
  for (k = fftLen / 4U; k > 4U; k >>= 2U)
 800388c:	9a02      	ldr	r2, [sp, #8]
 800388e:	0893      	lsrs	r3, r2, #2
 8003890:	930a      	str	r3, [sp, #40]	; 0x28
 8003892:	2b04      	cmp	r3, #4
 8003894:	d97c      	bls.n	8003990 <arm_radix4_butterfly_inverse_q15+0x204>
  n2 >>= 2U;
 8003896:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800389a:	f8cd a008 	str.w	sl, [sp, #8]
 800389e:	4692      	mov	sl, r2
  {
    /*  Initializations for the middle stage */
    n1 = n2;
    n2 >>= 2U;
 80038a0:	9a02      	ldr	r2, [sp, #8]
 80038a2:	0893      	lsrs	r3, r2, #2
 80038a4:	9308      	str	r3, [sp, #32]

      /*  Twiddle coefficients index modifier */
      ic = ic + twidCoefModifier;

      pSi0 = pSrc16 + 2 * j;
      pSi1 = pSi0 + 2 * n2;
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	9307      	str	r3, [sp, #28]
        /* xa' = xa + xb + xc + xd */
        /* ya' = ya + yb + yc + yd */
        out1 = __SHADD16(R, T);
        out1 = __SHADD16(out1, 0);
        _SIMD32_OFFSET(pSi0) = out1;
        pSi0 += 2 * n1;
 80038aa:	0097      	lsls	r7, r2, #2
 80038ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80038ae:	9304      	str	r3, [sp, #16]
    for (j = 0U; j <= (n2 - 1U); j++)
 80038b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80038b2:	9303      	str	r3, [sp, #12]
    ic = 0U;
 80038b4:	9305      	str	r3, [sp, #20]
      C1 = _SIMD32_OFFSET(pCoef16 + (2U * ic));
 80038b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80038b8:	9a05      	ldr	r2, [sp, #20]
 80038ba:	f851 e022 	ldr.w	lr, [r1, r2, lsl #2]
      C2 = _SIMD32_OFFSET(pCoef16 + (4U * ic));
 80038be:	f851 8032 	ldr.w	r8, [r1, r2, lsl #3]
      C3 = _SIMD32_OFFSET(pCoef16 + (6U * ic));
 80038c2:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80038c6:	f851 9023 	ldr.w	r9, [r1, r3, lsl #2]
      ic = ic + twidCoefModifier;
 80038ca:	9b06      	ldr	r3, [sp, #24]
 80038cc:	18d3      	adds	r3, r2, r3
 80038ce:	9305      	str	r3, [sp, #20]
      pSi0 = pSrc16 + 2 * j;
 80038d0:	9a04      	ldr	r2, [sp, #16]
 80038d2:	4616      	mov	r6, r2
 80038d4:	9b07      	ldr	r3, [sp, #28]
 80038d6:	1898      	adds	r0, r3, r2
 80038d8:	181d      	adds	r5, r3, r0
 80038da:	195c      	adds	r4, r3, r5
      for (i0 = j; i0 < fftLen; i0 += n1)
 80038dc:	9b03      	ldr	r3, [sp, #12]
 80038de:	459a      	cmp	sl, r3
 80038e0:	d943      	bls.n	800396a <arm_radix4_butterfly_inverse_q15+0x1de>
 80038e2:	469c      	mov	ip, r3
 80038e4:	f8cd a004 	str.w	sl, [sp, #4]
        R = __QADD16(T, S);
 80038e8:	6833      	ldr	r3, [r6, #0]
 80038ea:	682a      	ldr	r2, [r5, #0]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80038ec:	fa93 fb12 	qadd16	fp, r3, r2
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80038f0:	fad3 f312 	qsub16	r3, r3, r2
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80038f4:	6802      	ldr	r2, [r0, #0]
 80038f6:	6821      	ldr	r1, [r4, #0]
 80038f8:	fa92 f211 	qadd16	r2, r2, r1
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80038fc:	fa9b f122 	shadd16	r1, fp, r2
 8003900:	f04f 0a00 	mov.w	sl, #0
 8003904:	fa91 f12a 	shadd16	r1, r1, sl
        _SIMD32_OFFSET(pSi0) = out1;
 8003908:	6031      	str	r1, [r6, #0]
        pSi0 += 2 * n1;
 800390a:	443e      	add	r6, r7
  __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800390c:	fadb f122 	shsub16	r1, fp, r2
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003910:	fb48 f201 	smusd	r2, r8, r1
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003914:	fb28 f111 	smuadx	r1, r8, r1

#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

        /*  Reading i0+3fftLen/4 */
        /* Read yb (real), xb(imag) input */
        T = _SIMD32_OFFSET(pSi1);
 8003918:	f8d0 b000 	ldr.w	fp, [r0]

        /*  writing the butterfly processed i0 + fftLen/4 sample */
        /* xc' = (xa-xb+xc-xd)* co2 + (ya-yb+yc-yd)* (si2) */
        /* yc' = (ya-yb+yc-yd)* co2 - (xa-xb+xc-xd)* (si2) */
        _SIMD32_OFFSET(pSi1) =
          ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 800391c:	0c09      	lsrs	r1, r1, #16
 800391e:	0409      	lsls	r1, r1, #16
 8003920:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
        _SIMD32_OFFSET(pSi1) =
 8003924:	6001      	str	r1, [r0, #0]
        pSi1 += 2 * n1;
 8003926:	4438      	add	r0, r7
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003928:	6822      	ldr	r2, [r4, #0]
 800392a:	fadb f212 	qsub16	r2, fp, r2
  __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800392e:	fae3 f122 	shsax	r1, r3, r2
  __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003932:	faa3 f322 	shasx	r3, r3, r2
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003936:	fb4e fb03 	smusd	fp, lr, r3
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800393a:	fb2e f313 	smuadx	r3, lr, r3
#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

        /* xb' = (xa+yb-xc-yd)* co1 + (ya-xb-yc+xd)* (si1) */
        /* yb' = (ya-xb-yc+xd)* co1 - (xa+yb-xc-yd)* (si1) */
        _SIMD32_OFFSET(pSi2) =
          ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 800393e:	0c1b      	lsrs	r3, r3, #16
 8003940:	041b      	lsls	r3, r3, #16
 8003942:	ea43 431b 	orr.w	r3, r3, fp, lsr #16
        _SIMD32_OFFSET(pSi2) =
 8003946:	602b      	str	r3, [r5, #0]
        pSi2 += 2 * n1;
 8003948:	443d      	add	r5, r7
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800394a:	fb49 f301 	smusd	r3, r9, r1
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800394e:	fb29 f111 	smuadx	r1, r9, r1
#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

        /* xd' = (xa-yb-xc+yd)* co3 + (ya+xb-yc-xd)* (si3) */
        /* yd' = (ya+xb-yc-xd)* co3 - (xa-yb-xc+yd)* (si3) */
        _SIMD32_OFFSET(pSi3) =
          ((out2) & 0xFFFF0000) | (out1 & 0x0000FFFF);
 8003952:	0c09      	lsrs	r1, r1, #16
 8003954:	0409      	lsls	r1, r1, #16
 8003956:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
        _SIMD32_OFFSET(pSi3) =
 800395a:	6021      	str	r1, [r4, #0]
        pSi3 += 2 * n1;
 800395c:	443c      	add	r4, r7
      for (i0 = j; i0 < fftLen; i0 += n1)
 800395e:	9b02      	ldr	r3, [sp, #8]
 8003960:	449c      	add	ip, r3
 8003962:	9b01      	ldr	r3, [sp, #4]
 8003964:	4563      	cmp	r3, ip
 8003966:	d8bf      	bhi.n	80038e8 <arm_radix4_butterfly_inverse_q15+0x15c>
 8003968:	469a      	mov	sl, r3
    for (j = 0U; j <= (n2 - 1U); j++)
 800396a:	9b03      	ldr	r3, [sp, #12]
 800396c:	3301      	adds	r3, #1
 800396e:	9303      	str	r3, [sp, #12]
 8003970:	9a04      	ldr	r2, [sp, #16]
 8003972:	3204      	adds	r2, #4
 8003974:	9204      	str	r2, [sp, #16]
 8003976:	9a08      	ldr	r2, [sp, #32]
 8003978:	429a      	cmp	r2, r3
 800397a:	d19c      	bne.n	80038b6 <arm_radix4_butterfly_inverse_q15+0x12a>
      }
    }
    /*  Twiddle coefficients index modifier */
    twidCoefModifier <<= 2U;
 800397c:	9b06      	ldr	r3, [sp, #24]
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	9306      	str	r3, [sp, #24]
  for (k = fftLen / 4U; k > 4U; k >>= 2U)
 8003982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003984:	089b      	lsrs	r3, r3, #2
 8003986:	930a      	str	r3, [sp, #40]	; 0x28
    n2 >>= 2U;
 8003988:	9a03      	ldr	r2, [sp, #12]
 800398a:	9202      	str	r2, [sp, #8]
  for (k = fftLen / 4U; k > 4U; k >>= 2U)
 800398c:	2b04      	cmp	r3, #4
 800398e:	d887      	bhi.n	80038a0 <arm_radix4_butterfly_inverse_q15+0x114>
 8003990:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8003992:	3410      	adds	r4, #16
 8003994:	9e0d      	ldr	r6, [sp, #52]	; 0x34

    /* Read xd (real), yd(imag) input */
    xdyd = *__SIMD32(ptr1)++;

    /* R = packed((ya + yc), (xa + xc)) */
    R = __QADD16(xaya, xcyc);
 8003996:	f854 3c10 	ldr.w	r3, [r4, #-16]
 800399a:	f854 7c08 	ldr.w	r7, [r4, #-8]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800399e:	fa93 f117 	qadd16	r1, r3, r7

    /* T = packed((yb + yd), (xb + xd)) */
    T = __QADD16(xbyb, xdyd);
 80039a2:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 80039a6:	f854 0c04 	ldr.w	r0, [r4, #-4]
 80039aa:	fa92 f510 	qadd16	r5, r2, r0
  __ASM volatile ("shadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80039ae:	fa91 f525 	shadd16	r5, r1, r5
    ptr1 = ptr1 - 8U;


    /* xa' = xa + xb + xc + xd */
    /* ya' = ya + yb + yc + yd */
    *__SIMD32(ptr1)++ = __SHADD16(R, T);
 80039b2:	f844 5c10 	str.w	r5, [r4, #-16]
  __ASM volatile ("qadd16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80039b6:	fa92 f510 	qadd16	r5, r2, r0
  __ASM volatile ("shsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80039ba:	fad1 f125 	shsub16	r1, r1, r5
    /* T = packed((yb + yd), (xb + xd)) */
    T = __QADD16(xbyb, xdyd);

    /* xc' = (xa-xb+xc-xd) */
    /* yc' = (ya-yb+yc-yd) */
    *__SIMD32(ptr1)++ = __SHSUB16(R, T);
 80039be:	f844 1c0c 	str.w	r1, [r4, #-12]
  __ASM volatile ("qsub16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80039c2:	fad3 f317 	qsub16	r3, r3, r7
 80039c6:	fad2 f210 	qsub16	r2, r2, r0
  __ASM volatile ("shasx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80039ca:	faa3 f122 	shasx	r1, r3, r2

#ifndef ARM_MATH_BIG_ENDIAN

    /* xb' = (xa+yb-xc-yd) */
    /* yb' = (ya-xb-yc+xd) */
    *__SIMD32(ptr1)++ = __SHASX(S, U);
 80039ce:	f844 1c08 	str.w	r1, [r4, #-8]
  __ASM volatile ("shsax %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 80039d2:	fae3 f322 	shsax	r3, r3, r2


    /* xd' = (xa-yb-xc+yd) */
    /* yd' = (ya+xb-yc-xd) */
    *__SIMD32(ptr1)++ = __SHSAX(S, U);
 80039d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80039da:	3410      	adds	r4, #16
    *__SIMD32(ptr1)++ = __SHASX(S, U);


#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

  } while (--j);
 80039dc:	3e01      	subs	r6, #1
 80039de:	d1da      	bne.n	8003996 <arm_radix4_butterfly_inverse_q15+0x20a>
  /* output is in 7.9(q9) format for the 64 point  */
  /* output is in 5.11(q11) format for the 16 point  */

#endif /* #if defined (ARM_MATH_DSP) */

}
 80039e0:	b00f      	add	sp, #60	; 0x3c
 80039e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080039e8 <arm_rfft_init_q15>:
arm_status arm_rfft_init_q15(
    arm_rfft_instance_q15 * S,
    uint32_t fftLenReal,
    uint32_t ifftFlagR,
    uint32_t bitReverseFlag)
{
 80039e8:	b410      	push	{r4}
 80039ea:	b289      	uxth	r1, r1
    /*  Initialise the default arm status */
    arm_status status = ARM_MATH_SUCCESS;

    /*  Initialize the Real FFT length */
    S->fftLenReal = (uint16_t) fftLenReal;
 80039ec:	6001      	str	r1, [r0, #0]

    /*  Initialize the Twiddle coefficientA pointer */
    S->pTwiddleAReal = (q15_t *) realCoefAQ15;
 80039ee:	4c2e      	ldr	r4, [pc, #184]	; (8003aa8 <arm_rfft_init_q15+0xc0>)
 80039f0:	60c4      	str	r4, [r0, #12]

    /*  Initialize the Twiddle coefficientB pointer */
    S->pTwiddleBReal = (q15_t *) realCoefBQ15;
 80039f2:	4c2e      	ldr	r4, [pc, #184]	; (8003aac <arm_rfft_init_q15+0xc4>)
 80039f4:	6104      	str	r4, [r0, #16]

    /*  Initialize the Flag for selection of RFFT or RIFFT */
    S->ifftFlagR = (uint8_t) ifftFlagR;
 80039f6:	7102      	strb	r2, [r0, #4]

    /*  Initialize the Flag for calculation Bit reversal or not */
    S->bitReverseFlagR = (uint8_t) bitReverseFlag;
 80039f8:	7143      	strb	r3, [r0, #5]

    /*  Initialization of coef modifier depending on the FFT length */
    switch (S->fftLenReal)
 80039fa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80039fe:	d03e      	beq.n	8003a7e <arm_rfft_init_q15+0x96>
 8003a00:	d816      	bhi.n	8003a30 <arm_rfft_init_q15+0x48>
 8003a02:	2940      	cmp	r1, #64	; 0x40
 8003a04:	d047      	beq.n	8003a96 <arm_rfft_init_q15+0xae>
 8003a06:	d90a      	bls.n	8003a1e <arm_rfft_init_q15+0x36>
 8003a08:	2980      	cmp	r1, #128	; 0x80
 8003a0a:	d03e      	beq.n	8003a8a <arm_rfft_init_q15+0xa2>
 8003a0c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8003a10:	d147      	bne.n	8003aa2 <arm_rfft_init_q15+0xba>
    case 512U:
        S->twidCoefRModifier = 16U;
        S->pCfft = &arm_cfft_sR_q15_len256;
        break;
    case 256U:
        S->twidCoefRModifier = 32U;
 8003a12:	2320      	movs	r3, #32
 8003a14:	6083      	str	r3, [r0, #8]
        S->pCfft = &arm_cfft_sR_q15_len128;
 8003a16:	4b26      	ldr	r3, [pc, #152]	; (8003ab0 <arm_rfft_init_q15+0xc8>)
 8003a18:	6143      	str	r3, [r0, #20]
    arm_status status = ARM_MATH_SUCCESS;
 8003a1a:	2000      	movs	r0, #0
        break;
 8003a1c:	e017      	b.n	8003a4e <arm_rfft_init_q15+0x66>
    switch (S->fftLenReal)
 8003a1e:	2920      	cmp	r1, #32
 8003a20:	d13f      	bne.n	8003aa2 <arm_rfft_init_q15+0xba>
    case 64U:
        S->twidCoefRModifier = 128U;
        S->pCfft = &arm_cfft_sR_q15_len32;
        break;
    case 32U:
        S->twidCoefRModifier = 256U;
 8003a22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a26:	6083      	str	r3, [r0, #8]
        S->pCfft = &arm_cfft_sR_q15_len16;
 8003a28:	4b22      	ldr	r3, [pc, #136]	; (8003ab4 <arm_rfft_init_q15+0xcc>)
 8003a2a:	6143      	str	r3, [r0, #20]
    arm_status status = ARM_MATH_SUCCESS;
 8003a2c:	2000      	movs	r0, #0
        break;
 8003a2e:	e00e      	b.n	8003a4e <arm_rfft_init_q15+0x66>
    switch (S->fftLenReal)
 8003a30:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8003a34:	d01d      	beq.n	8003a72 <arm_rfft_init_q15+0x8a>
 8003a36:	d90d      	bls.n	8003a54 <arm_rfft_init_q15+0x6c>
 8003a38:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8003a3c:	d013      	beq.n	8003a66 <arm_rfft_init_q15+0x7e>
 8003a3e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8003a42:	d12e      	bne.n	8003aa2 <arm_rfft_init_q15+0xba>
        S->twidCoefRModifier = 1U;
 8003a44:	2301      	movs	r3, #1
 8003a46:	6083      	str	r3, [r0, #8]
        S->pCfft = &arm_cfft_sR_q15_len4096;
 8003a48:	4b1b      	ldr	r3, [pc, #108]	; (8003ab8 <arm_rfft_init_q15+0xd0>)
 8003a4a:	6143      	str	r3, [r0, #20]
    arm_status status = ARM_MATH_SUCCESS;
 8003a4c:	2000      	movs	r0, #0
        break;
    }

    /* return the status of RFFT Init function */
    return (status);
}
 8003a4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a52:	4770      	bx	lr
    switch (S->fftLenReal)
 8003a54:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003a58:	d123      	bne.n	8003aa2 <arm_rfft_init_q15+0xba>
        S->twidCoefRModifier = 8U;
 8003a5a:	2308      	movs	r3, #8
 8003a5c:	6083      	str	r3, [r0, #8]
        S->pCfft = &arm_cfft_sR_q15_len512;
 8003a5e:	4b17      	ldr	r3, [pc, #92]	; (8003abc <arm_rfft_init_q15+0xd4>)
 8003a60:	6143      	str	r3, [r0, #20]
    arm_status status = ARM_MATH_SUCCESS;
 8003a62:	2000      	movs	r0, #0
        break;
 8003a64:	e7f3      	b.n	8003a4e <arm_rfft_init_q15+0x66>
        S->twidCoefRModifier = 2U;
 8003a66:	2302      	movs	r3, #2
 8003a68:	6083      	str	r3, [r0, #8]
        S->pCfft = &arm_cfft_sR_q15_len2048;
 8003a6a:	4b15      	ldr	r3, [pc, #84]	; (8003ac0 <arm_rfft_init_q15+0xd8>)
 8003a6c:	6143      	str	r3, [r0, #20]
    arm_status status = ARM_MATH_SUCCESS;
 8003a6e:	2000      	movs	r0, #0
        break;
 8003a70:	e7ed      	b.n	8003a4e <arm_rfft_init_q15+0x66>
        S->twidCoefRModifier = 4U;
 8003a72:	2304      	movs	r3, #4
 8003a74:	6083      	str	r3, [r0, #8]
        S->pCfft = &arm_cfft_sR_q15_len1024;
 8003a76:	4b13      	ldr	r3, [pc, #76]	; (8003ac4 <arm_rfft_init_q15+0xdc>)
 8003a78:	6143      	str	r3, [r0, #20]
    arm_status status = ARM_MATH_SUCCESS;
 8003a7a:	2000      	movs	r0, #0
        break;
 8003a7c:	e7e7      	b.n	8003a4e <arm_rfft_init_q15+0x66>
        S->twidCoefRModifier = 16U;
 8003a7e:	2310      	movs	r3, #16
 8003a80:	6083      	str	r3, [r0, #8]
        S->pCfft = &arm_cfft_sR_q15_len256;
 8003a82:	4b11      	ldr	r3, [pc, #68]	; (8003ac8 <arm_rfft_init_q15+0xe0>)
 8003a84:	6143      	str	r3, [r0, #20]
    arm_status status = ARM_MATH_SUCCESS;
 8003a86:	2000      	movs	r0, #0
        break;
 8003a88:	e7e1      	b.n	8003a4e <arm_rfft_init_q15+0x66>
        S->twidCoefRModifier = 64U;
 8003a8a:	2340      	movs	r3, #64	; 0x40
 8003a8c:	6083      	str	r3, [r0, #8]
        S->pCfft = &arm_cfft_sR_q15_len64;
 8003a8e:	4b0f      	ldr	r3, [pc, #60]	; (8003acc <arm_rfft_init_q15+0xe4>)
 8003a90:	6143      	str	r3, [r0, #20]
    arm_status status = ARM_MATH_SUCCESS;
 8003a92:	2000      	movs	r0, #0
        break;
 8003a94:	e7db      	b.n	8003a4e <arm_rfft_init_q15+0x66>
        S->twidCoefRModifier = 128U;
 8003a96:	2380      	movs	r3, #128	; 0x80
 8003a98:	6083      	str	r3, [r0, #8]
        S->pCfft = &arm_cfft_sR_q15_len32;
 8003a9a:	4b0d      	ldr	r3, [pc, #52]	; (8003ad0 <arm_rfft_init_q15+0xe8>)
 8003a9c:	6143      	str	r3, [r0, #20]
    arm_status status = ARM_MATH_SUCCESS;
 8003a9e:	2000      	movs	r0, #0
        break;
 8003aa0:	e7d5      	b.n	8003a4e <arm_rfft_init_q15+0x66>
        status = ARM_MATH_ARGUMENT_ERROR;
 8003aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa6:	e7d2      	b.n	8003a4e <arm_rfft_init_q15+0x66>
 8003aa8:	080120f0 	.word	0x080120f0
 8003aac:	080160f0 	.word	0x080160f0
 8003ab0:	08012070 	.word	0x08012070
 8003ab4:	08012080 	.word	0x08012080
 8003ab8:	080120c0 	.word	0x080120c0
 8003abc:	080120d0 	.word	0x080120d0
 8003ac0:	08012090 	.word	0x08012090
 8003ac4:	08012060 	.word	0x08012060
 8003ac8:	080120a0 	.word	0x080120a0
 8003acc:	080120e0 	.word	0x080120e0
 8003ad0:	080120b0 	.word	0x080120b0

08003ad4 <arm_split_rfft_q15>:
    uint32_t fftLen,
    q15_t * pATable,
    q15_t * pBTable,
    q15_t * pDst,
    uint32_t modifier)
{
 8003ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ad8:	b083      	sub	sp, #12
 8003ada:	4606      	mov	r6, r0
 8003adc:	9001      	str	r0, [sp, #4]
#endif

    //  pSrc[2U * fftLen] = pSrc[0];
    //  pSrc[(2U * fftLen) + 1U] = pSrc[1];

    pCoefA = &pATable[modifier * 2U];
 8003ade:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003ae0:	ea4f 0b80 	mov.w	fp, r0, lsl #2
 8003ae4:	445a      	add	r2, fp
    pCoefB = &pBTable[modifier * 2U];
 8003ae6:	445b      	add	r3, fp

    pSrc1 = &pSrc[2];
    pSrc2 = &pSrc[(2U * fftLen) - 2U];
 8003ae8:	f101 4080 	add.w	r0, r1, #1073741824	; 0x40000000
 8003aec:	3801      	subs	r0, #1
 8003aee:	0084      	lsls	r4, r0, #2
 8003af0:	9400      	str	r4, [sp, #0]
#if defined (ARM_MATH_DSP)

    /* Run the below code for Cortex-M4 and Cortex-M3 */
    i = 1U;
    pD1 = pDst + 2;
    pD2 = pDst + (4U * fftLen) - 2;
 8003af2:	ea4f 0cc1 	mov.w	ip, r1, lsl #3

    for(i = fftLen - 1; i > 0; i--)
 8003af6:	3901      	subs	r1, #1
 8003af8:	d02d      	beq.n	8003b56 <arm_split_rfft_q15+0x82>
 8003afa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003afc:	f105 0808 	add.w	r8, r5, #8
 8003b00:	f1ac 0c08 	sub.w	ip, ip, #8
 8003b04:	44ac      	add	ip, r5
 8003b06:	46b2      	mov	sl, r6
 8003b08:	f104 0904 	add.w	r9, r4, #4
 8003b0c:	44b1      	add	r9, r6
 8003b0e:	f04f 0e00 	mov.w	lr, #0


#ifndef ARM_MATH_BIG_ENDIAN

        /* pSrc[2 * i] * pATable[2 * i] - pSrc[2 * i + 1] * pATable[2 * i + 1] */
        outR = __SMUSD(*__SIMD32(pSrc1), *__SIMD32(pCoefA));
 8003b12:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 8003b16:	f852 600e 	ldr.w	r6, [r2, lr]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003b1a:	fb40 f406 	smusd	r4, r0, r6

#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

        /* pSrc[2 * n - 2 * i] * pBTable[2 * i] +
        pSrc[2 * n - 2 * i + 1] * pBTable[2 * i + 1]) */
        outR = __SMLAD(*__SIMD32(pSrc2), *__SIMD32(pCoefB), outR) >> 16U;
 8003b1e:	f859 5d04 	ldr.w	r5, [r9, #-4]!
 8003b22:	f853 700e 	ldr.w	r7, [r3, lr]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8003b26:	fb25 4407 	smlad	r4, r5, r7, r4
  __ASM volatile ("smusdx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003b2a:	fb45 f517 	smusdx	r5, r5, r7
  __ASM volatile ("smladx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8003b2e:	fb20 5016 	smladx	r0, r0, r6, r5

        /* (pIn[2 * i + 1] * pATable[2 * i] + pIn[2 * i] * pATable[2 * i + 1] */
        outI = __SMLADX(*__SIMD32(pSrc1)++, *__SIMD32(pCoefA), outI);

        /* write output */
        *pD1++ = (q15_t) outR;
 8003b32:	1424      	asrs	r4, r4, #16
 8003b34:	f828 4c04 	strh.w	r4, [r8, #-4]
        *pD1++ = outI >> 16U;
 8003b38:	1400      	asrs	r0, r0, #16
 8003b3a:	f828 0c02 	strh.w	r0, [r8, #-2]

        /* write complex conjugate output */
        pD2[0] = (q15_t) outR;
 8003b3e:	f8ac 4004 	strh.w	r4, [ip, #4]
        pD2[1] = -(outI >> 16U);
 8003b42:	4240      	negs	r0, r0
 8003b44:	f8ac 0006 	strh.w	r0, [ip, #6]
 8003b48:	44de      	add	lr, fp
 8003b4a:	f108 0804 	add.w	r8, r8, #4
 8003b4e:	f1ac 0c04 	sub.w	ip, ip, #4
    for(i = fftLen - 1; i > 0; i--)
 8003b52:	3901      	subs	r1, #1
 8003b54:	d1dd      	bne.n	8003b12 <arm_split_rfft_q15+0x3e>
        /* update coefficient pointer */
        pCoefB = pCoefB + (2U * modifier);
        pCoefA = pCoefA + (2U * modifier);
    }

    pDst[2U * fftLen] = (pSrc[0] - pSrc[1]) >> 1;
 8003b56:	9b00      	ldr	r3, [sp, #0]
 8003b58:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003b5a:	440b      	add	r3, r1
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	9801      	ldr	r0, [sp, #4]
 8003b60:	f9b0 3000 	ldrsh.w	r3, [r0]
 8003b64:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8003b68:	1a5b      	subs	r3, r3, r1
 8003b6a:	105b      	asrs	r3, r3, #1
 8003b6c:	8093      	strh	r3, [r2, #4]
    pDst[(2U * fftLen) + 1U] = 0;
 8003b6e:	2100      	movs	r1, #0
 8003b70:	80d1      	strh	r1, [r2, #6]

    pDst[0] = (pSrc[0] + pSrc[1]) >> 1;
 8003b72:	f9b0 3000 	ldrsh.w	r3, [r0]
 8003b76:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	105b      	asrs	r3, r3, #1
 8003b7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003b80:	8013      	strh	r3, [r2, #0]
    pDst[1] = 0;
 8003b82:	8051      	strh	r1, [r2, #2]

    pDst[0] = (pSrc[0] + pSrc[1]) >> 1;
    pDst[1] = 0;

#endif /* #if defined (ARM_MATH_DSP) */
}
 8003b84:	b003      	add	sp, #12
 8003b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003b8a <arm_split_rifft_q15>:
#if defined (ARM_MATH_DSP)

    /* Run the below code for Cortex-M4 and Cortex-M3 */
    i = fftLen;

    while (i > 0U)
 8003b8a:	b341      	cbz	r1, 8003bde <arm_split_rifft_q15+0x54>
{
 8003b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b90:	ea4f 0c81 	mov.w	ip, r1, lsl #2
        *__SIMD32(pDst1)++ = __PKHBT((outI >> 16U), outR, 16);

#endif /*      #ifndef ARM_MATH_BIG_ENDIAN     */

        /* update coefficient pointer */
        pCoefB = pCoefB + (2U * modifier);
 8003b94:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8003b96:	ea4f 0884 	mov.w	r8, r4, lsl #2
 8003b9a:	f10c 0c04 	add.w	ip, ip, #4
 8003b9e:	4484      	add	ip, r0
 8003ba0:	3804      	subs	r0, #4
 8003ba2:	9c08      	ldr	r4, [sp, #32]
 8003ba4:	f1a4 0e04 	sub.w	lr, r4, #4
 8003ba8:	2700      	movs	r7, #0
        outR = __SMUSD(*__SIMD32(pSrc2), *__SIMD32(pCoefB));
 8003baa:	f85c 6d04 	ldr.w	r6, [ip, #-4]!
 8003bae:	59dc      	ldr	r4, [r3, r7]
  __ASM volatile ("smusd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003bb0:	fb46 f904 	smusd	r9, r6, r4
        outR = __SMLAD(*__SIMD32(pSrc1), *__SIMD32(pCoefA), outR) >> 16U;
 8003bb4:	f850 af04 	ldr.w	sl, [r0, #4]!
 8003bb8:	59d5      	ldr	r5, [r2, r7]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8003bba:	fb2a 9905 	smlad	r9, sl, r5, r9
  __ASM volatile ("smuadx %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 8003bbe:	fb26 f614 	smuadx	r6, r6, r4
        outI = __SMLSDX(*__SIMD32(pCoefA), *__SIMD32(pSrc1)++, -outI);
 8003bc2:	4274      	negs	r4, r6

__STATIC_FORCEINLINE uint32_t __SMLSDX (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlsdx %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 8003bc4:	fb45 451a 	smlsdx	r5, r5, sl, r4
        *__SIMD32(pDst1)++ = __PKHBT(outR, (outI >> 16U), 16);
 8003bc8:	0c2c      	lsrs	r4, r5, #16
 8003bca:	0424      	lsls	r4, r4, #16
 8003bcc:	ea44 4419 	orr.w	r4, r4, r9, lsr #16
 8003bd0:	f84e 4f04 	str.w	r4, [lr, #4]!
 8003bd4:	4447      	add	r7, r8
    while (i > 0U)
 8003bd6:	3901      	subs	r1, #1
 8003bd8:	d1e7      	bne.n	8003baa <arm_split_rifft_q15+0x20>
        pCoefA = pCoefA + (2U * modifier);

        i--;
    }
#endif /* #if defined (ARM_MATH_DSP) */
}
 8003bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bde:	4770      	bx	lr

08003be0 <arm_rfft_q15>:
{
 8003be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003be4:	b082      	sub	sp, #8
 8003be6:	4604      	mov	r4, r0
 8003be8:	4688      	mov	r8, r1
 8003bea:	4615      	mov	r5, r2
    const arm_cfft_instance_q15 *S_CFFT = S->pCfft;
 8003bec:	6947      	ldr	r7, [r0, #20]
    uint32_t L2 = S->fftLenReal >> 1;
 8003bee:	6806      	ldr	r6, [r0, #0]
 8003bf0:	0876      	lsrs	r6, r6, #1
    if (S->ifftFlagR == 1U)
 8003bf2:	7902      	ldrb	r2, [r0, #4]
 8003bf4:	2a01      	cmp	r2, #1
 8003bf6:	d00f      	beq.n	8003c18 <arm_rfft_q15+0x38>
        arm_cfft_q15(S_CFFT, pSrc, S->ifftFlagR, S->bitReverseFlagR);
 8003bf8:	7943      	ldrb	r3, [r0, #5]
 8003bfa:	4638      	mov	r0, r7
 8003bfc:	f7ff fc3d 	bl	800347a <arm_cfft_q15>
        arm_split_rfft_q15(pSrc, L2, S->pTwiddleAReal,
 8003c00:	6923      	ldr	r3, [r4, #16]
 8003c02:	68e2      	ldr	r2, [r4, #12]
 8003c04:	68a1      	ldr	r1, [r4, #8]
 8003c06:	9101      	str	r1, [sp, #4]
 8003c08:	9500      	str	r5, [sp, #0]
 8003c0a:	4631      	mov	r1, r6
 8003c0c:	4640      	mov	r0, r8
 8003c0e:	f7ff ff61 	bl	8003ad4 <arm_split_rfft_q15>
}
 8003c12:	b002      	add	sp, #8
 8003c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        arm_split_rifft_q15(pSrc, L2, S->pTwiddleAReal,
 8003c18:	6883      	ldr	r3, [r0, #8]
 8003c1a:	9301      	str	r3, [sp, #4]
 8003c1c:	9500      	str	r5, [sp, #0]
 8003c1e:	6903      	ldr	r3, [r0, #16]
 8003c20:	68c2      	ldr	r2, [r0, #12]
 8003c22:	4631      	mov	r1, r6
 8003c24:	4640      	mov	r0, r8
 8003c26:	f7ff ffb0 	bl	8003b8a <arm_split_rifft_q15>
        arm_cfft_q15(S_CFFT, pDst, S->ifftFlagR, S->bitReverseFlagR);
 8003c2a:	7963      	ldrb	r3, [r4, #5]
 8003c2c:	7922      	ldrb	r2, [r4, #4]
 8003c2e:	4629      	mov	r1, r5
 8003c30:	4638      	mov	r0, r7
 8003c32:	f7ff fc22 	bl	800347a <arm_cfft_q15>
        for(i=0;i<S->fftLenReal;i++)
 8003c36:	6823      	ldr	r3, [r4, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d0ea      	beq.n	8003c12 <arm_rfft_q15+0x32>
 8003c3c:	1eaa      	subs	r2, r5, #2
 8003c3e:	2100      	movs	r1, #0
            pDst[i] = pDst[i] << 1;
 8003c40:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	8013      	strh	r3, [r2, #0]
        for(i=0;i<S->fftLenReal;i++)
 8003c48:	3101      	adds	r1, #1
 8003c4a:	6823      	ldr	r3, [r4, #0]
 8003c4c:	428b      	cmp	r3, r1
 8003c4e:	d8f7      	bhi.n	8003c40 <arm_rfft_q15+0x60>
 8003c50:	e7df      	b.n	8003c12 <arm_rfft_q15+0x32>
	...

08003c54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c54:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c56:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <HAL_Init+0x30>)
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c5e:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c66:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c6e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c70:	2003      	movs	r0, #3
 8003c72:	f000 f82f 	bl	8003cd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c76:	2000      	movs	r0, #0
 8003c78:	f7ff f8ee 	bl	8002e58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c7c:	f7ff f8ca 	bl	8002e14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8003c80:	2000      	movs	r0, #0
 8003c82:	bd08      	pop	{r3, pc}
 8003c84:	40023c00 	.word	0x40023c00

08003c88 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003c88:	4a03      	ldr	r2, [pc, #12]	; (8003c98 <HAL_IncTick+0x10>)
 8003c8a:	6811      	ldr	r1, [r2, #0]
 8003c8c:	4b03      	ldr	r3, [pc, #12]	; (8003c9c <HAL_IncTick+0x14>)
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	440b      	add	r3, r1
 8003c92:	6013      	str	r3, [r2, #0]
}
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	2001a48c 	.word	0x2001a48c
 8003c9c:	20000c90 	.word	0x20000c90

08003ca0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003ca0:	4b01      	ldr	r3, [pc, #4]	; (8003ca8 <HAL_GetTick+0x8>)
 8003ca2:	6818      	ldr	r0, [r3, #0]
}
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	2001a48c 	.word	0x2001a48c

08003cac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003cac:	b538      	push	{r3, r4, r5, lr}
 8003cae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003cb0:	f7ff fff6 	bl	8003ca0 <HAL_GetTick>
 8003cb4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cb6:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003cba:	d002      	beq.n	8003cc2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8003cbc:	4b04      	ldr	r3, [pc, #16]	; (8003cd0 <HAL_Delay+0x24>)
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003cc2:	f7ff ffed 	bl	8003ca0 <HAL_GetTick>
 8003cc6:	1b40      	subs	r0, r0, r5
 8003cc8:	42a0      	cmp	r0, r4
 8003cca:	d3fa      	bcc.n	8003cc2 <HAL_Delay+0x16>
  {
  }
}
 8003ccc:	bd38      	pop	{r3, r4, r5, pc}
 8003cce:	bf00      	nop
 8003cd0:	20000c90 	.word	0x20000c90

08003cd4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cd4:	4a07      	ldr	r2, [pc, #28]	; (8003cf4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003cd6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cd8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003cdc:	041b      	lsls	r3, r3, #16
 8003cde:	0c1b      	lsrs	r3, r3, #16
 8003ce0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ce8:	0200      	lsls	r0, r0, #8
 8003cea:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8003cee:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8003cf0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003cf2:	4770      	bx	lr
 8003cf4:	e000ed00 	.word	0xe000ed00

08003cf8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cf8:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cfa:	4b16      	ldr	r3, [pc, #88]	; (8003d54 <HAL_NVIC_SetPriority+0x5c>)
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d02:	f1c3 0407 	rsb	r4, r3, #7
 8003d06:	2c04      	cmp	r4, #4
 8003d08:	bf28      	it	cs
 8003d0a:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d0c:	1d1d      	adds	r5, r3, #4
 8003d0e:	2d06      	cmp	r5, #6
 8003d10:	bf8c      	ite	hi
 8003d12:	3b03      	subhi	r3, #3
 8003d14:	2300      	movls	r3, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d16:	f04f 35ff 	mov.w	r5, #4294967295
 8003d1a:	fa05 f404 	lsl.w	r4, r5, r4
 8003d1e:	ea21 0104 	bic.w	r1, r1, r4
 8003d22:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d24:	fa05 f303 	lsl.w	r3, r5, r3
 8003d28:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d2c:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003d2e:	2800      	cmp	r0, #0
 8003d30:	db09      	blt.n	8003d46 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d32:	0109      	lsls	r1, r1, #4
 8003d34:	b2c9      	uxtb	r1, r1
 8003d36:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003d3a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003d3e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003d42:	bc30      	pop	{r4, r5}
 8003d44:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d46:	f000 000f 	and.w	r0, r0, #15
 8003d4a:	0109      	lsls	r1, r1, #4
 8003d4c:	b2c9      	uxtb	r1, r1
 8003d4e:	4b02      	ldr	r3, [pc, #8]	; (8003d58 <HAL_NVIC_SetPriority+0x60>)
 8003d50:	5419      	strb	r1, [r3, r0]
 8003d52:	e7f6      	b.n	8003d42 <HAL_NVIC_SetPriority+0x4a>
 8003d54:	e000ed00 	.word	0xe000ed00
 8003d58:	e000ed14 	.word	0xe000ed14

08003d5c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003d5c:	2800      	cmp	r0, #0
 8003d5e:	db08      	blt.n	8003d72 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d60:	0942      	lsrs	r2, r0, #5
 8003d62:	f000 001f 	and.w	r0, r0, #31
 8003d66:	2301      	movs	r3, #1
 8003d68:	fa03 f000 	lsl.w	r0, r3, r0
 8003d6c:	4b01      	ldr	r3, [pc, #4]	; (8003d74 <HAL_NVIC_EnableIRQ+0x18>)
 8003d6e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003d72:	4770      	bx	lr
 8003d74:	e000e100 	.word	0xe000e100

08003d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d7c:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d7e:	2500      	movs	r5, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d80:	4f6a      	ldr	r7, [pc, #424]	; (8003f2c <HAL_GPIO_Init+0x1b4>)

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d82:	f8df c1b4 	ldr.w	ip, [pc, #436]	; 8003f38 <HAL_GPIO_Init+0x1c0>
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d86:	4e6a      	ldr	r6, [pc, #424]	; (8003f30 <HAL_GPIO_Init+0x1b8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d88:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8003f3c <HAL_GPIO_Init+0x1c4>
 8003d8c:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 8003f40 <HAL_GPIO_Init+0x1c8>
 8003d90:	e044      	b.n	8003e1c <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8003d92:	08ec      	lsrs	r4, r5, #3
 8003d94:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8003d98:	f8d4 e020 	ldr.w	lr, [r4, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d9c:	f005 0207 	and.w	r2, r5, #7
 8003da0:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8003da4:	220f      	movs	r2, #15
 8003da6:	fa02 f20b 	lsl.w	r2, r2, fp
 8003daa:	ea2e 0e02 	bic.w	lr, lr, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003dae:	690a      	ldr	r2, [r1, #16]
 8003db0:	fa02 f20b 	lsl.w	r2, r2, fp
 8003db4:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 8003db8:	6222      	str	r2, [r4, #32]
 8003dba:	e03b      	b.n	8003e34 <HAL_GPIO_Init+0xbc>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	fa02 f20b 	lsl.w	r2, r2, fp
 8003dc2:	ea42 020e 	orr.w	r2, r2, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003dc6:	609a      	str	r2, [r3, #8]
        temp = EXTI->IMR;
 8003dc8:	6833      	ldr	r3, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 8003dca:	ea6f 0408 	mvn.w	r4, r8
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003dce:	684a      	ldr	r2, [r1, #4]
 8003dd0:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8003dd4:	bf0c      	ite	eq
 8003dd6:	4023      	andeq	r3, r4
        {
          temp |= iocurrent;
 8003dd8:	ea48 0303 	orrne.w	r3, r8, r3
        }
        EXTI->IMR = temp;
 8003ddc:	6033      	str	r3, [r6, #0]

        temp = EXTI->EMR;
 8003dde:	6873      	ldr	r3, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003de0:	684a      	ldr	r2, [r1, #4]
 8003de2:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8003de6:	bf0c      	ite	eq
 8003de8:	4023      	andeq	r3, r4
        {
          temp |= iocurrent;
 8003dea:	ea48 0303 	orrne.w	r3, r8, r3
        }
        EXTI->EMR = temp;
 8003dee:	6073      	str	r3, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003df0:	68b2      	ldr	r2, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003df2:	684b      	ldr	r3, [r1, #4]
 8003df4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8003df8:	bf0c      	ite	eq
 8003dfa:	4022      	andeq	r2, r4
        {
          temp |= iocurrent;
 8003dfc:	ea48 0202 	orrne.w	r2, r8, r2
        }
        EXTI->RTSR = temp;
 8003e00:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 8003e02:	68f3      	ldr	r3, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e04:	684a      	ldr	r2, [r1, #4]
 8003e06:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8003e0a:	bf0c      	ite	eq
 8003e0c:	4023      	andeq	r3, r4
        {
          temp |= iocurrent;
 8003e0e:	ea48 0303 	orrne.w	r3, r8, r3
        }
        EXTI->FTSR = temp;
 8003e12:	60f3      	str	r3, [r6, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e14:	3501      	adds	r5, #1
 8003e16:	2d10      	cmp	r5, #16
 8003e18:	f000 8085 	beq.w	8003f26 <HAL_GPIO_Init+0x1ae>
    ioposition = 0x01U << position;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	40ab      	lsls	r3, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e20:	680a      	ldr	r2, [r1, #0]
 8003e22:	ea03 0802 	and.w	r8, r3, r2
    if(iocurrent == ioposition)
 8003e26:	4543      	cmp	r3, r8
 8003e28:	d1f4      	bne.n	8003e14 <HAL_GPIO_Init+0x9c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e2a:	684a      	ldr	r2, [r1, #4]
 8003e2c:	f022 0210 	bic.w	r2, r2, #16
 8003e30:	2a02      	cmp	r2, #2
 8003e32:	d0ae      	beq.n	8003d92 <HAL_GPIO_Init+0x1a>
      temp = GPIOx->MODER;
 8003e34:	6804      	ldr	r4, [r0, #0]
 8003e36:	ea4f 0e45 	mov.w	lr, r5, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e3a:	2203      	movs	r2, #3
 8003e3c:	fa02 f20e 	lsl.w	r2, r2, lr
 8003e40:	43d2      	mvns	r2, r2
 8003e42:	ea02 0b04 	and.w	fp, r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e46:	684c      	ldr	r4, [r1, #4]
 8003e48:	f004 0403 	and.w	r4, r4, #3
 8003e4c:	fa04 f40e 	lsl.w	r4, r4, lr
 8003e50:	ea44 040b 	orr.w	r4, r4, fp
      GPIOx->MODER = temp;
 8003e54:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e56:	684c      	ldr	r4, [r1, #4]
 8003e58:	f024 0410 	bic.w	r4, r4, #16
 8003e5c:	3c01      	subs	r4, #1
 8003e5e:	2c01      	cmp	r4, #1
 8003e60:	d812      	bhi.n	8003e88 <HAL_GPIO_Init+0x110>
        temp = GPIOx->OSPEEDR; 
 8003e62:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e64:	ea02 0b04 	and.w	fp, r2, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e68:	68cc      	ldr	r4, [r1, #12]
 8003e6a:	fa04 f40e 	lsl.w	r4, r4, lr
 8003e6e:	ea44 040b 	orr.w	r4, r4, fp
        GPIOx->OSPEEDR = temp;
 8003e72:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8003e74:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e76:	ea24 0b03 	bic.w	fp, r4, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003e7a:	684c      	ldr	r4, [r1, #4]
 8003e7c:	f3c4 1300 	ubfx	r3, r4, #4, #1
 8003e80:	40ab      	lsls	r3, r5
 8003e82:	ea43 030b 	orr.w	r3, r3, fp
        GPIOx->OTYPER = temp;
 8003e86:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8003e88:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e8a:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e8c:	688b      	ldr	r3, [r1, #8]
 8003e8e:	fa03 f30e 	lsl.w	r3, r3, lr
 8003e92:	4313      	orrs	r3, r2
      GPIOx->PUPDR = temp;
 8003e94:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e96:	684b      	ldr	r3, [r1, #4]
 8003e98:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003e9c:	d0ba      	beq.n	8003e14 <HAL_GPIO_Init+0x9c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	9301      	str	r3, [sp, #4]
 8003ea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ea4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ea8:	647b      	str	r3, [r7, #68]	; 0x44
 8003eaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eb0:	9301      	str	r3, [sp, #4]
 8003eb2:	9b01      	ldr	r3, [sp, #4]
 8003eb4:	f025 0303 	bic.w	r3, r5, #3
 8003eb8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ebc:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
        temp = SYSCFG->EXTICR[position >> 2U];
 8003ec0:	689c      	ldr	r4, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ec2:	f005 0203 	and.w	r2, r5, #3
 8003ec6:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8003eca:	220f      	movs	r2, #15
 8003ecc:	fa02 f20b 	lsl.w	r2, r2, fp
 8003ed0:	ea24 0e02 	bic.w	lr, r4, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ed4:	4560      	cmp	r0, ip
 8003ed6:	f43f af71 	beq.w	8003dbc <HAL_GPIO_Init+0x44>
 8003eda:	4548      	cmp	r0, r9
 8003edc:	d017      	beq.n	8003f0e <HAL_GPIO_Init+0x196>
 8003ede:	4550      	cmp	r0, sl
 8003ee0:	d017      	beq.n	8003f12 <HAL_GPIO_Init+0x19a>
 8003ee2:	4a14      	ldr	r2, [pc, #80]	; (8003f34 <HAL_GPIO_Init+0x1bc>)
 8003ee4:	4290      	cmp	r0, r2
 8003ee6:	d016      	beq.n	8003f16 <HAL_GPIO_Init+0x19e>
 8003ee8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003eec:	4290      	cmp	r0, r2
 8003eee:	d014      	beq.n	8003f1a <HAL_GPIO_Init+0x1a2>
 8003ef0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ef4:	4290      	cmp	r0, r2
 8003ef6:	d012      	beq.n	8003f1e <HAL_GPIO_Init+0x1a6>
 8003ef8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003efc:	4290      	cmp	r0, r2
 8003efe:	d010      	beq.n	8003f22 <HAL_GPIO_Init+0x1aa>
 8003f00:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f04:	4290      	cmp	r0, r2
 8003f06:	bf0c      	ite	eq
 8003f08:	2207      	moveq	r2, #7
 8003f0a:	2208      	movne	r2, #8
 8003f0c:	e757      	b.n	8003dbe <HAL_GPIO_Init+0x46>
 8003f0e:	2201      	movs	r2, #1
 8003f10:	e755      	b.n	8003dbe <HAL_GPIO_Init+0x46>
 8003f12:	2202      	movs	r2, #2
 8003f14:	e753      	b.n	8003dbe <HAL_GPIO_Init+0x46>
 8003f16:	2203      	movs	r2, #3
 8003f18:	e751      	b.n	8003dbe <HAL_GPIO_Init+0x46>
 8003f1a:	2204      	movs	r2, #4
 8003f1c:	e74f      	b.n	8003dbe <HAL_GPIO_Init+0x46>
 8003f1e:	2205      	movs	r2, #5
 8003f20:	e74d      	b.n	8003dbe <HAL_GPIO_Init+0x46>
 8003f22:	2206      	movs	r2, #6
 8003f24:	e74b      	b.n	8003dbe <HAL_GPIO_Init+0x46>
      }
    }
  }
}
 8003f26:	b003      	add	sp, #12
 8003f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	40013c00 	.word	0x40013c00
 8003f34:	40020c00 	.word	0x40020c00
 8003f38:	40020000 	.word	0x40020000
 8003f3c:	40020400 	.word	0x40020400
 8003f40:	40020800 	.word	0x40020800

08003f44 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f44:	6903      	ldr	r3, [r0, #16]
 8003f46:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8003f48:	bf14      	ite	ne
 8003f4a:	2001      	movne	r0, #1
 8003f4c:	2000      	moveq	r0, #0
 8003f4e:	4770      	bx	lr

08003f50 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f50:	b912      	cbnz	r2, 8003f58 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f52:	0409      	lsls	r1, r1, #16
 8003f54:	6181      	str	r1, [r0, #24]
  }
}
 8003f56:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8003f58:	6181      	str	r1, [r0, #24]
 8003f5a:	4770      	bx	lr

08003f5c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f5c:	2800      	cmp	r0, #0
 8003f5e:	f000 81bd 	beq.w	80042dc <HAL_RCC_OscConfig+0x380>
{
 8003f62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f6a:	6803      	ldr	r3, [r0, #0]
 8003f6c:	f013 0f01 	tst.w	r3, #1
 8003f70:	d03b      	beq.n	8003fea <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f72:	4ba8      	ldr	r3, [pc, #672]	; (8004214 <HAL_RCC_OscConfig+0x2b8>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 030c 	and.w	r3, r3, #12
 8003f7a:	2b04      	cmp	r3, #4
 8003f7c:	d02c      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x7c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f7e:	4ba5      	ldr	r3, [pc, #660]	; (8004214 <HAL_RCC_OscConfig+0x2b8>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f86:	2b08      	cmp	r3, #8
 8003f88:	d021      	beq.n	8003fce <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f8a:	6863      	ldr	r3, [r4, #4]
 8003f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f90:	d04f      	beq.n	8004032 <HAL_RCC_OscConfig+0xd6>
 8003f92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f96:	d052      	beq.n	800403e <HAL_RCC_OscConfig+0xe2>
 8003f98:	4b9e      	ldr	r3, [pc, #632]	; (8004214 <HAL_RCC_OscConfig+0x2b8>)
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003fa8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003faa:	6863      	ldr	r3, [r4, #4]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d050      	beq.n	8004052 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb0:	f7ff fe76 	bl	8003ca0 <HAL_GetTick>
 8003fb4:	4606      	mov	r6, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fb6:	4d97      	ldr	r5, [pc, #604]	; (8004214 <HAL_RCC_OscConfig+0x2b8>)
 8003fb8:	682b      	ldr	r3, [r5, #0]
 8003fba:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003fbe:	d114      	bne.n	8003fea <HAL_RCC_OscConfig+0x8e>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fc0:	f7ff fe6e 	bl	8003ca0 <HAL_GetTick>
 8003fc4:	1b80      	subs	r0, r0, r6
 8003fc6:	2864      	cmp	r0, #100	; 0x64
 8003fc8:	d9f6      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x5c>
          {
            return HAL_TIMEOUT;
 8003fca:	2003      	movs	r0, #3
 8003fcc:	e18b      	b.n	80042e6 <HAL_RCC_OscConfig+0x38a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fce:	4b91      	ldr	r3, [pc, #580]	; (8004214 <HAL_RCC_OscConfig+0x2b8>)
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003fd6:	d0d8      	beq.n	8003f8a <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd8:	4b8e      	ldr	r3, [pc, #568]	; (8004214 <HAL_RCC_OscConfig+0x2b8>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003fe0:	d003      	beq.n	8003fea <HAL_RCC_OscConfig+0x8e>
 8003fe2:	6863      	ldr	r3, [r4, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 817b 	beq.w	80042e0 <HAL_RCC_OscConfig+0x384>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fea:	6823      	ldr	r3, [r4, #0]
 8003fec:	f013 0f02 	tst.w	r3, #2
 8003ff0:	d055      	beq.n	800409e <HAL_RCC_OscConfig+0x142>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ff2:	4b88      	ldr	r3, [pc, #544]	; (8004214 <HAL_RCC_OscConfig+0x2b8>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f013 0f0c 	tst.w	r3, #12
 8003ffa:	d03e      	beq.n	800407a <HAL_RCC_OscConfig+0x11e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ffc:	4b85      	ldr	r3, [pc, #532]	; (8004214 <HAL_RCC_OscConfig+0x2b8>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004004:	2b08      	cmp	r3, #8
 8004006:	d033      	beq.n	8004070 <HAL_RCC_OscConfig+0x114>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004008:	68e3      	ldr	r3, [r4, #12]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d068      	beq.n	80040e0 <HAL_RCC_OscConfig+0x184>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800400e:	4b82      	ldr	r3, [pc, #520]	; (8004218 <HAL_RCC_OscConfig+0x2bc>)
 8004010:	2201      	movs	r2, #1
 8004012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004014:	f7ff fe44 	bl	8003ca0 <HAL_GetTick>
 8004018:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800401a:	4d7e      	ldr	r5, [pc, #504]	; (8004214 <HAL_RCC_OscConfig+0x2b8>)
 800401c:	682b      	ldr	r3, [r5, #0]
 800401e:	f013 0f02 	tst.w	r3, #2
 8004022:	d154      	bne.n	80040ce <HAL_RCC_OscConfig+0x172>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004024:	f7ff fe3c 	bl	8003ca0 <HAL_GetTick>
 8004028:	1b80      	subs	r0, r0, r6
 800402a:	2802      	cmp	r0, #2
 800402c:	d9f6      	bls.n	800401c <HAL_RCC_OscConfig+0xc0>
          {
            return HAL_TIMEOUT;
 800402e:	2003      	movs	r0, #3
 8004030:	e159      	b.n	80042e6 <HAL_RCC_OscConfig+0x38a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004032:	4a78      	ldr	r2, [pc, #480]	; (8004214 <HAL_RCC_OscConfig+0x2b8>)
 8004034:	6813      	ldr	r3, [r2, #0]
 8004036:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800403a:	6013      	str	r3, [r2, #0]
 800403c:	e7b5      	b.n	8003faa <HAL_RCC_OscConfig+0x4e>
 800403e:	4b75      	ldr	r3, [pc, #468]	; (8004214 <HAL_RCC_OscConfig+0x2b8>)
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	e7ab      	b.n	8003faa <HAL_RCC_OscConfig+0x4e>
        tickstart = HAL_GetTick();
 8004052:	f7ff fe25 	bl	8003ca0 <HAL_GetTick>
 8004056:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004058:	4d6e      	ldr	r5, [pc, #440]	; (8004214 <HAL_RCC_OscConfig+0x2b8>)
 800405a:	682b      	ldr	r3, [r5, #0]
 800405c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004060:	d0c3      	beq.n	8003fea <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004062:	f7ff fe1d 	bl	8003ca0 <HAL_GetTick>
 8004066:	1b80      	subs	r0, r0, r6
 8004068:	2864      	cmp	r0, #100	; 0x64
 800406a:	d9f6      	bls.n	800405a <HAL_RCC_OscConfig+0xfe>
            return HAL_TIMEOUT;
 800406c:	2003      	movs	r0, #3
 800406e:	e13a      	b.n	80042e6 <HAL_RCC_OscConfig+0x38a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004070:	4b68      	ldr	r3, [pc, #416]	; (8004214 <HAL_RCC_OscConfig+0x2b8>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004078:	d1c6      	bne.n	8004008 <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800407a:	4b66      	ldr	r3, [pc, #408]	; (8004214 <HAL_RCC_OscConfig+0x2b8>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f013 0f02 	tst.w	r3, #2
 8004082:	d004      	beq.n	800408e <HAL_RCC_OscConfig+0x132>
 8004084:	68e3      	ldr	r3, [r4, #12]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d001      	beq.n	800408e <HAL_RCC_OscConfig+0x132>
        return HAL_ERROR;
 800408a:	2001      	movs	r0, #1
 800408c:	e12b      	b.n	80042e6 <HAL_RCC_OscConfig+0x38a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800408e:	4a61      	ldr	r2, [pc, #388]	; (8004214 <HAL_RCC_OscConfig+0x2b8>)
 8004090:	6813      	ldr	r3, [r2, #0]
 8004092:	6921      	ldr	r1, [r4, #16]
 8004094:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004098:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800409c:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800409e:	6823      	ldr	r3, [r4, #0]
 80040a0:	f013 0f08 	tst.w	r3, #8
 80040a4:	d040      	beq.n	8004128 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040a6:	6963      	ldr	r3, [r4, #20]
 80040a8:	b363      	cbz	r3, 8004104 <HAL_RCC_OscConfig+0x1a8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040aa:	4b5c      	ldr	r3, [pc, #368]	; (800421c <HAL_RCC_OscConfig+0x2c0>)
 80040ac:	2201      	movs	r2, #1
 80040ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b0:	f7ff fdf6 	bl	8003ca0 <HAL_GetTick>
 80040b4:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040b6:	4d57      	ldr	r5, [pc, #348]	; (8004214 <HAL_RCC_OscConfig+0x2b8>)
 80040b8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80040ba:	f013 0f02 	tst.w	r3, #2
 80040be:	d133      	bne.n	8004128 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040c0:	f7ff fdee 	bl	8003ca0 <HAL_GetTick>
 80040c4:	1b80      	subs	r0, r0, r6
 80040c6:	2802      	cmp	r0, #2
 80040c8:	d9f6      	bls.n	80040b8 <HAL_RCC_OscConfig+0x15c>
        {
          return HAL_TIMEOUT;
 80040ca:	2003      	movs	r0, #3
 80040cc:	e10b      	b.n	80042e6 <HAL_RCC_OscConfig+0x38a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040ce:	4a51      	ldr	r2, [pc, #324]	; (8004214 <HAL_RCC_OscConfig+0x2b8>)
 80040d0:	6813      	ldr	r3, [r2, #0]
 80040d2:	6921      	ldr	r1, [r4, #16]
 80040d4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80040d8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80040dc:	6013      	str	r3, [r2, #0]
 80040de:	e7de      	b.n	800409e <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_DISABLE();
 80040e0:	4b4d      	ldr	r3, [pc, #308]	; (8004218 <HAL_RCC_OscConfig+0x2bc>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80040e6:	f7ff fddb 	bl	8003ca0 <HAL_GetTick>
 80040ea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ec:	4d49      	ldr	r5, [pc, #292]	; (8004214 <HAL_RCC_OscConfig+0x2b8>)
 80040ee:	682b      	ldr	r3, [r5, #0]
 80040f0:	f013 0f02 	tst.w	r3, #2
 80040f4:	d0d3      	beq.n	800409e <HAL_RCC_OscConfig+0x142>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040f6:	f7ff fdd3 	bl	8003ca0 <HAL_GetTick>
 80040fa:	1b80      	subs	r0, r0, r6
 80040fc:	2802      	cmp	r0, #2
 80040fe:	d9f6      	bls.n	80040ee <HAL_RCC_OscConfig+0x192>
            return HAL_TIMEOUT;
 8004100:	2003      	movs	r0, #3
 8004102:	e0f0      	b.n	80042e6 <HAL_RCC_OscConfig+0x38a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004104:	4b45      	ldr	r3, [pc, #276]	; (800421c <HAL_RCC_OscConfig+0x2c0>)
 8004106:	2200      	movs	r2, #0
 8004108:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800410a:	f7ff fdc9 	bl	8003ca0 <HAL_GetTick>
 800410e:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004110:	4d40      	ldr	r5, [pc, #256]	; (8004214 <HAL_RCC_OscConfig+0x2b8>)
 8004112:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004114:	f013 0f02 	tst.w	r3, #2
 8004118:	d006      	beq.n	8004128 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800411a:	f7ff fdc1 	bl	8003ca0 <HAL_GetTick>
 800411e:	1b80      	subs	r0, r0, r6
 8004120:	2802      	cmp	r0, #2
 8004122:	d9f6      	bls.n	8004112 <HAL_RCC_OscConfig+0x1b6>
        {
          return HAL_TIMEOUT;
 8004124:	2003      	movs	r0, #3
 8004126:	e0de      	b.n	80042e6 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004128:	6823      	ldr	r3, [r4, #0]
 800412a:	f013 0f04 	tst.w	r3, #4
 800412e:	d07a      	beq.n	8004226 <HAL_RCC_OscConfig+0x2ca>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004130:	4b38      	ldr	r3, [pc, #224]	; (8004214 <HAL_RCC_OscConfig+0x2b8>)
 8004132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004134:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8004138:	d134      	bne.n	80041a4 <HAL_RCC_OscConfig+0x248>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800413a:	2300      	movs	r3, #0
 800413c:	9301      	str	r3, [sp, #4]
 800413e:	4b35      	ldr	r3, [pc, #212]	; (8004214 <HAL_RCC_OscConfig+0x2b8>)
 8004140:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004142:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004146:	641a      	str	r2, [r3, #64]	; 0x40
 8004148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800414e:	9301      	str	r3, [sp, #4]
 8004150:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004152:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004154:	4b32      	ldr	r3, [pc, #200]	; (8004220 <HAL_RCC_OscConfig+0x2c4>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f413 7f80 	tst.w	r3, #256	; 0x100
 800415c:	d024      	beq.n	80041a8 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800415e:	68a3      	ldr	r3, [r4, #8]
 8004160:	2b01      	cmp	r3, #1
 8004162:	d035      	beq.n	80041d0 <HAL_RCC_OscConfig+0x274>
 8004164:	2b05      	cmp	r3, #5
 8004166:	d039      	beq.n	80041dc <HAL_RCC_OscConfig+0x280>
 8004168:	4b2a      	ldr	r3, [pc, #168]	; (8004214 <HAL_RCC_OscConfig+0x2b8>)
 800416a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800416c:	f022 0201 	bic.w	r2, r2, #1
 8004170:	671a      	str	r2, [r3, #112]	; 0x70
 8004172:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004174:	f022 0204 	bic.w	r2, r2, #4
 8004178:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800417a:	68a3      	ldr	r3, [r4, #8]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d037      	beq.n	80041f0 <HAL_RCC_OscConfig+0x294>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004180:	f7ff fd8e 	bl	8003ca0 <HAL_GetTick>
 8004184:	4680      	mov	r8, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004186:	4e23      	ldr	r6, [pc, #140]	; (8004214 <HAL_RCC_OscConfig+0x2b8>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004188:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800418c:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800418e:	f013 0f02 	tst.w	r3, #2
 8004192:	d147      	bne.n	8004224 <HAL_RCC_OscConfig+0x2c8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004194:	f7ff fd84 	bl	8003ca0 <HAL_GetTick>
 8004198:	eba0 0008 	sub.w	r0, r0, r8
 800419c:	42b8      	cmp	r0, r7
 800419e:	d9f5      	bls.n	800418c <HAL_RCC_OscConfig+0x230>
        {
          return HAL_TIMEOUT;
 80041a0:	2003      	movs	r0, #3
 80041a2:	e0a0      	b.n	80042e6 <HAL_RCC_OscConfig+0x38a>
    FlagStatus       pwrclkchanged = RESET;
 80041a4:	2500      	movs	r5, #0
 80041a6:	e7d5      	b.n	8004154 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041a8:	4a1d      	ldr	r2, [pc, #116]	; (8004220 <HAL_RCC_OscConfig+0x2c4>)
 80041aa:	6813      	ldr	r3, [r2, #0]
 80041ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041b0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80041b2:	f7ff fd75 	bl	8003ca0 <HAL_GetTick>
 80041b6:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b8:	4e19      	ldr	r6, [pc, #100]	; (8004220 <HAL_RCC_OscConfig+0x2c4>)
 80041ba:	6833      	ldr	r3, [r6, #0]
 80041bc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80041c0:	d1cd      	bne.n	800415e <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041c2:	f7ff fd6d 	bl	8003ca0 <HAL_GetTick>
 80041c6:	1bc0      	subs	r0, r0, r7
 80041c8:	2802      	cmp	r0, #2
 80041ca:	d9f6      	bls.n	80041ba <HAL_RCC_OscConfig+0x25e>
          return HAL_TIMEOUT;
 80041cc:	2003      	movs	r0, #3
 80041ce:	e08a      	b.n	80042e6 <HAL_RCC_OscConfig+0x38a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041d0:	4a10      	ldr	r2, [pc, #64]	; (8004214 <HAL_RCC_OscConfig+0x2b8>)
 80041d2:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80041d4:	f043 0301 	orr.w	r3, r3, #1
 80041d8:	6713      	str	r3, [r2, #112]	; 0x70
 80041da:	e7ce      	b.n	800417a <HAL_RCC_OscConfig+0x21e>
 80041dc:	4b0d      	ldr	r3, [pc, #52]	; (8004214 <HAL_RCC_OscConfig+0x2b8>)
 80041de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041e0:	f042 0204 	orr.w	r2, r2, #4
 80041e4:	671a      	str	r2, [r3, #112]	; 0x70
 80041e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041e8:	f042 0201 	orr.w	r2, r2, #1
 80041ec:	671a      	str	r2, [r3, #112]	; 0x70
 80041ee:	e7c4      	b.n	800417a <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041f0:	f7ff fd56 	bl	8003ca0 <HAL_GetTick>
 80041f4:	4680      	mov	r8, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041f6:	4e07      	ldr	r6, [pc, #28]	; (8004214 <HAL_RCC_OscConfig+0x2b8>)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041f8:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041fc:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80041fe:	f013 0f02 	tst.w	r3, #2
 8004202:	d00f      	beq.n	8004224 <HAL_RCC_OscConfig+0x2c8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004204:	f7ff fd4c 	bl	8003ca0 <HAL_GetTick>
 8004208:	eba0 0008 	sub.w	r0, r0, r8
 800420c:	42b8      	cmp	r0, r7
 800420e:	d9f5      	bls.n	80041fc <HAL_RCC_OscConfig+0x2a0>
        {
          return HAL_TIMEOUT;
 8004210:	2003      	movs	r0, #3
 8004212:	e068      	b.n	80042e6 <HAL_RCC_OscConfig+0x38a>
 8004214:	40023800 	.word	0x40023800
 8004218:	42470000 	.word	0x42470000
 800421c:	42470e80 	.word	0x42470e80
 8004220:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004224:	b9e5      	cbnz	r5, 8004260 <HAL_RCC_OscConfig+0x304>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004226:	69a3      	ldr	r3, [r4, #24]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d05b      	beq.n	80042e4 <HAL_RCC_OscConfig+0x388>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800422c:	4a30      	ldr	r2, [pc, #192]	; (80042f0 <HAL_RCC_OscConfig+0x394>)
 800422e:	6892      	ldr	r2, [r2, #8]
 8004230:	f002 020c 	and.w	r2, r2, #12
 8004234:	2a08      	cmp	r2, #8
 8004236:	d059      	beq.n	80042ec <HAL_RCC_OscConfig+0x390>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004238:	2b02      	cmp	r3, #2
 800423a:	d017      	beq.n	800426c <HAL_RCC_OscConfig+0x310>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800423c:	4b2d      	ldr	r3, [pc, #180]	; (80042f4 <HAL_RCC_OscConfig+0x398>)
 800423e:	2200      	movs	r2, #0
 8004240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004242:	f7ff fd2d 	bl	8003ca0 <HAL_GetTick>
 8004246:	4605      	mov	r5, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004248:	4c29      	ldr	r4, [pc, #164]	; (80042f0 <HAL_RCC_OscConfig+0x394>)
 800424a:	6823      	ldr	r3, [r4, #0]
 800424c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004250:	d042      	beq.n	80042d8 <HAL_RCC_OscConfig+0x37c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004252:	f7ff fd25 	bl	8003ca0 <HAL_GetTick>
 8004256:	1b40      	subs	r0, r0, r5
 8004258:	2802      	cmp	r0, #2
 800425a:	d9f6      	bls.n	800424a <HAL_RCC_OscConfig+0x2ee>
          {
            return HAL_TIMEOUT;
 800425c:	2003      	movs	r0, #3
 800425e:	e042      	b.n	80042e6 <HAL_RCC_OscConfig+0x38a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004260:	4a23      	ldr	r2, [pc, #140]	; (80042f0 <HAL_RCC_OscConfig+0x394>)
 8004262:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004264:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004268:	6413      	str	r3, [r2, #64]	; 0x40
 800426a:	e7dc      	b.n	8004226 <HAL_RCC_OscConfig+0x2ca>
        __HAL_RCC_PLL_DISABLE();
 800426c:	4b21      	ldr	r3, [pc, #132]	; (80042f4 <HAL_RCC_OscConfig+0x398>)
 800426e:	2200      	movs	r2, #0
 8004270:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004272:	f7ff fd15 	bl	8003ca0 <HAL_GetTick>
 8004276:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004278:	4d1d      	ldr	r5, [pc, #116]	; (80042f0 <HAL_RCC_OscConfig+0x394>)
 800427a:	682b      	ldr	r3, [r5, #0]
 800427c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004280:	d006      	beq.n	8004290 <HAL_RCC_OscConfig+0x334>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004282:	f7ff fd0d 	bl	8003ca0 <HAL_GetTick>
 8004286:	1b80      	subs	r0, r0, r6
 8004288:	2802      	cmp	r0, #2
 800428a:	d9f6      	bls.n	800427a <HAL_RCC_OscConfig+0x31e>
            return HAL_TIMEOUT;
 800428c:	2003      	movs	r0, #3
 800428e:	e02a      	b.n	80042e6 <HAL_RCC_OscConfig+0x38a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004290:	69e3      	ldr	r3, [r4, #28]
 8004292:	6a22      	ldr	r2, [r4, #32]
 8004294:	4313      	orrs	r3, r2
 8004296:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004298:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800429c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800429e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80042a2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80042a4:	0852      	lsrs	r2, r2, #1
 80042a6:	3a01      	subs	r2, #1
 80042a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80042ac:	4a10      	ldr	r2, [pc, #64]	; (80042f0 <HAL_RCC_OscConfig+0x394>)
 80042ae:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80042b0:	4b10      	ldr	r3, [pc, #64]	; (80042f4 <HAL_RCC_OscConfig+0x398>)
 80042b2:	2201      	movs	r2, #1
 80042b4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80042b6:	f7ff fcf3 	bl	8003ca0 <HAL_GetTick>
 80042ba:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042bc:	4c0c      	ldr	r4, [pc, #48]	; (80042f0 <HAL_RCC_OscConfig+0x394>)
 80042be:	6823      	ldr	r3, [r4, #0]
 80042c0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80042c4:	d106      	bne.n	80042d4 <HAL_RCC_OscConfig+0x378>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042c6:	f7ff fceb 	bl	8003ca0 <HAL_GetTick>
 80042ca:	1b40      	subs	r0, r0, r5
 80042cc:	2802      	cmp	r0, #2
 80042ce:	d9f6      	bls.n	80042be <HAL_RCC_OscConfig+0x362>
            return HAL_TIMEOUT;
 80042d0:	2003      	movs	r0, #3
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0x38a>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80042d4:	2000      	movs	r0, #0
 80042d6:	e006      	b.n	80042e6 <HAL_RCC_OscConfig+0x38a>
 80042d8:	2000      	movs	r0, #0
 80042da:	e004      	b.n	80042e6 <HAL_RCC_OscConfig+0x38a>
    return HAL_ERROR;
 80042dc:	2001      	movs	r0, #1
}
 80042de:	4770      	bx	lr
        return HAL_ERROR;
 80042e0:	2001      	movs	r0, #1
 80042e2:	e000      	b.n	80042e6 <HAL_RCC_OscConfig+0x38a>
  return HAL_OK;
 80042e4:	2000      	movs	r0, #0
}
 80042e6:	b002      	add	sp, #8
 80042e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_ERROR;
 80042ec:	2001      	movs	r0, #1
 80042ee:	e7fa      	b.n	80042e6 <HAL_RCC_OscConfig+0x38a>
 80042f0:	40023800 	.word	0x40023800
 80042f4:	42470060 	.word	0x42470060

080042f8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042f8:	4b32      	ldr	r3, [pc, #200]	; (80043c4 <HAL_RCC_GetSysClockFreq+0xcc>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f003 030c 	and.w	r3, r3, #12
 8004300:	2b04      	cmp	r3, #4
 8004302:	d003      	beq.n	800430c <HAL_RCC_GetSysClockFreq+0x14>
 8004304:	2b08      	cmp	r3, #8
 8004306:	d003      	beq.n	8004310 <HAL_RCC_GetSysClockFreq+0x18>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004308:	482f      	ldr	r0, [pc, #188]	; (80043c8 <HAL_RCC_GetSysClockFreq+0xd0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800430a:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800430c:	482f      	ldr	r0, [pc, #188]	; (80043cc <HAL_RCC_GetSysClockFreq+0xd4>)
 800430e:	4770      	bx	lr
{
 8004310:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004314:	4b2b      	ldr	r3, [pc, #172]	; (80043c4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8004322:	d02b      	beq.n	800437c <HAL_RCC_GetSysClockFreq+0x84>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004324:	4b27      	ldr	r3, [pc, #156]	; (80043c4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800432c:	461e      	mov	r6, r3
 800432e:	2700      	movs	r7, #0
 8004330:	015c      	lsls	r4, r3, #5
 8004332:	2500      	movs	r5, #0
 8004334:	1ae4      	subs	r4, r4, r3
 8004336:	eb65 0507 	sbc.w	r5, r5, r7
 800433a:	01a9      	lsls	r1, r5, #6
 800433c:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8004340:	01a0      	lsls	r0, r4, #6
 8004342:	1b00      	subs	r0, r0, r4
 8004344:	eb61 0105 	sbc.w	r1, r1, r5
 8004348:	00cb      	lsls	r3, r1, #3
 800434a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800434e:	00c4      	lsls	r4, r0, #3
 8004350:	19a0      	adds	r0, r4, r6
 8004352:	eb43 0107 	adc.w	r1, r3, r7
 8004356:	024b      	lsls	r3, r1, #9
 8004358:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 800435c:	0244      	lsls	r4, r0, #9
 800435e:	4620      	mov	r0, r4
 8004360:	4619      	mov	r1, r3
 8004362:	2300      	movs	r3, #0
 8004364:	f7fc fcb2 	bl	8000ccc <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004368:	4b16      	ldr	r3, [pc, #88]	; (80043c4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004370:	3301      	adds	r3, #1
 8004372:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8004374:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8004378:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800437c:	4b11      	ldr	r3, [pc, #68]	; (80043c4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8004384:	461e      	mov	r6, r3
 8004386:	2700      	movs	r7, #0
 8004388:	015c      	lsls	r4, r3, #5
 800438a:	2500      	movs	r5, #0
 800438c:	1ae4      	subs	r4, r4, r3
 800438e:	eb65 0507 	sbc.w	r5, r5, r7
 8004392:	01a9      	lsls	r1, r5, #6
 8004394:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8004398:	01a0      	lsls	r0, r4, #6
 800439a:	1b00      	subs	r0, r0, r4
 800439c:	eb61 0105 	sbc.w	r1, r1, r5
 80043a0:	00cb      	lsls	r3, r1, #3
 80043a2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80043a6:	00c4      	lsls	r4, r0, #3
 80043a8:	19a0      	adds	r0, r4, r6
 80043aa:	eb43 0107 	adc.w	r1, r3, r7
 80043ae:	028b      	lsls	r3, r1, #10
 80043b0:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 80043b4:	0284      	lsls	r4, r0, #10
 80043b6:	4620      	mov	r0, r4
 80043b8:	4619      	mov	r1, r3
 80043ba:	2300      	movs	r3, #0
 80043bc:	f7fc fc86 	bl	8000ccc <__aeabi_uldivmod>
 80043c0:	e7d2      	b.n	8004368 <HAL_RCC_GetSysClockFreq+0x70>
 80043c2:	bf00      	nop
 80043c4:	40023800 	.word	0x40023800
 80043c8:	00f42400 	.word	0x00f42400
 80043cc:	007a1200 	.word	0x007a1200

080043d0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80043d0:	2800      	cmp	r0, #0
 80043d2:	f000 80a0 	beq.w	8004516 <HAL_RCC_ClockConfig+0x146>
{
 80043d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043da:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043dc:	4b50      	ldr	r3, [pc, #320]	; (8004520 <HAL_RCC_ClockConfig+0x150>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 030f 	and.w	r3, r3, #15
 80043e4:	428b      	cmp	r3, r1
 80043e6:	d20a      	bcs.n	80043fe <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043e8:	b2cb      	uxtb	r3, r1
 80043ea:	4a4d      	ldr	r2, [pc, #308]	; (8004520 <HAL_RCC_ClockConfig+0x150>)
 80043ec:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ee:	6813      	ldr	r3, [r2, #0]
 80043f0:	f003 030f 	and.w	r3, r3, #15
 80043f4:	428b      	cmp	r3, r1
 80043f6:	d002      	beq.n	80043fe <HAL_RCC_ClockConfig+0x2e>
      return HAL_ERROR;
 80043f8:	2001      	movs	r0, #1
}
 80043fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043fe:	6823      	ldr	r3, [r4, #0]
 8004400:	f013 0f02 	tst.w	r3, #2
 8004404:	d017      	beq.n	8004436 <HAL_RCC_ClockConfig+0x66>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004406:	f013 0f04 	tst.w	r3, #4
 800440a:	d004      	beq.n	8004416 <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800440c:	4a45      	ldr	r2, [pc, #276]	; (8004524 <HAL_RCC_ClockConfig+0x154>)
 800440e:	6893      	ldr	r3, [r2, #8]
 8004410:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004414:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004416:	6823      	ldr	r3, [r4, #0]
 8004418:	f013 0f08 	tst.w	r3, #8
 800441c:	d004      	beq.n	8004428 <HAL_RCC_ClockConfig+0x58>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800441e:	4a41      	ldr	r2, [pc, #260]	; (8004524 <HAL_RCC_ClockConfig+0x154>)
 8004420:	6893      	ldr	r3, [r2, #8]
 8004422:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004426:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004428:	4a3e      	ldr	r2, [pc, #248]	; (8004524 <HAL_RCC_ClockConfig+0x154>)
 800442a:	6893      	ldr	r3, [r2, #8]
 800442c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004430:	68a0      	ldr	r0, [r4, #8]
 8004432:	4303      	orrs	r3, r0
 8004434:	6093      	str	r3, [r2, #8]
 8004436:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004438:	6823      	ldr	r3, [r4, #0]
 800443a:	f013 0f01 	tst.w	r3, #1
 800443e:	d033      	beq.n	80044a8 <HAL_RCC_ClockConfig+0xd8>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004440:	6862      	ldr	r2, [r4, #4]
 8004442:	2a01      	cmp	r2, #1
 8004444:	d022      	beq.n	800448c <HAL_RCC_ClockConfig+0xbc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004446:	1e93      	subs	r3, r2, #2
 8004448:	2b01      	cmp	r3, #1
 800444a:	d926      	bls.n	800449a <HAL_RCC_ClockConfig+0xca>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800444c:	4b35      	ldr	r3, [pc, #212]	; (8004524 <HAL_RCC_ClockConfig+0x154>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f013 0f02 	tst.w	r3, #2
 8004454:	d061      	beq.n	800451a <HAL_RCC_ClockConfig+0x14a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004456:	4933      	ldr	r1, [pc, #204]	; (8004524 <HAL_RCC_ClockConfig+0x154>)
 8004458:	688b      	ldr	r3, [r1, #8]
 800445a:	f023 0303 	bic.w	r3, r3, #3
 800445e:	4313      	orrs	r3, r2
 8004460:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004462:	f7ff fc1d 	bl	8003ca0 <HAL_GetTick>
 8004466:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004468:	4e2e      	ldr	r6, [pc, #184]	; (8004524 <HAL_RCC_ClockConfig+0x154>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800446a:	f241 3788 	movw	r7, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800446e:	68b3      	ldr	r3, [r6, #8]
 8004470:	f003 030c 	and.w	r3, r3, #12
 8004474:	6862      	ldr	r2, [r4, #4]
 8004476:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800447a:	d015      	beq.n	80044a8 <HAL_RCC_ClockConfig+0xd8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800447c:	f7ff fc10 	bl	8003ca0 <HAL_GetTick>
 8004480:	eba0 0008 	sub.w	r0, r0, r8
 8004484:	42b8      	cmp	r0, r7
 8004486:	d9f2      	bls.n	800446e <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 8004488:	2003      	movs	r0, #3
 800448a:	e7b6      	b.n	80043fa <HAL_RCC_ClockConfig+0x2a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800448c:	4b25      	ldr	r3, [pc, #148]	; (8004524 <HAL_RCC_ClockConfig+0x154>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8004494:	d1df      	bne.n	8004456 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8004496:	2001      	movs	r0, #1
 8004498:	e7af      	b.n	80043fa <HAL_RCC_ClockConfig+0x2a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800449a:	4b22      	ldr	r3, [pc, #136]	; (8004524 <HAL_RCC_ClockConfig+0x154>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80044a2:	d1d8      	bne.n	8004456 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 80044a4:	2001      	movs	r0, #1
 80044a6:	e7a8      	b.n	80043fa <HAL_RCC_ClockConfig+0x2a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044a8:	4b1d      	ldr	r3, [pc, #116]	; (8004520 <HAL_RCC_ClockConfig+0x150>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 030f 	and.w	r3, r3, #15
 80044b0:	42ab      	cmp	r3, r5
 80044b2:	d909      	bls.n	80044c8 <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b4:	b2ea      	uxtb	r2, r5
 80044b6:	4b1a      	ldr	r3, [pc, #104]	; (8004520 <HAL_RCC_ClockConfig+0x150>)
 80044b8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 030f 	and.w	r3, r3, #15
 80044c0:	42ab      	cmp	r3, r5
 80044c2:	d001      	beq.n	80044c8 <HAL_RCC_ClockConfig+0xf8>
      return HAL_ERROR;
 80044c4:	2001      	movs	r0, #1
 80044c6:	e798      	b.n	80043fa <HAL_RCC_ClockConfig+0x2a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044c8:	6823      	ldr	r3, [r4, #0]
 80044ca:	f013 0f04 	tst.w	r3, #4
 80044ce:	d006      	beq.n	80044de <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044d0:	4a14      	ldr	r2, [pc, #80]	; (8004524 <HAL_RCC_ClockConfig+0x154>)
 80044d2:	6893      	ldr	r3, [r2, #8]
 80044d4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80044d8:	68e1      	ldr	r1, [r4, #12]
 80044da:	430b      	orrs	r3, r1
 80044dc:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044de:	6823      	ldr	r3, [r4, #0]
 80044e0:	f013 0f08 	tst.w	r3, #8
 80044e4:	d007      	beq.n	80044f6 <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044e6:	4a0f      	ldr	r2, [pc, #60]	; (8004524 <HAL_RCC_ClockConfig+0x154>)
 80044e8:	6893      	ldr	r3, [r2, #8]
 80044ea:	6921      	ldr	r1, [r4, #16]
 80044ec:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80044f0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80044f4:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044f6:	f7ff feff 	bl	80042f8 <HAL_RCC_GetSysClockFreq>
 80044fa:	4b0a      	ldr	r3, [pc, #40]	; (8004524 <HAL_RCC_ClockConfig+0x154>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004502:	4a09      	ldr	r2, [pc, #36]	; (8004528 <HAL_RCC_ClockConfig+0x158>)
 8004504:	5cd3      	ldrb	r3, [r2, r3]
 8004506:	40d8      	lsrs	r0, r3
 8004508:	4b08      	ldr	r3, [pc, #32]	; (800452c <HAL_RCC_ClockConfig+0x15c>)
 800450a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800450c:	2000      	movs	r0, #0
 800450e:	f7fe fca3 	bl	8002e58 <HAL_InitTick>
  return HAL_OK;
 8004512:	2000      	movs	r0, #0
 8004514:	e771      	b.n	80043fa <HAL_RCC_ClockConfig+0x2a>
    return HAL_ERROR;
 8004516:	2001      	movs	r0, #1
}
 8004518:	4770      	bx	lr
        return HAL_ERROR;
 800451a:	2001      	movs	r0, #1
 800451c:	e76d      	b.n	80043fa <HAL_RCC_ClockConfig+0x2a>
 800451e:	bf00      	nop
 8004520:	40023c00 	.word	0x40023c00
 8004524:	40023800 	.word	0x40023800
 8004528:	08008280 	.word	0x08008280
 800452c:	20000c8c 	.word	0x20000c8c

08004530 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004530:	4b04      	ldr	r3, [pc, #16]	; (8004544 <HAL_RCC_GetPCLK2Freq+0x14>)
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8004538:	4a03      	ldr	r2, [pc, #12]	; (8004548 <HAL_RCC_GetPCLK2Freq+0x18>)
 800453a:	5cd3      	ldrb	r3, [r2, r3]
 800453c:	4a03      	ldr	r2, [pc, #12]	; (800454c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800453e:	6810      	ldr	r0, [r2, #0]
}
 8004540:	40d8      	lsrs	r0, r3
 8004542:	4770      	bx	lr
 8004544:	40023800 	.word	0x40023800
 8004548:	08008290 	.word	0x08008290
 800454c:	20000c8c 	.word	0x20000c8c

08004550 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004550:	230f      	movs	r3, #15
 8004552:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004554:	4b0b      	ldr	r3, [pc, #44]	; (8004584 <HAL_RCC_GetClockConfig+0x34>)
 8004556:	689a      	ldr	r2, [r3, #8]
 8004558:	f002 0203 	and.w	r2, r2, #3
 800455c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8004564:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004566:	689a      	ldr	r2, [r3, #8]
 8004568:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800456c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	08db      	lsrs	r3, r3, #3
 8004572:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004576:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004578:	4b03      	ldr	r3, [pc, #12]	; (8004588 <HAL_RCC_GetClockConfig+0x38>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 030f 	and.w	r3, r3, #15
 8004580:	600b      	str	r3, [r1, #0]
}
 8004582:	4770      	bx	lr
 8004584:	40023800 	.word	0x40023800
 8004588:	40023c00 	.word	0x40023c00

0800458c <HAL_SRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800458c:	b328      	cbz	r0, 80045da <HAL_SRAM_Init+0x4e>
{ 
 800458e:	b570      	push	{r4, r5, r6, lr}
 8004590:	4604      	mov	r4, r0
 8004592:	4615      	mov	r5, r2
 8004594:	460e      	mov	r6, r1
  {
     return HAL_ERROR;
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8004596:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 800459a:	b1cb      	cbz	r3, 80045d0 <HAL_SRAM_Init+0x44>
    HAL_SRAM_MspInit(hsram);
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800459c:	f104 0108 	add.w	r1, r4, #8
 80045a0:	6820      	ldr	r0, [r4, #0]
 80045a2:	f000 f9ff 	bl	80049a4 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80045a6:	68a2      	ldr	r2, [r4, #8]
 80045a8:	4631      	mov	r1, r6
 80045aa:	6820      	ldr	r0, [r4, #0]
 80045ac:	f000 fa26 	bl	80049fc <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80045b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80045b2:	68a2      	ldr	r2, [r4, #8]
 80045b4:	4629      	mov	r1, r5
 80045b6:	6860      	ldr	r0, [r4, #4]
 80045b8:	f000 fa40 	bl	8004a3c <FSMC_NORSRAM_Extended_Timing_Init>
 80045bc:	68a1      	ldr	r1, [r4, #8]
 80045be:	6822      	ldr	r2, [r4, #0]
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80045c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80045c4:	f043 0301 	orr.w	r3, r3, #1
 80045c8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  
  return HAL_OK;
 80045cc:	2000      	movs	r0, #0
}
 80045ce:	bd70      	pop	{r4, r5, r6, pc}
    hsram->Lock = HAL_UNLOCKED;
 80045d0:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
    HAL_SRAM_MspInit(hsram);
 80045d4:	f7fe fb1c 	bl	8002c10 <HAL_SRAM_MspInit>
 80045d8:	e7e0      	b.n	800459c <HAL_SRAM_Init+0x10>
     return HAL_ERROR;
 80045da:	2001      	movs	r0, #1
}
 80045dc:	4770      	bx	lr

080045de <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80045de:	4770      	bx	lr

080045e0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045e0:	6802      	ldr	r2, [r0, #0]
 80045e2:	68d3      	ldr	r3, [r2, #12]
 80045e4:	f043 0301 	orr.w	r3, r3, #1
 80045e8:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045ea:	6802      	ldr	r2, [r0, #0]
 80045ec:	6893      	ldr	r3, [r2, #8]
 80045ee:	f003 0307 	and.w	r3, r3, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045f2:	2b06      	cmp	r3, #6
 80045f4:	d003      	beq.n	80045fe <HAL_TIM_Base_Start_IT+0x1e>
  {
    __HAL_TIM_ENABLE(htim);
 80045f6:	6813      	ldr	r3, [r2, #0]
 80045f8:	f043 0301 	orr.w	r3, r3, #1
 80045fc:	6013      	str	r3, [r2, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80045fe:	2000      	movs	r0, #0
 8004600:	4770      	bx	lr

08004602 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004602:	4770      	bx	lr

08004604 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004604:	4770      	bx	lr

08004606 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004606:	4770      	bx	lr

08004608 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004608:	4770      	bx	lr

0800460a <HAL_TIM_IRQHandler>:
{
 800460a:	b510      	push	{r4, lr}
 800460c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800460e:	6803      	ldr	r3, [r0, #0]
 8004610:	691a      	ldr	r2, [r3, #16]
 8004612:	f012 0f02 	tst.w	r2, #2
 8004616:	d011      	beq.n	800463c <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	f012 0f02 	tst.w	r2, #2
 800461e:	d00d      	beq.n	800463c <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004620:	f06f 0202 	mvn.w	r2, #2
 8004624:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004626:	2301      	movs	r3, #1
 8004628:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800462a:	6803      	ldr	r3, [r0, #0]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	f013 0f03 	tst.w	r3, #3
 8004632:	d070      	beq.n	8004716 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8004634:	f7ff ffe6 	bl	8004604 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004638:	2300      	movs	r3, #0
 800463a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800463c:	6823      	ldr	r3, [r4, #0]
 800463e:	691a      	ldr	r2, [r3, #16]
 8004640:	f012 0f04 	tst.w	r2, #4
 8004644:	d012      	beq.n	800466c <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004646:	68da      	ldr	r2, [r3, #12]
 8004648:	f012 0f04 	tst.w	r2, #4
 800464c:	d00e      	beq.n	800466c <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800464e:	f06f 0204 	mvn.w	r2, #4
 8004652:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004654:	2302      	movs	r3, #2
 8004656:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004658:	6823      	ldr	r3, [r4, #0]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004660:	d05f      	beq.n	8004722 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8004662:	4620      	mov	r0, r4
 8004664:	f7ff ffce 	bl	8004604 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004668:	2300      	movs	r3, #0
 800466a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800466c:	6823      	ldr	r3, [r4, #0]
 800466e:	691a      	ldr	r2, [r3, #16]
 8004670:	f012 0f08 	tst.w	r2, #8
 8004674:	d012      	beq.n	800469c <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004676:	68da      	ldr	r2, [r3, #12]
 8004678:	f012 0f08 	tst.w	r2, #8
 800467c:	d00e      	beq.n	800469c <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800467e:	f06f 0208 	mvn.w	r2, #8
 8004682:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004684:	2304      	movs	r3, #4
 8004686:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004688:	6823      	ldr	r3, [r4, #0]
 800468a:	69db      	ldr	r3, [r3, #28]
 800468c:	f013 0f03 	tst.w	r3, #3
 8004690:	d04e      	beq.n	8004730 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 8004692:	4620      	mov	r0, r4
 8004694:	f7ff ffb6 	bl	8004604 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004698:	2300      	movs	r3, #0
 800469a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800469c:	6823      	ldr	r3, [r4, #0]
 800469e:	691a      	ldr	r2, [r3, #16]
 80046a0:	f012 0f10 	tst.w	r2, #16
 80046a4:	d012      	beq.n	80046cc <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80046a6:	68da      	ldr	r2, [r3, #12]
 80046a8:	f012 0f10 	tst.w	r2, #16
 80046ac:	d00e      	beq.n	80046cc <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046ae:	f06f 0210 	mvn.w	r2, #16
 80046b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046b4:	2308      	movs	r3, #8
 80046b6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046b8:	6823      	ldr	r3, [r4, #0]
 80046ba:	69db      	ldr	r3, [r3, #28]
 80046bc:	f413 7f40 	tst.w	r3, #768	; 0x300
 80046c0:	d03d      	beq.n	800473e <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 80046c2:	4620      	mov	r0, r4
 80046c4:	f7ff ff9e 	bl	8004604 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046c8:	2300      	movs	r3, #0
 80046ca:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80046cc:	6823      	ldr	r3, [r4, #0]
 80046ce:	691a      	ldr	r2, [r3, #16]
 80046d0:	f012 0f01 	tst.w	r2, #1
 80046d4:	d003      	beq.n	80046de <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046d6:	68da      	ldr	r2, [r3, #12]
 80046d8:	f012 0f01 	tst.w	r2, #1
 80046dc:	d136      	bne.n	800474c <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046de:	6823      	ldr	r3, [r4, #0]
 80046e0:	691a      	ldr	r2, [r3, #16]
 80046e2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80046e6:	d003      	beq.n	80046f0 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	f012 0f80 	tst.w	r2, #128	; 0x80
 80046ee:	d134      	bne.n	800475a <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046f0:	6823      	ldr	r3, [r4, #0]
 80046f2:	691a      	ldr	r2, [r3, #16]
 80046f4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80046f8:	d003      	beq.n	8004702 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046fa:	68da      	ldr	r2, [r3, #12]
 80046fc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8004700:	d132      	bne.n	8004768 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004702:	6823      	ldr	r3, [r4, #0]
 8004704:	691a      	ldr	r2, [r3, #16]
 8004706:	f012 0f20 	tst.w	r2, #32
 800470a:	d003      	beq.n	8004714 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800470c:	68da      	ldr	r2, [r3, #12]
 800470e:	f012 0f20 	tst.w	r2, #32
 8004712:	d130      	bne.n	8004776 <HAL_TIM_IRQHandler+0x16c>
}
 8004714:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004716:	f7ff ff74 	bl	8004602 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800471a:	4620      	mov	r0, r4
 800471c:	f7ff ff73 	bl	8004606 <HAL_TIM_PWM_PulseFinishedCallback>
 8004720:	e78a      	b.n	8004638 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004722:	4620      	mov	r0, r4
 8004724:	f7ff ff6d 	bl	8004602 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004728:	4620      	mov	r0, r4
 800472a:	f7ff ff6c 	bl	8004606 <HAL_TIM_PWM_PulseFinishedCallback>
 800472e:	e79b      	b.n	8004668 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004730:	4620      	mov	r0, r4
 8004732:	f7ff ff66 	bl	8004602 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004736:	4620      	mov	r0, r4
 8004738:	f7ff ff65 	bl	8004606 <HAL_TIM_PWM_PulseFinishedCallback>
 800473c:	e7ac      	b.n	8004698 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800473e:	4620      	mov	r0, r4
 8004740:	f7ff ff5f 	bl	8004602 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004744:	4620      	mov	r0, r4
 8004746:	f7ff ff5e 	bl	8004606 <HAL_TIM_PWM_PulseFinishedCallback>
 800474a:	e7bd      	b.n	80046c8 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800474c:	f06f 0201 	mvn.w	r2, #1
 8004750:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004752:	4620      	mov	r0, r4
 8004754:	f7fe fb50 	bl	8002df8 <HAL_TIM_PeriodElapsedCallback>
 8004758:	e7c1      	b.n	80046de <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800475a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800475e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004760:	4620      	mov	r0, r4
 8004762:	f000 f8a9 	bl	80048b8 <HAL_TIMEx_BreakCallback>
 8004766:	e7c3      	b.n	80046f0 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004768:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800476c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800476e:	4620      	mov	r0, r4
 8004770:	f7ff ff4a 	bl	8004608 <HAL_TIM_TriggerCallback>
 8004774:	e7c5      	b.n	8004702 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004776:	f06f 0220 	mvn.w	r2, #32
 800477a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800477c:	4620      	mov	r0, r4
 800477e:	f000 f89a 	bl	80048b6 <HAL_TIMEx_CommutCallback>
}
 8004782:	e7c7      	b.n	8004714 <HAL_TIM_IRQHandler+0x10a>

08004784 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004784:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004786:	4a3e      	ldr	r2, [pc, #248]	; (8004880 <TIM_Base_SetConfig+0xfc>)
 8004788:	4290      	cmp	r0, r2
 800478a:	d04d      	beq.n	8004828 <TIM_Base_SetConfig+0xa4>
 800478c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004790:	d031      	beq.n	80047f6 <TIM_Base_SetConfig+0x72>
 8004792:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004796:	4290      	cmp	r0, r2
 8004798:	d032      	beq.n	8004800 <TIM_Base_SetConfig+0x7c>
 800479a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800479e:	4290      	cmp	r0, r2
 80047a0:	d033      	beq.n	800480a <TIM_Base_SetConfig+0x86>
 80047a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80047a6:	4290      	cmp	r0, r2
 80047a8:	d034      	beq.n	8004814 <TIM_Base_SetConfig+0x90>
 80047aa:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80047ae:	4290      	cmp	r0, r2
 80047b0:	d035      	beq.n	800481e <TIM_Base_SetConfig+0x9a>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047b2:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80047b6:	4290      	cmp	r0, r2
 80047b8:	d053      	beq.n	8004862 <TIM_Base_SetConfig+0xde>
 80047ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80047be:	4290      	cmp	r0, r2
 80047c0:	d04f      	beq.n	8004862 <TIM_Base_SetConfig+0xde>
 80047c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80047c6:	4290      	cmp	r0, r2
 80047c8:	d04b      	beq.n	8004862 <TIM_Base_SetConfig+0xde>
 80047ca:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80047ce:	4290      	cmp	r0, r2
 80047d0:	d047      	beq.n	8004862 <TIM_Base_SetConfig+0xde>
 80047d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80047d6:	4290      	cmp	r0, r2
 80047d8:	d043      	beq.n	8004862 <TIM_Base_SetConfig+0xde>
 80047da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80047de:	4290      	cmp	r0, r2
 80047e0:	d03f      	beq.n	8004862 <TIM_Base_SetConfig+0xde>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047e6:	694a      	ldr	r2, [r1, #20]
 80047e8:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80047ea:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047ec:	688b      	ldr	r3, [r1, #8]
 80047ee:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047f0:	680b      	ldr	r3, [r1, #0]
 80047f2:	6283      	str	r3, [r0, #40]	; 0x28
 80047f4:	e032      	b.n	800485c <TIM_Base_SetConfig+0xd8>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80047fa:	684a      	ldr	r2, [r1, #4]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	e017      	b.n	8004830 <TIM_Base_SetConfig+0xac>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004804:	684a      	ldr	r2, [r1, #4]
 8004806:	4313      	orrs	r3, r2
 8004808:	e012      	b.n	8004830 <TIM_Base_SetConfig+0xac>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800480a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800480e:	684a      	ldr	r2, [r1, #4]
 8004810:	4313      	orrs	r3, r2
 8004812:	e00d      	b.n	8004830 <TIM_Base_SetConfig+0xac>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004818:	684a      	ldr	r2, [r1, #4]
 800481a:	4313      	orrs	r3, r2
 800481c:	e008      	b.n	8004830 <TIM_Base_SetConfig+0xac>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800481e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004822:	684a      	ldr	r2, [r1, #4]
 8004824:	4313      	orrs	r3, r2
 8004826:	e003      	b.n	8004830 <TIM_Base_SetConfig+0xac>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800482c:	684a      	ldr	r2, [r1, #4]
 800482e:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8004830:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004834:	68ca      	ldr	r2, [r1, #12]
 8004836:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004838:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800483c:	694a      	ldr	r2, [r1, #20]
 800483e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004840:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004842:	688b      	ldr	r3, [r1, #8]
 8004844:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004846:	680b      	ldr	r3, [r1, #0]
 8004848:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800484a:	4b0d      	ldr	r3, [pc, #52]	; (8004880 <TIM_Base_SetConfig+0xfc>)
 800484c:	4298      	cmp	r0, r3
 800484e:	d003      	beq.n	8004858 <TIM_Base_SetConfig+0xd4>
 8004850:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004854:	4298      	cmp	r0, r3
 8004856:	d101      	bne.n	800485c <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004858:	690b      	ldr	r3, [r1, #16]
 800485a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800485c:	2301      	movs	r3, #1
 800485e:	6143      	str	r3, [r0, #20]
}
 8004860:	4770      	bx	lr
    tmpcr1 &= ~TIM_CR1_CKD;
 8004862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004866:	68ca      	ldr	r2, [r1, #12]
 8004868:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800486a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800486e:	694a      	ldr	r2, [r1, #20]
 8004870:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004872:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004874:	688b      	ldr	r3, [r1, #8]
 8004876:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004878:	680b      	ldr	r3, [r1, #0]
 800487a:	6283      	str	r3, [r0, #40]	; 0x28
 800487c:	e7ee      	b.n	800485c <TIM_Base_SetConfig+0xd8>
 800487e:	bf00      	nop
 8004880:	40010000 	.word	0x40010000

08004884 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004884:	b1a8      	cbz	r0, 80048b2 <HAL_TIM_Base_Init+0x2e>
{
 8004886:	b510      	push	{r4, lr}
 8004888:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800488a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800488e:	b15b      	cbz	r3, 80048a8 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8004890:	2302      	movs	r3, #2
 8004892:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004896:	1d21      	adds	r1, r4, #4
 8004898:	6820      	ldr	r0, [r4, #0]
 800489a:	f7ff ff73 	bl	8004784 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800489e:	2301      	movs	r3, #1
 80048a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80048a4:	2000      	movs	r0, #0
}
 80048a6:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80048a8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80048ac:	f7ff fe97 	bl	80045de <HAL_TIM_Base_MspInit>
 80048b0:	e7ee      	b.n	8004890 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80048b2:	2001      	movs	r0, #1
}
 80048b4:	4770      	bx	lr

080048b6 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048b6:	4770      	bx	lr

080048b8 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048b8:	4770      	bx	lr
	...

080048bc <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 80048bc:	b410      	push	{r4}
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80048be:	4b13      	ldr	r3, [pc, #76]	; (800490c <LL_ADC_CommonInit+0x50>)
 80048c0:	689c      	ldr	r4, [r3, #8]
 80048c2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	4a11      	ldr	r2, [pc, #68]	; (8004910 <LL_ADC_CommonInit+0x54>)
 80048ca:	6892      	ldr	r2, [r2, #8]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 serie, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if(__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0U)
 80048cc:	4323      	orrs	r3, r4
 80048ce:	4313      	orrs	r3, r2
 80048d0:	f013 0f01 	tst.w	r3, #1
 80048d4:	d116      	bne.n	8004904 <LL_ADC_CommonInit+0x48>
  if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 80048d6:	684a      	ldr	r2, [r1, #4]
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if(ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 80048d8:	b93a      	cbnz	r2, 80048ea <LL_ADC_CommonInit+0x2e>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80048da:	6842      	ldr	r2, [r0, #4]
 80048dc:	4b0d      	ldr	r3, [pc, #52]	; (8004914 <LL_ADC_CommonInit+0x58>)
 80048de:	4013      	ands	r3, r2
 80048e0:	680a      	ldr	r2, [r1, #0]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	6043      	str	r3, [r0, #4]
  ErrorStatus status = SUCCESS;
 80048e6:	2000      	movs	r0, #0
 80048e8:	e00d      	b.n	8004906 <LL_ADC_CommonInit+0x4a>
      MODIFY_REG(ADCxy_COMMON->CCR,
 80048ea:	6844      	ldr	r4, [r0, #4]
 80048ec:	4b09      	ldr	r3, [pc, #36]	; (8004914 <LL_ADC_CommonInit+0x58>)
 80048ee:	4023      	ands	r3, r4
 80048f0:	4313      	orrs	r3, r2
 80048f2:	680a      	ldr	r2, [r1, #0]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	688a      	ldr	r2, [r1, #8]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	68ca      	ldr	r2, [r1, #12]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	6043      	str	r3, [r0, #4]
  ErrorStatus status = SUCCESS;
 8004900:	2000      	movs	r0, #0
 8004902:	e000      	b.n	8004906 <LL_ADC_CommonInit+0x4a>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8004904:	2001      	movs	r0, #1
  }
  
  return status;
}
 8004906:	f85d 4b04 	ldr.w	r4, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	40012000 	.word	0x40012000
 8004910:	40012200 	.word	0x40012200
 8004914:	fffc10e0 	.word	0xfffc10e0

08004918 <LL_ADC_Init>:
 8004918:	6883      	ldr	r3, [r0, #8]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_SCAN_SELECTION(ADC_InitStruct->SequencersScanMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800491a:	f013 0f01 	tst.w	r3, #1
 800491e:	d114      	bne.n	800494a <LL_ADC_Init+0x32>
{
 8004920:	b410      	push	{r4}
  {
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    MODIFY_REG(ADCx->CR1,
 8004922:	6842      	ldr	r2, [r0, #4]
 8004924:	680b      	ldr	r3, [r1, #0]
 8004926:	688c      	ldr	r4, [r1, #8]
 8004928:	4323      	orrs	r3, r4
 800492a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800492e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004932:	4313      	orrs	r3, r2
 8004934:	6043      	str	r3, [r0, #4]
              ,
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->SequencersScanMode
              );
    
    MODIFY_REG(ADCx->CR2,
 8004936:	6883      	ldr	r3, [r0, #8]
 8004938:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800493c:	684a      	ldr	r2, [r1, #4]
 800493e:	4313      	orrs	r3, r2
 8004940:	6083      	str	r3, [r0, #8]
  ErrorStatus status = SUCCESS;
 8004942:	2000      	movs	r0, #0
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
  }
  return status;
}
 8004944:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004948:	4770      	bx	lr
    status = ERROR;
 800494a:	2001      	movs	r0, #1
}
 800494c:	4770      	bx	lr
	...

08004950 <LL_ADC_REG_Init>:
 8004950:	6883      	ldr	r3, [r0, #8]
  assert_param(IS_LL_ADC_REG_CONTINUOUS_MODE(ADC_REG_InitStruct->ContinuousMode));
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(ADC_REG_InitStruct->DMATransfer));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 8004952:	f013 0f01 	tst.w	r3, #1
 8004956:	d121      	bne.n	800499c <LL_ADC_REG_Init+0x4c>
  if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8004958:	684a      	ldr	r2, [r1, #4]
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /* Note: On this STM32 serie, ADC trigger edge is set when starting       */
    /*       ADC conversion.                                                  */
    /*       Refer to function @ref LL_ADC_REG_StartConversionExtTrig().      */
    if(ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800495a:	b1d2      	cbz	r2, 8004992 <LL_ADC_REG_Init+0x42>
    {
      MODIFY_REG(ADCx->CR1,
 800495c:	6843      	ldr	r3, [r0, #4]
 800495e:	f423 4368 	bic.w	r3, r3, #59392	; 0xe800
 8004962:	4313      	orrs	r3, r2
 8004964:	688a      	ldr	r2, [r1, #8]
 8004966:	4313      	orrs	r3, r2
 8004968:	6043      	str	r3, [r0, #4]
                   ADC_REG_InitStruct->SequencerLength
                 | LL_ADC_REG_SEQ_DISCONT_DISABLE
                );
    }
    
    MODIFY_REG(ADCx->CR2,
 800496a:	6882      	ldr	r2, [r0, #8]
 800496c:	4b0c      	ldr	r3, [pc, #48]	; (80049a0 <LL_ADC_REG_Init+0x50>)
 800496e:	4013      	ands	r3, r2
 8004970:	68ca      	ldr	r2, [r1, #12]
 8004972:	4313      	orrs	r3, r2
 8004974:	690a      	ldr	r2, [r1, #16]
 8004976:	4313      	orrs	r3, r2
 8004978:	680a      	ldr	r2, [r1, #0]
 800497a:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800497e:	4313      	orrs	r3, r2
 8004980:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8004982:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004984:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004988:	684a      	ldr	r2, [r1, #4]
 800498a:	4313      	orrs	r3, r2
 800498c:	62c3      	str	r3, [r0, #44]	; 0x2c
  ErrorStatus status = SUCCESS;
 800498e:	2000      	movs	r0, #0
 8004990:	4770      	bx	lr
      MODIFY_REG(ADCx->CR1,
 8004992:	6843      	ldr	r3, [r0, #4]
 8004994:	f423 4368 	bic.w	r3, r3, #59392	; 0xe800
 8004998:	6043      	str	r3, [r0, #4]
 800499a:	e7e6      	b.n	800496a <LL_ADC_REG_Init+0x1a>
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800499c:	2001      	movs	r0, #1
  }
  return status;
}
 800499e:	4770      	bx	lr
 80049a0:	c0fffcfd 	.word	0xc0fffcfd

080049a4 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80049a4:	b470      	push	{r4, r5, r6}
 80049a6:	680c      	ldr	r4, [r1, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80049a8:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80049ac:	4e12      	ldr	r6, [pc, #72]	; (80049f8 <FSMC_NORSRAM_Init+0x54>)
 80049ae:	401e      	ands	r6, r3
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
                     Init->MemoryType           |\
 80049b0:	688d      	ldr	r5, [r1, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80049b2:	684a      	ldr	r2, [r1, #4]
 80049b4:	ea45 0302 	orr.w	r3, r5, r2
                     Init->MemoryType           |\
 80049b8:	68ca      	ldr	r2, [r1, #12]
 80049ba:	4313      	orrs	r3, r2
                     Init->MemoryDataWidth      |\
 80049bc:	690a      	ldr	r2, [r1, #16]
 80049be:	4313      	orrs	r3, r2
                     Init->BurstAccessMode      |\
 80049c0:	694a      	ldr	r2, [r1, #20]
 80049c2:	4313      	orrs	r3, r2
                     Init->WaitSignalPolarity   |\
 80049c4:	698a      	ldr	r2, [r1, #24]
 80049c6:	4313      	orrs	r3, r2
                     Init->WrapMode             |\
 80049c8:	69ca      	ldr	r2, [r1, #28]
 80049ca:	4313      	orrs	r3, r2
                     Init->WaitSignalActive     |\
 80049cc:	6a0a      	ldr	r2, [r1, #32]
 80049ce:	4313      	orrs	r3, r2
                     Init->WriteOperation       |\
 80049d0:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80049d2:	4313      	orrs	r3, r2
                     Init->WaitSignal           |\
 80049d4:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80049d6:	4313      	orrs	r3, r2
                     Init->ExtendedMode         |\
 80049d8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80049da:	4313      	orrs	r3, r2
                     Init->AsynchronousWait     |\
 80049dc:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 80049de:	4313      	orrs	r3, r2
                     Init->PageSize             |\
 80049e0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80049e2:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80049e4:	4333      	orrs	r3, r6
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80049e6:	2d08      	cmp	r5, #8
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80049e8:	bf08      	it	eq
 80049ea:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80049ee:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
}
 80049f2:	2000      	movs	r0, #0
 80049f4:	bc70      	pop	{r4, r5, r6}
 80049f6:	4770      	bx	lr
 80049f8:	fff00080 	.word	0xfff00080

080049fc <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80049fc:	b430      	push	{r4, r5}
 80049fe:	eb00 0282 	add.w	r2, r0, r2, lsl #2
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8004a02:	6854      	ldr	r4, [r2, #4]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8004a04:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004a08:	680b      	ldr	r3, [r1, #0]
 8004a0a:	6988      	ldr	r0, [r1, #24]
 8004a0c:	4303      	orrs	r3, r0
                    ((Timing->AddressHoldTime) << 4U)          |\
 8004a0e:	6848      	ldr	r0, [r1, #4]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004a10:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
                    ((Timing->DataSetupTime) << 8U)            |\
 8004a14:	6888      	ldr	r0, [r1, #8]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004a16:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004a1a:	68c8      	ldr	r0, [r1, #12]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004a1c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004a20:	690d      	ldr	r5, [r1, #16]
 8004a22:	3d01      	subs	r5, #1
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004a24:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8004a28:	6949      	ldr	r1, [r1, #20]
 8004a2a:	3902      	subs	r1, #2
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004a2c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004a30:	4323      	orrs	r3, r4
                    (Timing->AccessMode));
  
  Device->BTCR[Bank + 1] = tmpr; 
 8004a32:	6053      	str	r3, [r2, #4]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
}
 8004a34:	2000      	movs	r0, #0
 8004a36:	bc30      	pop	{r4, r5}
 8004a38:	4770      	bx	lr
	...

08004a3c <FSMC_NORSRAM_Extended_Timing_Init>:
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004a3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a40:	d005      	beq.n	8004a4e <FSMC_NORSRAM_Extended_Timing_Init+0x12>
    
    Device->BWTR[Bank] = tmpr;
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004a42:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8004a46:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }   
  
  return HAL_OK;  
}
 8004a4a:	2000      	movs	r0, #0
 8004a4c:	4770      	bx	lr
{
 8004a4e:	b430      	push	{r4, r5}
    tmpr = Device->BWTR[Bank];
 8004a50:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8004a54:	4c09      	ldr	r4, [pc, #36]	; (8004a7c <FSMC_NORSRAM_Extended_Timing_Init+0x40>)
 8004a56:	401c      	ands	r4, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004a58:	680b      	ldr	r3, [r1, #0]
 8004a5a:	698d      	ldr	r5, [r1, #24]
 8004a5c:	432b      	orrs	r3, r5
                      ((Timing->AddressHoldTime) << 4U)          |\
 8004a5e:	684d      	ldr	r5, [r1, #4]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004a60:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
                      ((Timing->DataSetupTime) << 8U)            |\
 8004a64:	688d      	ldr	r5, [r1, #8]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8004a66:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8004a6a:	68c9      	ldr	r1, [r1, #12]
 8004a6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004a70:	4323      	orrs	r3, r4
    Device->BWTR[Bank] = tmpr;
 8004a72:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 8004a76:	2000      	movs	r0, #0
 8004a78:	bc30      	pop	{r4, r5}
 8004a7a:	4770      	bx	lr
 8004a7c:	cff00000 	.word	0xcff00000

08004a80 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004a84:	680b      	ldr	r3, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a86:	fa93 f2a3 	rbit	r2, r3
 8004a8a:	fab2 f282 	clz	r2, r2

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004a8e:	fa33 f402 	lsrs.w	r4, r3, r2
 8004a92:	f000 808e 	beq.w	8004bb2 <LL_GPIO_Init+0x132>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8004a96:	2601      	movs	r6, #1
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004a98:	2503      	movs	r5, #3
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004a9a:	f04f 080f 	mov.w	r8, #15
 8004a9e:	e01e      	b.n	8004ade <LL_GPIO_Init+0x5e>
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004aa0:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8004aa4:	fa93 f4a3 	rbit	r4, r3
 8004aa8:	fab4 f484 	clz	r4, r4
 8004aac:	fa93 fea3 	rbit	lr, r3
 8004ab0:	0064      	lsls	r4, r4, #1
 8004ab2:	fa05 f404 	lsl.w	r4, r5, r4
 8004ab6:	ea2c 0404 	bic.w	r4, ip, r4
 8004aba:	fabe fc8e 	clz	ip, lr
 8004abe:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8004ac2:	690f      	ldr	r7, [r1, #16]
 8004ac4:	fa07 fc0c 	lsl.w	ip, r7, ip
 8004ac8:	ea44 040c 	orr.w	r4, r4, ip
 8004acc:	60c4      	str	r4, [r0, #12]
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004ace:	684c      	ldr	r4, [r1, #4]
 8004ad0:	2c02      	cmp	r4, #2
 8004ad2:	d03b      	beq.n	8004b4c <LL_GPIO_Init+0xcc>
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }
    }
    pinpos++;
 8004ad4:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004ad6:	680b      	ldr	r3, [r1, #0]
 8004ad8:	fa33 f402 	lsrs.w	r4, r3, r2
 8004adc:	d069      	beq.n	8004bb2 <LL_GPIO_Init+0x132>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8004ade:	fa06 f402 	lsl.w	r4, r6, r2
    if (currentpin)
 8004ae2:	4023      	ands	r3, r4
 8004ae4:	d0f6      	beq.n	8004ad4 <LL_GPIO_Init+0x54>
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004ae6:	f8d0 c000 	ldr.w	ip, [r0]
 8004aea:	fa93 f4a3 	rbit	r4, r3
 8004aee:	fab4 f484 	clz	r4, r4
 8004af2:	fa93 fea3 	rbit	lr, r3
 8004af6:	0064      	lsls	r4, r4, #1
 8004af8:	fa05 f404 	lsl.w	r4, r5, r4
 8004afc:	ea2c 0404 	bic.w	r4, ip, r4
 8004b00:	fabe fc8e 	clz	ip, lr
 8004b04:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8004b08:	684f      	ldr	r7, [r1, #4]
 8004b0a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8004b0e:	ea44 040c 	orr.w	r4, r4, ip
 8004b12:	6004      	str	r4, [r0, #0]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004b14:	684c      	ldr	r4, [r1, #4]
 8004b16:	3c01      	subs	r4, #1
 8004b18:	2c01      	cmp	r4, #1
 8004b1a:	d8c1      	bhi.n	8004aa0 <LL_GPIO_Init+0x20>
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8004b1c:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8004b20:	fa93 f4a3 	rbit	r4, r3
 8004b24:	fab4 f484 	clz	r4, r4
 8004b28:	fa93 fea3 	rbit	lr, r3
 8004b2c:	0064      	lsls	r4, r4, #1
 8004b2e:	fa05 f404 	lsl.w	r4, r5, r4
 8004b32:	ea2c 0404 	bic.w	r4, ip, r4
 8004b36:	fabe fc8e 	clz	ip, lr
 8004b3a:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8004b3e:	688f      	ldr	r7, [r1, #8]
 8004b40:	fa07 fc0c 	lsl.w	ip, r7, ip
 8004b44:	ea44 040c 	orr.w	r4, r4, ip
 8004b48:	6084      	str	r4, [r0, #8]
 8004b4a:	e7a9      	b.n	8004aa0 <LL_GPIO_Init+0x20>
 8004b4c:	fa93 f4a3 	rbit	r4, r3
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8004b50:	fab4 f484 	clz	r4, r4
 8004b54:	2c07      	cmp	r4, #7
 8004b56:	d815      	bhi.n	8004b84 <LL_GPIO_Init+0x104>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004b58:	f8d0 c020 	ldr.w	ip, [r0, #32]
 8004b5c:	fa93 f4a3 	rbit	r4, r3
 8004b60:	fab4 f484 	clz	r4, r4
 8004b64:	fa93 f3a3 	rbit	r3, r3
 8004b68:	00a4      	lsls	r4, r4, #2
 8004b6a:	fa08 f404 	lsl.w	r4, r8, r4
 8004b6e:	ea2c 0404 	bic.w	r4, ip, r4
 8004b72:	fab3 f383 	clz	r3, r3
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	694f      	ldr	r7, [r1, #20]
 8004b7a:	fa07 f303 	lsl.w	r3, r7, r3
 8004b7e:	431c      	orrs	r4, r3
 8004b80:	6204      	str	r4, [r0, #32]
 8004b82:	e7a7      	b.n	8004ad4 <LL_GPIO_Init+0x54>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004b84:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
 8004b88:	0a1b      	lsrs	r3, r3, #8
 8004b8a:	fa93 f4a3 	rbit	r4, r3
 8004b8e:	fab4 f484 	clz	r4, r4
 8004b92:	fa93 f3a3 	rbit	r3, r3
 8004b96:	00a4      	lsls	r4, r4, #2
 8004b98:	fa08 f404 	lsl.w	r4, r8, r4
 8004b9c:	ea2c 0404 	bic.w	r4, ip, r4
 8004ba0:	fab3 f383 	clz	r3, r3
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	694f      	ldr	r7, [r1, #20]
 8004ba8:	fa07 f303 	lsl.w	r3, r7, r3
 8004bac:	4323      	orrs	r3, r4
 8004bae:	6243      	str	r3, [r0, #36]	; 0x24
 8004bb0:	e790      	b.n	8004ad4 <LL_GPIO_Init+0x54>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004bb2:	684a      	ldr	r2, [r1, #4]
 8004bb4:	3a01      	subs	r2, #1
 8004bb6:	2a01      	cmp	r2, #1
 8004bb8:	d902      	bls.n	8004bc0 <LL_GPIO_Init+0x140>
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 8004bba:	2000      	movs	r0, #0
 8004bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004bc0:	6842      	ldr	r2, [r0, #4]
 8004bc2:	ea22 0203 	bic.w	r2, r2, r3
 8004bc6:	68c9      	ldr	r1, [r1, #12]
 8004bc8:	fb01 f303 	mul.w	r3, r1, r3
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	6043      	str	r3, [r0, #4]
 8004bd0:	e7f3      	b.n	8004bba <LL_GPIO_Init+0x13a>
	...

08004bd4 <LL_TIM_Init>:
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004bd4:	6803      	ldr	r3, [r0, #0]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bd6:	4a39      	ldr	r2, [pc, #228]	; (8004cbc <LL_TIM_Init+0xe8>)
 8004bd8:	4290      	cmp	r0, r2
 8004bda:	d049      	beq.n	8004c70 <LL_TIM_Init+0x9c>
 8004bdc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004be0:	d02d      	beq.n	8004c3e <LL_TIM_Init+0x6a>
 8004be2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004be6:	4290      	cmp	r0, r2
 8004be8:	d02e      	beq.n	8004c48 <LL_TIM_Init+0x74>
 8004bea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bee:	4290      	cmp	r0, r2
 8004bf0:	d02f      	beq.n	8004c52 <LL_TIM_Init+0x7e>
 8004bf2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004bf6:	4290      	cmp	r0, r2
 8004bf8:	d030      	beq.n	8004c5c <LL_TIM_Init+0x88>
 8004bfa:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004bfe:	4290      	cmp	r0, r2
 8004c00:	d031      	beq.n	8004c66 <LL_TIM_Init+0x92>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c02:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8004c06:	4290      	cmp	r0, r2
 8004c08:	d04e      	beq.n	8004ca8 <LL_TIM_Init+0xd4>
 8004c0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c0e:	4290      	cmp	r0, r2
 8004c10:	d04a      	beq.n	8004ca8 <LL_TIM_Init+0xd4>
 8004c12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c16:	4290      	cmp	r0, r2
 8004c18:	d046      	beq.n	8004ca8 <LL_TIM_Init+0xd4>
 8004c1a:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8004c1e:	4290      	cmp	r0, r2
 8004c20:	d042      	beq.n	8004ca8 <LL_TIM_Init+0xd4>
 8004c22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c26:	4290      	cmp	r0, r2
 8004c28:	d03e      	beq.n	8004ca8 <LL_TIM_Init+0xd4>
 8004c2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004c2e:	4290      	cmp	r0, r2
 8004c30:	d03a      	beq.n	8004ca8 <LL_TIM_Init+0xd4>
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004c32:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004c34:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004c36:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004c38:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004c3a:	6283      	str	r3, [r0, #40]	; 0x28
 8004c3c:	e02e      	b.n	8004c9c <LL_TIM_Init+0xc8>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c42:	684a      	ldr	r2, [r1, #4]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	e017      	b.n	8004c78 <LL_TIM_Init+0xa4>
 8004c48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c4c:	684a      	ldr	r2, [r1, #4]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	e012      	b.n	8004c78 <LL_TIM_Init+0xa4>
 8004c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c56:	684a      	ldr	r2, [r1, #4]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	e00d      	b.n	8004c78 <LL_TIM_Init+0xa4>
 8004c5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c60:	684a      	ldr	r2, [r1, #4]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	e008      	b.n	8004c78 <LL_TIM_Init+0xa4>
 8004c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6a:	684a      	ldr	r2, [r1, #4]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	e003      	b.n	8004c78 <LL_TIM_Init+0xa4>
 8004c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c74:	684a      	ldr	r2, [r1, #4]
 8004c76:	4313      	orrs	r3, r2
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004c78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c7c:	68ca      	ldr	r2, [r1, #12]
 8004c7e:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004c80:	6003      	str	r3, [r0, #0]
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004c82:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004c84:	62c3      	str	r3, [r0, #44]	; 0x2c
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004c86:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004c88:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c8a:	4b0c      	ldr	r3, [pc, #48]	; (8004cbc <LL_TIM_Init+0xe8>)
 8004c8c:	4298      	cmp	r0, r3
 8004c8e:	d003      	beq.n	8004c98 <LL_TIM_Init+0xc4>
 8004c90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c94:	4298      	cmp	r0, r3
 8004c96:	d101      	bne.n	8004c9c <LL_TIM_Init+0xc8>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004c98:	7c0b      	ldrb	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004c9a:	6303      	str	r3, [r0, #48]	; 0x30
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004c9c:	6943      	ldr	r3, [r0, #20]
 8004c9e:	f043 0301 	orr.w	r3, r3, #1
 8004ca2:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 8004ca4:	2000      	movs	r0, #0
 8004ca6:	4770      	bx	lr
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004ca8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cac:	68ca      	ldr	r2, [r1, #12]
 8004cae:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004cb0:	6003      	str	r3, [r0, #0]
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004cb2:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004cb4:	62c3      	str	r3, [r0, #44]	; 0x2c
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004cb6:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004cb8:	6283      	str	r3, [r0, #40]	; 0x28
 8004cba:	e7ef      	b.n	8004c9c <LL_TIM_Init+0xc8>
 8004cbc:	40010000 	.word	0x40010000

08004cc0 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8004cc0:	b430      	push	{r4, r5}
  ErrorStatus result = ERROR;

  switch (Channel)
 8004cc2:	2910      	cmp	r1, #16
 8004cc4:	d069      	beq.n	8004d9a <LL_TIM_OC_Init+0xda>
 8004cc6:	d930      	bls.n	8004d2a <LL_TIM_OC_Init+0x6a>
 8004cc8:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004ccc:	f000 809d 	beq.w	8004e0a <LL_TIM_OC_Init+0x14a>
 8004cd0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8004cd4:	f040 80d0 	bne.w	8004e78 <LL_TIM_OC_Init+0x1b8>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8004cd8:	6a03      	ldr	r3, [r0, #32]
 8004cda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cde:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004ce0:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004ce2:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004ce4:	69c1      	ldr	r1, [r0, #28]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004ce6:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8004cea:	6815      	ldr	r5, [r2, #0]
 8004cec:	ea41 2105 	orr.w	r1, r1, r5, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004cf0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cf4:	6915      	ldr	r5, [r2, #16]
 8004cf6:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004cfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cfe:	6855      	ldr	r5, [r2, #4]
 8004d00:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d04:	4d5d      	ldr	r5, [pc, #372]	; (8004e7c <LL_TIM_OC_Init+0x1bc>)
 8004d06:	42a8      	cmp	r0, r5
 8004d08:	d003      	beq.n	8004d12 <LL_TIM_OC_Init+0x52>
 8004d0a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004d0e:	42a8      	cmp	r0, r5
 8004d10:	d104      	bne.n	8004d1c <LL_TIM_OC_Init+0x5c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004d12:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 8004d16:	6995      	ldr	r5, [r2, #24]
 8004d18:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004d1c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004d1e:	61c1      	str	r1, [r0, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004d20:	68d2      	ldr	r2, [r2, #12]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8004d22:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004d24:	6203      	str	r3, [r0, #32]
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8004d26:	2000      	movs	r0, #0
      break;
 8004d28:	e035      	b.n	8004d96 <LL_TIM_OC_Init+0xd6>
  switch (Channel)
 8004d2a:	2901      	cmp	r1, #1
 8004d2c:	f040 80a4 	bne.w	8004e78 <LL_TIM_OC_Init+0x1b8>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8004d30:	6a03      	ldr	r3, [r0, #32]
 8004d32:	f023 0301 	bic.w	r3, r3, #1
 8004d36:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004d38:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004d3a:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004d3c:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004d3e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8004d42:	6815      	ldr	r5, [r2, #0]
 8004d44:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8004d46:	f023 0302 	bic.w	r3, r3, #2
 8004d4a:	6915      	ldr	r5, [r2, #16]
 8004d4c:	432b      	orrs	r3, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004d4e:	f023 0301 	bic.w	r3, r3, #1
 8004d52:	6855      	ldr	r5, [r2, #4]
 8004d54:	432b      	orrs	r3, r5
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d56:	4d49      	ldr	r5, [pc, #292]	; (8004e7c <LL_TIM_OC_Init+0x1bc>)
 8004d58:	42a8      	cmp	r0, r5
 8004d5a:	d003      	beq.n	8004d64 <LL_TIM_OC_Init+0xa4>
 8004d5c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004d60:	42a8      	cmp	r0, r5
 8004d62:	d112      	bne.n	8004d8a <LL_TIM_OC_Init+0xca>
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8004d64:	f023 0308 	bic.w	r3, r3, #8
 8004d68:	6955      	ldr	r5, [r2, #20]
 8004d6a:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8004d6e:	f023 0304 	bic.w	r3, r3, #4
 8004d72:	6895      	ldr	r5, [r2, #8]
 8004d74:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8004d78:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004d7c:	6995      	ldr	r5, [r2, #24]
 8004d7e:	4329      	orrs	r1, r5
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8004d80:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8004d84:	69d5      	ldr	r5, [r2, #28]
 8004d86:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004d8a:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004d8c:	6184      	str	r4, [r0, #24]
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8004d8e:	68d2      	ldr	r2, [r2, #12]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004d90:	6342      	str	r2, [r0, #52]	; 0x34
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004d92:	6203      	str	r3, [r0, #32]
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8004d94:	2000      	movs	r0, #0
}
 8004d96:	bc30      	pop	{r4, r5}
 8004d98:	4770      	bx	lr
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8004d9a:	6a03      	ldr	r3, [r0, #32]
 8004d9c:	f023 0310 	bic.w	r3, r3, #16
 8004da0:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004da2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004da4:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004da6:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004da8:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8004dac:	6815      	ldr	r5, [r2, #0]
 8004dae:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004db2:	f023 0320 	bic.w	r3, r3, #32
 8004db6:	6915      	ldr	r5, [r2, #16]
 8004db8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004dbc:	f023 0310 	bic.w	r3, r3, #16
 8004dc0:	6855      	ldr	r5, [r2, #4]
 8004dc2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dc6:	4d2d      	ldr	r5, [pc, #180]	; (8004e7c <LL_TIM_OC_Init+0x1bc>)
 8004dc8:	42a8      	cmp	r0, r5
 8004dca:	d003      	beq.n	8004dd4 <LL_TIM_OC_Init+0x114>
 8004dcc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004dd0:	42a8      	cmp	r0, r5
 8004dd2:	d113      	bne.n	8004dfc <LL_TIM_OC_Init+0x13c>
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004dd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dd8:	6955      	ldr	r5, [r2, #20]
 8004dda:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8004dde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004de2:	6895      	ldr	r5, [r2, #8]
 8004de4:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8004de8:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004dec:	6995      	ldr	r5, [r2, #24]
 8004dee:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8004df2:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8004df6:	69d5      	ldr	r5, [r2, #28]
 8004df8:	ea41 01c5 	orr.w	r1, r1, r5, lsl #3
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004dfc:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004dfe:	6184      	str	r4, [r0, #24]
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004e00:	68d2      	ldr	r2, [r2, #12]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004e02:	6382      	str	r2, [r0, #56]	; 0x38
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004e04:	6203      	str	r3, [r0, #32]
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8004e06:	2000      	movs	r0, #0
      break;
 8004e08:	e7c5      	b.n	8004d96 <LL_TIM_OC_Init+0xd6>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8004e0a:	6a03      	ldr	r3, [r0, #32]
 8004e0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e10:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004e12:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004e14:	6841      	ldr	r1, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004e16:	69c4      	ldr	r4, [r0, #28]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004e18:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8004e1c:	6815      	ldr	r5, [r2, #0]
 8004e1e:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004e20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e24:	6915      	ldr	r5, [r2, #16]
 8004e26:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004e2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e2e:	6855      	ldr	r5, [r2, #4]
 8004e30:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e34:	4d11      	ldr	r5, [pc, #68]	; (8004e7c <LL_TIM_OC_Init+0x1bc>)
 8004e36:	42a8      	cmp	r0, r5
 8004e38:	d003      	beq.n	8004e42 <LL_TIM_OC_Init+0x182>
 8004e3a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004e3e:	42a8      	cmp	r0, r5
 8004e40:	d113      	bne.n	8004e6a <LL_TIM_OC_Init+0x1aa>
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8004e42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e46:	6955      	ldr	r5, [r2, #20]
 8004e48:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8004e4c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e50:	6895      	ldr	r5, [r2, #8]
 8004e52:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8004e56:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8004e5a:	6995      	ldr	r5, [r2, #24]
 8004e5c:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8004e60:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8004e64:	69d5      	ldr	r5, [r2, #28]
 8004e66:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004e6a:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004e6c:	61c4      	str	r4, [r0, #28]
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8004e6e:	68d2      	ldr	r2, [r2, #12]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004e70:	63c2      	str	r2, [r0, #60]	; 0x3c
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004e72:	6203      	str	r3, [r0, #32]
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8004e74:	2000      	movs	r0, #0
      break;
 8004e76:	e78e      	b.n	8004d96 <LL_TIM_OC_Init+0xd6>
  ErrorStatus result = ERROR;
 8004e78:	2001      	movs	r0, #1
 8004e7a:	e78c      	b.n	8004d96 <LL_TIM_OC_Init+0xd6>
 8004e7c:	40010000 	.word	0x40010000

08004e80 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e80:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e84:	b9ab      	cbnz	r3, 8004eb2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e86:	f3ef 8310 	mrs	r3, PRIMASK
 8004e8a:	b9ab      	cbnz	r3, 8004eb8 <osKernelInitialize+0x38>
 8004e8c:	4b0d      	ldr	r3, [pc, #52]	; (8004ec4 <osKernelInitialize+0x44>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d005      	beq.n	8004ea0 <osKernelInitialize+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 8004e94:	b99b      	cbnz	r3, 8004ebe <osKernelInitialize+0x3e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8004e96:	4b0b      	ldr	r3, [pc, #44]	; (8004ec4 <osKernelInitialize+0x44>)
 8004e98:	2201      	movs	r2, #1
 8004e9a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004e9c:	2000      	movs	r0, #0
 8004e9e:	4770      	bx	lr
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ea0:	f3ef 8311 	mrs	r3, BASEPRI
    } else {
      stat = osError;
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	bf14      	ite	ne
 8004ea8:	f06f 0005 	mvnne.w	r0, #5
 8004eac:	f04f 30ff 	moveq.w	r0, #4294967295
 8004eb0:	4770      	bx	lr
    stat = osErrorISR;
 8004eb2:	f06f 0005 	mvn.w	r0, #5
 8004eb6:	4770      	bx	lr
 8004eb8:	f06f 0005 	mvn.w	r0, #5
 8004ebc:	4770      	bx	lr
      stat = osError;
 8004ebe:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8004ec2:	4770      	bx	lr
 8004ec4:	20015f24 	.word	0x20015f24

08004ec8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004ec8:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004eca:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ece:	b9c3      	cbnz	r3, 8004f02 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ed0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ed4:	b9c3      	cbnz	r3, 8004f08 <osKernelStart+0x40>
 8004ed6:	4b0f      	ldr	r3, [pc, #60]	; (8004f14 <osKernelStart+0x4c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d008      	beq.n	8004ef0 <osKernelStart+0x28>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d115      	bne.n	8004f0e <osKernelStart+0x46>
      KernelState = osKernelRunning;
 8004ee2:	4b0c      	ldr	r3, [pc, #48]	; (8004f14 <osKernelStart+0x4c>)
 8004ee4:	2202      	movs	r2, #2
 8004ee6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004ee8:	f001 fa38 	bl	800635c <vTaskStartScheduler>
      stat = osOK;
 8004eec:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 8004eee:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004ef0:	f3ef 8311 	mrs	r3, BASEPRI
      stat = osError;
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	bf14      	ite	ne
 8004ef8:	f06f 0005 	mvnne.w	r0, #5
 8004efc:	f04f 30ff 	moveq.w	r0, #4294967295
 8004f00:	e7f5      	b.n	8004eee <osKernelStart+0x26>
    stat = osErrorISR;
 8004f02:	f06f 0005 	mvn.w	r0, #5
 8004f06:	e7f2      	b.n	8004eee <osKernelStart+0x26>
 8004f08:	f06f 0005 	mvn.w	r0, #5
 8004f0c:	e7ef      	b.n	8004eee <osKernelStart+0x26>
      stat = osError;
 8004f0e:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 8004f12:	e7ec      	b.n	8004eee <osKernelStart+0x26>
 8004f14:	20015f24 	.word	0x20015f24

08004f18 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f1a:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004f1c:	2400      	movs	r4, #0
 8004f1e:	9404      	str	r4, [sp, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f20:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8004f24:	b9dc      	cbnz	r4, 8004f5e <osThreadNew+0x46>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f26:	f3ef 8310 	mrs	r3, PRIMASK
 8004f2a:	b9c3      	cbnz	r3, 8004f5e <osThreadNew+0x46>
 8004f2c:	4b2d      	ldr	r3, [pc, #180]	; (8004fe4 <osThreadNew+0xcc>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d010      	beq.n	8004f56 <osThreadNew+0x3e>
 8004f34:	b198      	cbz	r0, 8004f5e <osThreadNew+0x46>
 8004f36:	460b      	mov	r3, r1
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 8004f38:	2100      	movs	r1, #0
 8004f3a:	f88d 1017 	strb.w	r1, [sp, #23]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 8004f3e:	2a00      	cmp	r2, #0
 8004f40:	d03d      	beq.n	8004fbe <osThreadNew+0xa6>
      if (attr->name != NULL) {
 8004f42:	6811      	ldr	r1, [r2, #0]
 8004f44:	b171      	cbz	r1, 8004f64 <osThreadNew+0x4c>
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8004f46:	6994      	ldr	r4, [r2, #24]
 8004f48:	b17c      	cbz	r4, 8004f6a <osThreadNew+0x52>
 8004f4a:	4625      	mov	r5, r4
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004f4c:	3c01      	subs	r4, #1
 8004f4e:	2c37      	cmp	r4, #55	; 0x37
 8004f50:	d90c      	bls.n	8004f6c <osThreadNew+0x54>
        return (NULL);
 8004f52:	2000      	movs	r0, #0
 8004f54:	e004      	b.n	8004f60 <osThreadNew+0x48>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004f56:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (func != NULL)) {
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d0ea      	beq.n	8004f34 <osThreadNew+0x1c>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004f5e:	9804      	ldr	r0, [sp, #16]
}
 8004f60:	b007      	add	sp, #28
 8004f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    name  = &empty;
 8004f64:	f10d 0117 	add.w	r1, sp, #23
 8004f68:	e7ed      	b.n	8004f46 <osThreadNew+0x2e>
 8004f6a:	2518      	movs	r5, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004f6c:	6854      	ldr	r4, [r2, #4]
 8004f6e:	f014 0f01 	tst.w	r4, #1
 8004f72:	d135      	bne.n	8004fe0 <osThreadNew+0xc8>
      if (attr->stack_size > 0U) {
 8004f74:	6954      	ldr	r4, [r2, #20]
 8004f76:	b1a4      	cbz	r4, 8004fa2 <osThreadNew+0x8a>
        stack = attr->stack_size / sizeof(StackType_t);
 8004f78:	ea4f 0c94 	mov.w	ip, r4, lsr #2
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f7c:	6896      	ldr	r6, [r2, #8]
 8004f7e:	b19e      	cbz	r6, 8004fa8 <osThreadNew+0x90>
 8004f80:	68d7      	ldr	r7, [r2, #12]
 8004f82:	2f5b      	cmp	r7, #91	; 0x5b
 8004f84:	d9eb      	bls.n	8004f5e <osThreadNew+0x46>
 8004f86:	6917      	ldr	r7, [r2, #16]
 8004f88:	2f00      	cmp	r7, #0
 8004f8a:	d0e8      	beq.n	8004f5e <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f8c:	2c00      	cmp	r4, #0
 8004f8e:	d0e6      	beq.n	8004f5e <osThreadNew+0x46>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004f90:	9602      	str	r6, [sp, #8]
 8004f92:	6912      	ldr	r2, [r2, #16]
 8004f94:	9201      	str	r2, [sp, #4]
 8004f96:	9500      	str	r5, [sp, #0]
 8004f98:	4662      	mov	r2, ip
 8004f9a:	f001 f975 	bl	8006288 <xTaskCreateStatic>
 8004f9e:	9004      	str	r0, [sp, #16]
 8004fa0:	e7dd      	b.n	8004f5e <osThreadNew+0x46>
    stack = configMINIMAL_STACK_SIZE;
 8004fa2:	f04f 0c80 	mov.w	ip, #128	; 0x80
 8004fa6:	e7e9      	b.n	8004f7c <osThreadNew+0x64>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004fa8:	68d4      	ldr	r4, [r2, #12]
 8004faa:	2c00      	cmp	r4, #0
 8004fac:	d1d7      	bne.n	8004f5e <osThreadNew+0x46>
 8004fae:	6912      	ldr	r2, [r2, #16]
 8004fb0:	3200      	adds	r2, #0
 8004fb2:	bf18      	it	ne
 8004fb4:	2201      	movne	r2, #1
 8004fb6:	4252      	negs	r2, r2
      if (mem == 0) {
 8004fb8:	2a00      	cmp	r2, #0
 8004fba:	d1d0      	bne.n	8004f5e <osThreadNew+0x46>
 8004fbc:	e004      	b.n	8004fc8 <osThreadNew+0xb0>
    prio  = (UBaseType_t)osPriorityNormal;
 8004fbe:	2518      	movs	r5, #24
    stack = configMINIMAL_STACK_SIZE;
 8004fc0:	f04f 0c80 	mov.w	ip, #128	; 0x80
    name  = &empty;
 8004fc4:	f10d 0117 	add.w	r1, sp, #23
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004fc8:	aa04      	add	r2, sp, #16
 8004fca:	9201      	str	r2, [sp, #4]
 8004fcc:	9500      	str	r5, [sp, #0]
 8004fce:	fa1f f28c 	uxth.w	r2, ip
 8004fd2:	f001 f992 	bl	80062fa <xTaskCreate>
 8004fd6:	2801      	cmp	r0, #1
          hTask = NULL;
 8004fd8:	bf1c      	itt	ne
 8004fda:	2300      	movne	r3, #0
 8004fdc:	9304      	strne	r3, [sp, #16]
 8004fde:	e7be      	b.n	8004f5e <osThreadNew+0x46>
        return (NULL);
 8004fe0:	2000      	movs	r0, #0
 8004fe2:	e7bd      	b.n	8004f60 <osThreadNew+0x48>
 8004fe4:	20015f24 	.word	0x20015f24

08004fe8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004fe8:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fea:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8004fee:	b9a3      	cbnz	r3, 800501a <osDelay+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ff0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ff4:	b9a3      	cbnz	r3, 8005020 <osDelay+0x38>
 8004ff6:	4b0c      	ldr	r3, [pc, #48]	; (8005028 <osDelay+0x40>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d002      	beq.n	8005004 <osDelay+0x1c>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8004ffe:	b940      	cbnz	r0, 8005012 <osDelay+0x2a>
    stat = osOK;
 8005000:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8005002:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005004:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8005008:	2b00      	cmp	r3, #0
 800500a:	d0f8      	beq.n	8004ffe <osDelay+0x16>
    stat = osErrorISR;
 800500c:	f06f 0005 	mvn.w	r0, #5
 8005010:	e7f7      	b.n	8005002 <osDelay+0x1a>
      vTaskDelay(ticks);
 8005012:	f001 fb07 	bl	8006624 <vTaskDelay>
    stat = osOK;
 8005016:	2000      	movs	r0, #0
 8005018:	e7f3      	b.n	8005002 <osDelay+0x1a>
    stat = osErrorISR;
 800501a:	f06f 0005 	mvn.w	r0, #5
 800501e:	e7f0      	b.n	8005002 <osDelay+0x1a>
 8005020:	f06f 0005 	mvn.w	r0, #5
 8005024:	e7ed      	b.n	8005002 <osDelay+0x1a>
 8005026:	bf00      	nop
 8005028:	20015f24 	.word	0x20015f24

0800502c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800502c:	b570      	push	{r4, r5, r6, lr}
 800502e:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005030:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005034:	2b00      	cmp	r3, #0
 8005036:	d143      	bne.n	80050c0 <osSemaphoreNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005038:	f3ef 8310 	mrs	r3, PRIMASK
 800503c:	2b00      	cmp	r3, #0
 800503e:	d141      	bne.n	80050c4 <osSemaphoreNew+0x98>
 8005040:	4b2f      	ldr	r3, [pc, #188]	; (8005100 <osSemaphoreNew+0xd4>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2b02      	cmp	r3, #2
 8005046:	d00e      	beq.n	8005066 <osSemaphoreNew+0x3a>
 8005048:	2800      	cmp	r0, #0
 800504a:	d03d      	beq.n	80050c8 <osSemaphoreNew+0x9c>
 800504c:	4288      	cmp	r0, r1
 800504e:	d33d      	bcc.n	80050cc <osSemaphoreNew+0xa0>
 8005050:	4614      	mov	r4, r2
 8005052:	460e      	mov	r6, r1
    mem = -1;

    if (attr != NULL) {
 8005054:	2a00      	cmp	r2, #0
 8005056:	d042      	beq.n	80050de <osSemaphoreNew+0xb2>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005058:	6892      	ldr	r2, [r2, #8]
 800505a:	b152      	cbz	r2, 8005072 <osSemaphoreNew+0x46>
 800505c:	68e3      	ldr	r3, [r4, #12]
 800505e:	2b4f      	cmp	r3, #79	; 0x4f
 8005060:	d836      	bhi.n	80050d0 <osSemaphoreNew+0xa4>
  hSemaphore = NULL;
 8005062:	2500      	movs	r5, #0
 8005064:	e048      	b.n	80050f8 <osSemaphoreNew+0xcc>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005066:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800506a:	2b00      	cmp	r3, #0
 800506c:	d0ec      	beq.n	8005048 <osSemaphoreNew+0x1c>
  hSemaphore = NULL;
 800506e:	2500      	movs	r5, #0
 8005070:	e042      	b.n	80050f8 <osSemaphoreNew+0xcc>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005072:	68e3      	ldr	r3, [r4, #12]
  hSemaphore = NULL;
 8005074:	2500      	movs	r5, #0
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005076:	2b00      	cmp	r3, #0
 8005078:	d13e      	bne.n	80050f8 <osSemaphoreNew+0xcc>
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
 800507a:	2801      	cmp	r0, #1
 800507c:	d131      	bne.n	80050e2 <osSemaphoreNew+0xb6>
        if (mem == 1) {
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800507e:	2203      	movs	r2, #3
 8005080:	2100      	movs	r1, #0
 8005082:	2001      	movs	r0, #1
 8005084:	f000 fb57 	bl	8005736 <xQueueGenericCreate>
 8005088:	4605      	mov	r5, r0
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800508a:	b3ad      	cbz	r5, 80050f8 <osSemaphoreNew+0xcc>
 800508c:	b376      	cbz	r6, 80050ec <osSemaphoreNew+0xc0>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800508e:	2300      	movs	r3, #0
 8005090:	461a      	mov	r2, r3
 8005092:	4619      	mov	r1, r3
 8005094:	4628      	mov	r0, r5
 8005096:	f000 fbbb 	bl	8005810 <xQueueGenericSend>
 800509a:	2801      	cmp	r0, #1
 800509c:	d026      	beq.n	80050ec <osSemaphoreNew+0xc0>
            vSemaphoreDelete (hSemaphore);
 800509e:	4628      	mov	r0, r5
 80050a0:	f000 ff46 	bl	8005f30 <vQueueDelete>
            hSemaphore = NULL;
 80050a4:	2500      	movs	r5, #0
 80050a6:	e027      	b.n	80050f8 <osSemaphoreNew+0xcc>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80050a8:	2303      	movs	r3, #3
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	4613      	mov	r3, r2
 80050ae:	2200      	movs	r2, #0
 80050b0:	4611      	mov	r1, r2
 80050b2:	2001      	movs	r0, #1
 80050b4:	f000 fae8 	bl	8005688 <xQueueGenericCreateStatic>
 80050b8:	4605      	mov	r5, r0
 80050ba:	e7e6      	b.n	800508a <osSemaphoreNew+0x5e>
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
        if (attr != NULL) {
          name = attr->name;
        } else {
          name = NULL;
 80050bc:	2100      	movs	r1, #0
 80050be:	e018      	b.n	80050f2 <osSemaphoreNew+0xc6>
  hSemaphore = NULL;
 80050c0:	2500      	movs	r5, #0
 80050c2:	e019      	b.n	80050f8 <osSemaphoreNew+0xcc>
 80050c4:	2500      	movs	r5, #0
 80050c6:	e017      	b.n	80050f8 <osSemaphoreNew+0xcc>
 80050c8:	2500      	movs	r5, #0
 80050ca:	e015      	b.n	80050f8 <osSemaphoreNew+0xcc>
 80050cc:	2500      	movs	r5, #0
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80050ce:	e013      	b.n	80050f8 <osSemaphoreNew+0xcc>
      if (max_count == 1U) {
 80050d0:	2801      	cmp	r0, #1
 80050d2:	d0e9      	beq.n	80050a8 <osSemaphoreNew+0x7c>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80050d4:	f000 fb57 	bl	8005786 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 80050d8:	4605      	mov	r5, r0
 80050da:	b948      	cbnz	r0, 80050f0 <osSemaphoreNew+0xc4>
 80050dc:	e00c      	b.n	80050f8 <osSemaphoreNew+0xcc>
      if (max_count == 1U) {
 80050de:	2801      	cmp	r0, #1
 80050e0:	d0cd      	beq.n	800507e <osSemaphoreNew+0x52>
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80050e2:	4631      	mov	r1, r6
 80050e4:	f000 fb74 	bl	80057d0 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 80050e8:	4605      	mov	r5, r0
 80050ea:	b128      	cbz	r0, 80050f8 <osSemaphoreNew+0xcc>
        if (attr != NULL) {
 80050ec:	2c00      	cmp	r4, #0
 80050ee:	d0e5      	beq.n	80050bc <osSemaphoreNew+0x90>
          name = attr->name;
 80050f0:	6821      	ldr	r1, [r4, #0]
        vQueueAddToRegistry (hSemaphore, name);
 80050f2:	4628      	mov	r0, r5
 80050f4:	f000 fee8 	bl	8005ec8 <vQueueAddToRegistry>
}
 80050f8:	4628      	mov	r0, r5
 80050fa:	b002      	add	sp, #8
 80050fc:	bd70      	pop	{r4, r5, r6, pc}
 80050fe:	bf00      	nop
 8005100:	20015f24 	.word	0x20015f24

08005104 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8005104:	b388      	cbz	r0, 800516a <osSemaphoreAcquire+0x66>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005106:	b510      	push	{r4, lr}
 8005108:	b082      	sub	sp, #8
 800510a:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800510c:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8005110:	b94b      	cbnz	r3, 8005126 <osSemaphoreAcquire+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005112:	f3ef 8310 	mrs	r3, PRIMASK
 8005116:	b933      	cbnz	r3, 8005126 <osSemaphoreAcquire+0x22>
 8005118:	4b1a      	ldr	r3, [pc, #104]	; (8005184 <osSemaphoreAcquire+0x80>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2b02      	cmp	r3, #2
 800511e:	d118      	bne.n	8005152 <osSemaphoreAcquire+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005120:	f3ef 8311 	mrs	r3, BASEPRI
 8005124:	b1ab      	cbz	r3, 8005152 <osSemaphoreAcquire+0x4e>
    if (timeout != 0U) {
 8005126:	bb1c      	cbnz	r4, 8005170 <osSemaphoreAcquire+0x6c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;
 8005128:	2100      	movs	r1, #0
 800512a:	aa02      	add	r2, sp, #8
 800512c:	f842 1d04 	str.w	r1, [r2, #-4]!

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005130:	f000 fe74 	bl	8005e1c <xQueueReceiveFromISR>
 8005134:	2801      	cmp	r0, #1
 8005136:	d11e      	bne.n	8005176 <osSemaphoreAcquire+0x72>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
 8005138:	9b01      	ldr	r3, [sp, #4]
 800513a:	b1fb      	cbz	r3, 800517c <osSemaphoreAcquire+0x78>
 800513c:	4b12      	ldr	r3, [pc, #72]	; (8005188 <osSemaphoreAcquire+0x84>)
 800513e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005142:	601a      	str	r2, [r3, #0]
 8005144:	f3bf 8f4f 	dsb	sy
 8005148:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800514c:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800514e:	b002      	add	sp, #8
 8005150:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005152:	4621      	mov	r1, r4
 8005154:	f000 fd8e 	bl	8005c74 <xQueueSemaphoreTake>
 8005158:	2801      	cmp	r0, #1
 800515a:	d011      	beq.n	8005180 <osSemaphoreAcquire+0x7c>
        stat = osErrorResource;
 800515c:	2c00      	cmp	r4, #0
 800515e:	bf14      	ite	ne
 8005160:	f06f 0001 	mvnne.w	r0, #1
 8005164:	f06f 0002 	mvneq.w	r0, #2
 8005168:	e7f1      	b.n	800514e <osSemaphoreAcquire+0x4a>
    stat = osErrorParameter;
 800516a:	f06f 0003 	mvn.w	r0, #3
}
 800516e:	4770      	bx	lr
      stat = osErrorParameter;
 8005170:	f06f 0003 	mvn.w	r0, #3
 8005174:	e7eb      	b.n	800514e <osSemaphoreAcquire+0x4a>
        stat = osErrorResource;
 8005176:	f06f 0002 	mvn.w	r0, #2
 800517a:	e7e8      	b.n	800514e <osSemaphoreAcquire+0x4a>
  stat = osOK;
 800517c:	2000      	movs	r0, #0
 800517e:	e7e6      	b.n	800514e <osSemaphoreAcquire+0x4a>
 8005180:	2000      	movs	r0, #0
 8005182:	e7e4      	b.n	800514e <osSemaphoreAcquire+0x4a>
 8005184:	20015f24 	.word	0x20015f24
 8005188:	e000ed04 	.word	0xe000ed04

0800518c <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800518c:	b378      	cbz	r0, 80051ee <osSemaphoreRelease+0x62>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800518e:	b500      	push	{lr}
 8005190:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005192:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8005196:	b94b      	cbnz	r3, 80051ac <osSemaphoreRelease+0x20>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005198:	f3ef 8310 	mrs	r3, PRIMASK
 800519c:	b933      	cbnz	r3, 80051ac <osSemaphoreRelease+0x20>
 800519e:	4b18      	ldr	r3, [pc, #96]	; (8005200 <osSemaphoreRelease+0x74>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d118      	bne.n	80051d8 <osSemaphoreRelease+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80051a6:	f3ef 8311 	mrs	r3, BASEPRI
 80051aa:	b1ab      	cbz	r3, 80051d8 <osSemaphoreRelease+0x4c>
    yield = pdFALSE;
 80051ac:	a902      	add	r1, sp, #8
 80051ae:	2300      	movs	r3, #0
 80051b0:	f841 3d04 	str.w	r3, [r1, #-4]!

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80051b4:	f000 fc56 	bl	8005a64 <xQueueGiveFromISR>
 80051b8:	2801      	cmp	r0, #1
 80051ba:	d11b      	bne.n	80051f4 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
 80051bc:	9b01      	ldr	r3, [sp, #4]
 80051be:	b1e3      	cbz	r3, 80051fa <osSemaphoreRelease+0x6e>
 80051c0:	4b10      	ldr	r3, [pc, #64]	; (8005204 <osSemaphoreRelease+0x78>)
 80051c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051c6:	601a      	str	r2, [r3, #0]
 80051c8:	f3bf 8f4f 	dsb	sy
 80051cc:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80051d0:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 80051d2:	b003      	add	sp, #12
 80051d4:	f85d fb04 	ldr.w	pc, [sp], #4
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80051d8:	2300      	movs	r3, #0
 80051da:	461a      	mov	r2, r3
 80051dc:	4619      	mov	r1, r3
 80051de:	f000 fb17 	bl	8005810 <xQueueGenericSend>
      stat = osErrorResource;
 80051e2:	2801      	cmp	r0, #1
 80051e4:	bf0c      	ite	eq
 80051e6:	2000      	moveq	r0, #0
 80051e8:	f06f 0002 	mvnne.w	r0, #2
 80051ec:	e7f1      	b.n	80051d2 <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
 80051ee:	f06f 0003 	mvn.w	r0, #3
}
 80051f2:	4770      	bx	lr
      stat = osErrorResource;
 80051f4:	f06f 0002 	mvn.w	r0, #2
 80051f8:	e7eb      	b.n	80051d2 <osSemaphoreRelease+0x46>
  stat = osOK;
 80051fa:	2000      	movs	r0, #0
 80051fc:	e7e9      	b.n	80051d2 <osSemaphoreRelease+0x46>
 80051fe:	bf00      	nop
 8005200:	20015f24 	.word	0x20015f24
 8005204:	e000ed04 	.word	0xe000ed04

08005208 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005208:	b570      	push	{r4, r5, r6, lr}
 800520a:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800520c:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005210:	2b00      	cmp	r3, #0
 8005212:	d140      	bne.n	8005296 <osMessageQueueNew+0x8e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005214:	f3ef 8310 	mrs	r3, PRIMASK
 8005218:	2b00      	cmp	r3, #0
 800521a:	d13e      	bne.n	800529a <osMessageQueueNew+0x92>
 800521c:	4b29      	ldr	r3, [pc, #164]	; (80052c4 <osMessageQueueNew+0xbc>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2b02      	cmp	r3, #2
 8005222:	d014      	beq.n	800524e <osMessageQueueNew+0x46>
 8005224:	2800      	cmp	r0, #0
 8005226:	d03a      	beq.n	800529e <osMessageQueueNew+0x96>
 8005228:	2900      	cmp	r1, #0
 800522a:	d03a      	beq.n	80052a2 <osMessageQueueNew+0x9a>
 800522c:	4614      	mov	r4, r2
    mem = -1;

    if (attr != NULL) {
 800522e:	2a00      	cmp	r2, #0
 8005230:	d03f      	beq.n	80052b2 <osMessageQueueNew+0xaa>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005232:	6893      	ldr	r3, [r2, #8]
 8005234:	b18b      	cbz	r3, 800525a <osMessageQueueNew+0x52>
 8005236:	68d2      	ldr	r2, [r2, #12]
 8005238:	2a4f      	cmp	r2, #79	; 0x4f
 800523a:	d934      	bls.n	80052a6 <osMessageQueueNew+0x9e>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800523c:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800523e:	b3a2      	cbz	r2, 80052aa <osMessageQueueNew+0xa2>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005240:	fb01 f500 	mul.w	r5, r1, r0
 8005244:	6966      	ldr	r6, [r4, #20]
 8005246:	42ae      	cmp	r6, r5
 8005248:	d21d      	bcs.n	8005286 <osMessageQueueNew+0x7e>
  hQueue = NULL;
 800524a:	2500      	movs	r5, #0
 800524c:	e016      	b.n	800527c <osMessageQueueNew+0x74>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800524e:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005252:	2b00      	cmp	r3, #0
 8005254:	d0e6      	beq.n	8005224 <osMessageQueueNew+0x1c>
  hQueue = NULL;
 8005256:	2500      	movs	r5, #0
 8005258:	e010      	b.n	800527c <osMessageQueueNew+0x74>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800525a:	68d3      	ldr	r3, [r2, #12]
 800525c:	bb3b      	cbnz	r3, 80052ae <osMessageQueueNew+0xa6>
 800525e:	6913      	ldr	r3, [r2, #16]
 8005260:	b10b      	cbz	r3, 8005266 <osMessageQueueNew+0x5e>
  hQueue = NULL;
 8005262:	2500      	movs	r5, #0
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005264:	e00a      	b.n	800527c <osMessageQueueNew+0x74>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005266:	6953      	ldr	r3, [r2, #20]
      if (mem == 0) {
 8005268:	b95b      	cbnz	r3, 8005282 <osMessageQueueNew+0x7a>
        hQueue = xQueueCreate (msg_count, msg_size);
 800526a:	2200      	movs	r2, #0
 800526c:	f000 fa63 	bl	8005736 <xQueueGenericCreate>
    if (hQueue != NULL) {
 8005270:	4605      	mov	r5, r0
 8005272:	b118      	cbz	r0, 800527c <osMessageQueueNew+0x74>
        name = attr->name;
 8005274:	6821      	ldr	r1, [r4, #0]
      vQueueAddToRegistry (hQueue, name);
 8005276:	4628      	mov	r0, r5
 8005278:	f000 fe26 	bl	8005ec8 <vQueueAddToRegistry>
}
 800527c:	4628      	mov	r0, r5
 800527e:	b002      	add	sp, #8
 8005280:	bd70      	pop	{r4, r5, r6, pc}
  hQueue = NULL;
 8005282:	2500      	movs	r5, #0
 8005284:	e7fa      	b.n	800527c <osMessageQueueNew+0x74>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005286:	2500      	movs	r5, #0
 8005288:	9500      	str	r5, [sp, #0]
 800528a:	f000 f9fd 	bl	8005688 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800528e:	4605      	mov	r5, r0
 8005290:	2800      	cmp	r0, #0
 8005292:	d1ef      	bne.n	8005274 <osMessageQueueNew+0x6c>
 8005294:	e7f2      	b.n	800527c <osMessageQueueNew+0x74>
  hQueue = NULL;
 8005296:	2500      	movs	r5, #0
 8005298:	e7f0      	b.n	800527c <osMessageQueueNew+0x74>
 800529a:	2500      	movs	r5, #0
 800529c:	e7ee      	b.n	800527c <osMessageQueueNew+0x74>
 800529e:	2500      	movs	r5, #0
 80052a0:	e7ec      	b.n	800527c <osMessageQueueNew+0x74>
 80052a2:	2500      	movs	r5, #0
 80052a4:	e7ea      	b.n	800527c <osMessageQueueNew+0x74>
 80052a6:	2500      	movs	r5, #0
 80052a8:	e7e8      	b.n	800527c <osMessageQueueNew+0x74>
 80052aa:	2500      	movs	r5, #0
 80052ac:	e7e6      	b.n	800527c <osMessageQueueNew+0x74>
 80052ae:	2500      	movs	r5, #0
 80052b0:	e7e4      	b.n	800527c <osMessageQueueNew+0x74>
        hQueue = xQueueCreate (msg_count, msg_size);
 80052b2:	2200      	movs	r2, #0
 80052b4:	f000 fa3f 	bl	8005736 <xQueueGenericCreate>
    if (hQueue != NULL) {
 80052b8:	4605      	mov	r5, r0
 80052ba:	2800      	cmp	r0, #0
 80052bc:	d0de      	beq.n	800527c <osMessageQueueNew+0x74>
        name = NULL;
 80052be:	2100      	movs	r1, #0
 80052c0:	e7d9      	b.n	8005276 <osMessageQueueNew+0x6e>
 80052c2:	bf00      	nop
 80052c4:	20015f24 	.word	0x20015f24

080052c8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80052c8:	b510      	push	{r4, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052ce:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 80052d2:	b9db      	cbnz	r3, 800530c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052d4:	f3ef 8310 	mrs	r3, PRIMASK
 80052d8:	b9c3      	cbnz	r3, 800530c <osMessageQueuePut+0x44>
 80052da:	4b23      	ldr	r3, [pc, #140]	; (8005368 <osMessageQueuePut+0xa0>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d010      	beq.n	8005304 <osMessageQueuePut+0x3c>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80052e2:	2800      	cmp	r0, #0
 80052e4:	d038      	beq.n	8005358 <osMessageQueuePut+0x90>
 80052e6:	2900      	cmp	r1, #0
 80052e8:	d039      	beq.n	800535e <osMessageQueuePut+0x96>
      stat = osErrorParameter;
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80052ea:	2300      	movs	r3, #0
 80052ec:	4622      	mov	r2, r4
 80052ee:	f000 fa8f 	bl	8005810 <xQueueGenericSend>
 80052f2:	2801      	cmp	r0, #1
 80052f4:	d036      	beq.n	8005364 <osMessageQueuePut+0x9c>
        if (timeout != 0U) {
          stat = osErrorTimeout;
        } else {
          stat = osErrorResource;
 80052f6:	2c00      	cmp	r4, #0
 80052f8:	bf14      	ite	ne
 80052fa:	f06f 0001 	mvnne.w	r0, #1
 80052fe:	f06f 0002 	mvneq.w	r0, #2
 8005302:	e027      	b.n	8005354 <osMessageQueuePut+0x8c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005304:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 8005308:	2b00      	cmp	r3, #0
 800530a:	d0ea      	beq.n	80052e2 <osMessageQueuePut+0x1a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800530c:	b1a8      	cbz	r0, 800533a <osMessageQueuePut+0x72>
 800530e:	b1b9      	cbz	r1, 8005340 <osMessageQueuePut+0x78>
 8005310:	b9cc      	cbnz	r4, 8005346 <osMessageQueuePut+0x7e>
      yield = pdFALSE;
 8005312:	2300      	movs	r3, #0
 8005314:	aa02      	add	r2, sp, #8
 8005316:	f842 3d04 	str.w	r3, [r2, #-4]!
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800531a:	f000 fb3d 	bl	8005998 <xQueueGenericSendFromISR>
 800531e:	2801      	cmp	r0, #1
 8005320:	d114      	bne.n	800534c <osMessageQueuePut+0x84>
        portYIELD_FROM_ISR (yield);
 8005322:	9b01      	ldr	r3, [sp, #4]
 8005324:	b1ab      	cbz	r3, 8005352 <osMessageQueuePut+0x8a>
 8005326:	4b11      	ldr	r3, [pc, #68]	; (800536c <osMessageQueuePut+0xa4>)
 8005328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8005336:	2000      	movs	r0, #0
 8005338:	e00c      	b.n	8005354 <osMessageQueuePut+0x8c>
      stat = osErrorParameter;
 800533a:	f06f 0003 	mvn.w	r0, #3
 800533e:	e009      	b.n	8005354 <osMessageQueuePut+0x8c>
 8005340:	f06f 0003 	mvn.w	r0, #3
 8005344:	e006      	b.n	8005354 <osMessageQueuePut+0x8c>
 8005346:	f06f 0003 	mvn.w	r0, #3
 800534a:	e003      	b.n	8005354 <osMessageQueuePut+0x8c>
        stat = osErrorResource;
 800534c:	f06f 0002 	mvn.w	r0, #2
 8005350:	e000      	b.n	8005354 <osMessageQueuePut+0x8c>
  stat = osOK;
 8005352:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8005354:	b002      	add	sp, #8
 8005356:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8005358:	f06f 0003 	mvn.w	r0, #3
 800535c:	e7fa      	b.n	8005354 <osMessageQueuePut+0x8c>
 800535e:	f06f 0003 	mvn.w	r0, #3
 8005362:	e7f7      	b.n	8005354 <osMessageQueuePut+0x8c>
  stat = osOK;
 8005364:	2000      	movs	r0, #0
 8005366:	e7f5      	b.n	8005354 <osMessageQueuePut+0x8c>
 8005368:	20015f24 	.word	0x20015f24
 800536c:	e000ed04 	.word	0xe000ed04

08005370 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005370:	b510      	push	{r4, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005376:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800537a:	b9d3      	cbnz	r3, 80053b2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800537c:	f3ef 8310 	mrs	r3, PRIMASK
 8005380:	b9bb      	cbnz	r3, 80053b2 <osMessageQueueGet+0x42>
 8005382:	4b23      	ldr	r3, [pc, #140]	; (8005410 <osMessageQueueGet+0xa0>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2b02      	cmp	r3, #2
 8005388:	d00f      	beq.n	80053aa <osMessageQueueGet+0x3a>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800538a:	2800      	cmp	r0, #0
 800538c:	d037      	beq.n	80053fe <osMessageQueueGet+0x8e>
 800538e:	2900      	cmp	r1, #0
 8005390:	d038      	beq.n	8005404 <osMessageQueueGet+0x94>
      stat = osErrorParameter;
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005392:	4622      	mov	r2, r4
 8005394:	f000 fbc0 	bl	8005b18 <xQueueReceive>
 8005398:	2801      	cmp	r0, #1
 800539a:	d036      	beq.n	800540a <osMessageQueueGet+0x9a>
        if (timeout != 0U) {
          stat = osErrorTimeout;
        } else {
          stat = osErrorResource;
 800539c:	2c00      	cmp	r4, #0
 800539e:	bf14      	ite	ne
 80053a0:	f06f 0001 	mvnne.w	r0, #1
 80053a4:	f06f 0002 	mvneq.w	r0, #2
 80053a8:	e027      	b.n	80053fa <osMessageQueueGet+0x8a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80053aa:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d0eb      	beq.n	800538a <osMessageQueueGet+0x1a>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80053b2:	b1a8      	cbz	r0, 80053e0 <osMessageQueueGet+0x70>
 80053b4:	b1b9      	cbz	r1, 80053e6 <osMessageQueueGet+0x76>
 80053b6:	b9cc      	cbnz	r4, 80053ec <osMessageQueueGet+0x7c>
      yield = pdFALSE;
 80053b8:	aa02      	add	r2, sp, #8
 80053ba:	2300      	movs	r3, #0
 80053bc:	f842 3d04 	str.w	r3, [r2, #-4]!
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80053c0:	f000 fd2c 	bl	8005e1c <xQueueReceiveFromISR>
 80053c4:	2801      	cmp	r0, #1
 80053c6:	d114      	bne.n	80053f2 <osMessageQueueGet+0x82>
        portYIELD_FROM_ISR (yield);
 80053c8:	9b01      	ldr	r3, [sp, #4]
 80053ca:	b1ab      	cbz	r3, 80053f8 <osMessageQueueGet+0x88>
 80053cc:	4b11      	ldr	r3, [pc, #68]	; (8005414 <osMessageQueueGet+0xa4>)
 80053ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053d2:	601a      	str	r2, [r3, #0]
 80053d4:	f3bf 8f4f 	dsb	sy
 80053d8:	f3bf 8f6f 	isb	sy
  stat = osOK;
 80053dc:	2000      	movs	r0, #0
 80053de:	e00c      	b.n	80053fa <osMessageQueueGet+0x8a>
      stat = osErrorParameter;
 80053e0:	f06f 0003 	mvn.w	r0, #3
 80053e4:	e009      	b.n	80053fa <osMessageQueueGet+0x8a>
 80053e6:	f06f 0003 	mvn.w	r0, #3
 80053ea:	e006      	b.n	80053fa <osMessageQueueGet+0x8a>
 80053ec:	f06f 0003 	mvn.w	r0, #3
 80053f0:	e003      	b.n	80053fa <osMessageQueueGet+0x8a>
        stat = osErrorResource;
 80053f2:	f06f 0002 	mvn.w	r0, #2
 80053f6:	e000      	b.n	80053fa <osMessageQueueGet+0x8a>
  stat = osOK;
 80053f8:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 80053fa:	b002      	add	sp, #8
 80053fc:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 80053fe:	f06f 0003 	mvn.w	r0, #3
 8005402:	e7fa      	b.n	80053fa <osMessageQueueGet+0x8a>
 8005404:	f06f 0003 	mvn.w	r0, #3
 8005408:	e7f7      	b.n	80053fa <osMessageQueueGet+0x8a>
  stat = osOK;
 800540a:	2000      	movs	r0, #0
 800540c:	e7f5      	b.n	80053fa <osMessageQueueGet+0x8a>
 800540e:	bf00      	nop
 8005410:	20015f24 	.word	0x20015f24
 8005414:	e000ed04 	.word	0xe000ed04

08005418 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005418:	4b03      	ldr	r3, [pc, #12]	; (8005428 <vApplicationGetIdleTaskMemory+0x10>)
 800541a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800541c:	4b03      	ldr	r3, [pc, #12]	; (800542c <vApplicationGetIdleTaskMemory+0x14>)
 800541e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005420:	2380      	movs	r3, #128	; 0x80
 8005422:	6013      	str	r3, [r2, #0]
}
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	20015ec8 	.word	0x20015ec8
 800542c:	20015cc8 	.word	0x20015cc8

08005430 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005430:	4b03      	ldr	r3, [pc, #12]	; (8005440 <vApplicationGetTimerTaskMemory+0x10>)
 8005432:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005434:	4b03      	ldr	r3, [pc, #12]	; (8005444 <vApplicationGetTimerTaskMemory+0x14>)
 8005436:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005438:	f44f 7380 	mov.w	r3, #256	; 0x100
 800543c:	6013      	str	r3, [r2, #0]
}
 800543e:	4770      	bx	lr
 8005440:	20016328 	.word	0x20016328
 8005444:	20015f28 	.word	0x20015f28

08005448 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005448:	f100 0308 	add.w	r3, r0, #8
 800544c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800544e:	f04f 32ff 	mov.w	r2, #4294967295
 8005452:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005454:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005456:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005458:	2300      	movs	r3, #0
 800545a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800545c:	4770      	bx	lr

0800545e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800545e:	2300      	movs	r3, #0
 8005460:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005462:	4770      	bx	lr

08005464 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8005464:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005466:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005468:	689a      	ldr	r2, [r3, #8]
 800546a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800546c:	689a      	ldr	r2, [r3, #8]
 800546e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005470:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005472:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8005474:	6803      	ldr	r3, [r0, #0]
 8005476:	3301      	adds	r3, #1
 8005478:	6003      	str	r3, [r0, #0]
}
 800547a:	4770      	bx	lr

0800547c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800547c:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800547e:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005480:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005484:	d002      	beq.n	800548c <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005486:	f100 0208 	add.w	r2, r0, #8
 800548a:	e002      	b.n	8005492 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 800548c:	6902      	ldr	r2, [r0, #16]
 800548e:	e004      	b.n	800549a <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005490:	461a      	mov	r2, r3
 8005492:	6853      	ldr	r3, [r2, #4]
 8005494:	681c      	ldr	r4, [r3, #0]
 8005496:	42ac      	cmp	r4, r5
 8005498:	d9fa      	bls.n	8005490 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800549a:	6853      	ldr	r3, [r2, #4]
 800549c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800549e:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80054a0:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80054a2:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80054a4:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80054a6:	6803      	ldr	r3, [r0, #0]
 80054a8:	3301      	adds	r3, #1
 80054aa:	6003      	str	r3, [r0, #0]
}
 80054ac:	bc30      	pop	{r4, r5}
 80054ae:	4770      	bx	lr

080054b0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80054b0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80054b2:	6842      	ldr	r2, [r0, #4]
 80054b4:	6881      	ldr	r1, [r0, #8]
 80054b6:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80054b8:	6882      	ldr	r2, [r0, #8]
 80054ba:	6841      	ldr	r1, [r0, #4]
 80054bc:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80054be:	685a      	ldr	r2, [r3, #4]
 80054c0:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80054c2:	bf04      	itt	eq
 80054c4:	6882      	ldreq	r2, [r0, #8]
 80054c6:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80054c8:	2200      	movs	r2, #0
 80054ca:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	3a01      	subs	r2, #1
 80054d0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80054d2:	6818      	ldr	r0, [r3, #0]
}
 80054d4:	4770      	bx	lr

080054d6 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80054d6:	b510      	push	{r4, lr}
 80054d8:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80054da:	f001 fd4b 	bl	8006f74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80054de:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80054e0:	f001 fd6a 	bl	8006fb8 <vPortExitCritical>

	return xReturn;
}
 80054e4:	fab4 f084 	clz	r0, r4
 80054e8:	0940      	lsrs	r0, r0, #5
 80054ea:	bd10      	pop	{r4, pc}

080054ec <prvCopyDataToQueue>:
{
 80054ec:	b570      	push	{r4, r5, r6, lr}
 80054ee:	4604      	mov	r4, r0
 80054f0:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054f2:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80054f4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80054f6:	b95a      	cbnz	r2, 8005510 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80054f8:	6803      	ldr	r3, [r0, #0]
 80054fa:	b11b      	cbz	r3, 8005504 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 80054fc:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80054fe:	3501      	adds	r5, #1
 8005500:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8005502:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005504:	6840      	ldr	r0, [r0, #4]
 8005506:	f001 fa2b 	bl	8006960 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800550a:	2300      	movs	r3, #0
 800550c:	6063      	str	r3, [r4, #4]
 800550e:	e7f6      	b.n	80054fe <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 8005510:	b96e      	cbnz	r6, 800552e <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005512:	6880      	ldr	r0, [r0, #8]
 8005514:	f001 ffac 	bl	8007470 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005518:	68a3      	ldr	r3, [r4, #8]
 800551a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800551c:	4413      	add	r3, r2
 800551e:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005520:	6862      	ldr	r2, [r4, #4]
 8005522:	4293      	cmp	r3, r2
 8005524:	d319      	bcc.n	800555a <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005526:	6823      	ldr	r3, [r4, #0]
 8005528:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800552a:	2000      	movs	r0, #0
 800552c:	e7e7      	b.n	80054fe <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800552e:	68c0      	ldr	r0, [r0, #12]
 8005530:	f001 ff9e 	bl	8007470 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005534:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005536:	4252      	negs	r2, r2
 8005538:	68e3      	ldr	r3, [r4, #12]
 800553a:	4413      	add	r3, r2
 800553c:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800553e:	6821      	ldr	r1, [r4, #0]
 8005540:	428b      	cmp	r3, r1
 8005542:	d202      	bcs.n	800554a <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005544:	6863      	ldr	r3, [r4, #4]
 8005546:	441a      	add	r2, r3
 8005548:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800554a:	2e02      	cmp	r6, #2
 800554c:	d001      	beq.n	8005552 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 800554e:	2000      	movs	r0, #0
 8005550:	e7d5      	b.n	80054fe <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005552:	b125      	cbz	r5, 800555e <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 8005554:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 8005556:	2000      	movs	r0, #0
 8005558:	e7d1      	b.n	80054fe <prvCopyDataToQueue+0x12>
 800555a:	2000      	movs	r0, #0
 800555c:	e7cf      	b.n	80054fe <prvCopyDataToQueue+0x12>
 800555e:	2000      	movs	r0, #0
 8005560:	e7cd      	b.n	80054fe <prvCopyDataToQueue+0x12>

08005562 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005562:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005564:	b172      	cbz	r2, 8005584 <prvCopyDataFromQueue+0x22>
{
 8005566:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005568:	68c3      	ldr	r3, [r0, #12]
 800556a:	4413      	add	r3, r2
 800556c:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800556e:	6844      	ldr	r4, [r0, #4]
 8005570:	42a3      	cmp	r3, r4
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005572:	bf24      	itt	cs
 8005574:	6803      	ldrcs	r3, [r0, #0]
 8005576:	60c3      	strcs	r3, [r0, #12]
 8005578:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800557a:	68c1      	ldr	r1, [r0, #12]
 800557c:	4620      	mov	r0, r4
 800557e:	f001 ff77 	bl	8007470 <memcpy>
}
 8005582:	bd10      	pop	{r4, pc}
 8005584:	4770      	bx	lr

08005586 <prvUnlockQueue>:
{
 8005586:	b570      	push	{r4, r5, r6, lr}
 8005588:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 800558a:	f001 fcf3 	bl	8006f74 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800558e:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 8005592:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005594:	2c00      	cmp	r4, #0
 8005596:	dd11      	ble.n	80055bc <prvUnlockQueue+0x36>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005598:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800559a:	b17b      	cbz	r3, 80055bc <prvUnlockQueue+0x36>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800559c:	f105 0624 	add.w	r6, r5, #36	; 0x24
 80055a0:	e006      	b.n	80055b0 <prvUnlockQueue+0x2a>
						vTaskMissedYield();
 80055a2:	f001 f97d 	bl	80068a0 <vTaskMissedYield>
 80055a6:	3c01      	subs	r4, #1
 80055a8:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80055aa:	b13c      	cbz	r4, 80055bc <prvUnlockQueue+0x36>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055ac:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80055ae:	b12b      	cbz	r3, 80055bc <prvUnlockQueue+0x36>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055b0:	4630      	mov	r0, r6
 80055b2:	f001 f8e5 	bl	8006780 <xTaskRemoveFromEventList>
 80055b6:	2800      	cmp	r0, #0
 80055b8:	d0f5      	beq.n	80055a6 <prvUnlockQueue+0x20>
 80055ba:	e7f2      	b.n	80055a2 <prvUnlockQueue+0x1c>
		pxQueue->cTxLock = queueUNLOCKED;
 80055bc:	23ff      	movs	r3, #255	; 0xff
 80055be:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 80055c2:	f001 fcf9 	bl	8006fb8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80055c6:	f001 fcd5 	bl	8006f74 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80055ca:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 80055ce:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055d0:	2c00      	cmp	r4, #0
 80055d2:	dd11      	ble.n	80055f8 <prvUnlockQueue+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055d4:	692b      	ldr	r3, [r5, #16]
 80055d6:	b17b      	cbz	r3, 80055f8 <prvUnlockQueue+0x72>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055d8:	f105 0610 	add.w	r6, r5, #16
 80055dc:	e006      	b.n	80055ec <prvUnlockQueue+0x66>
					vTaskMissedYield();
 80055de:	f001 f95f 	bl	80068a0 <vTaskMissedYield>
 80055e2:	3c01      	subs	r4, #1
 80055e4:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80055e6:	b13c      	cbz	r4, 80055f8 <prvUnlockQueue+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055e8:	692b      	ldr	r3, [r5, #16]
 80055ea:	b12b      	cbz	r3, 80055f8 <prvUnlockQueue+0x72>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055ec:	4630      	mov	r0, r6
 80055ee:	f001 f8c7 	bl	8006780 <xTaskRemoveFromEventList>
 80055f2:	2800      	cmp	r0, #0
 80055f4:	d0f5      	beq.n	80055e2 <prvUnlockQueue+0x5c>
 80055f6:	e7f2      	b.n	80055de <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80055f8:	23ff      	movs	r3, #255	; 0xff
 80055fa:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 80055fe:	f001 fcdb 	bl	8006fb8 <vPortExitCritical>
}
 8005602:	bd70      	pop	{r4, r5, r6, pc}

08005604 <xQueueGenericReset>:
{
 8005604:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8005606:	b940      	cbnz	r0, 800561a <xQueueGenericReset+0x16>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560c:	f383 8811 	msr	BASEPRI, r3
 8005610:	f3bf 8f6f 	isb	sy
 8005614:	f3bf 8f4f 	dsb	sy
 8005618:	e7fe      	b.n	8005618 <xQueueGenericReset+0x14>
 800561a:	4604      	mov	r4, r0
 800561c:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 800561e:	f001 fca9 	bl	8006f74 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005622:	6822      	ldr	r2, [r4, #0]
 8005624:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005626:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005628:	fb03 f301 	mul.w	r3, r3, r1
 800562c:	18d0      	adds	r0, r2, r3
 800562e:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005630:	2000      	movs	r0, #0
 8005632:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005634:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005636:	1a5b      	subs	r3, r3, r1
 8005638:	4413      	add	r3, r2
 800563a:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800563c:	23ff      	movs	r3, #255	; 0xff
 800563e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005642:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8005646:	b9a5      	cbnz	r5, 8005672 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005648:	6923      	ldr	r3, [r4, #16]
 800564a:	b91b      	cbnz	r3, 8005654 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 800564c:	f001 fcb4 	bl	8006fb8 <vPortExitCritical>
}
 8005650:	2001      	movs	r0, #1
 8005652:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005654:	f104 0010 	add.w	r0, r4, #16
 8005658:	f001 f892 	bl	8006780 <xTaskRemoveFromEventList>
 800565c:	2800      	cmp	r0, #0
 800565e:	d0f5      	beq.n	800564c <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
 8005660:	4b08      	ldr	r3, [pc, #32]	; (8005684 <xQueueGenericReset+0x80>)
 8005662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005666:	601a      	str	r2, [r3, #0]
 8005668:	f3bf 8f4f 	dsb	sy
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	e7ec      	b.n	800564c <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005672:	f104 0010 	add.w	r0, r4, #16
 8005676:	f7ff fee7 	bl	8005448 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800567a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800567e:	f7ff fee3 	bl	8005448 <vListInitialise>
 8005682:	e7e3      	b.n	800564c <xQueueGenericReset+0x48>
 8005684:	e000ed04 	.word	0xe000ed04

08005688 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005688:	b940      	cbnz	r0, 800569c <xQueueGenericCreateStatic+0x14>
 800568a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568e:	f383 8811 	msr	BASEPRI, r3
 8005692:	f3bf 8f6f 	isb	sy
 8005696:	f3bf 8f4f 	dsb	sy
 800569a:	e7fe      	b.n	800569a <xQueueGenericCreateStatic+0x12>
	{
 800569c:	b510      	push	{r4, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 80056a2:	b153      	cbz	r3, 80056ba <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80056a4:	b192      	cbz	r2, 80056cc <xQueueGenericCreateStatic+0x44>
 80056a6:	b9d9      	cbnz	r1, 80056e0 <xQueueGenericCreateStatic+0x58>
 80056a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ac:	f383 8811 	msr	BASEPRI, r3
 80056b0:	f3bf 8f6f 	isb	sy
 80056b4:	f3bf 8f4f 	dsb	sy
 80056b8:	e7fe      	b.n	80056b8 <xQueueGenericCreateStatic+0x30>
 80056ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056be:	f383 8811 	msr	BASEPRI, r3
 80056c2:	f3bf 8f6f 	isb	sy
 80056c6:	f3bf 8f4f 	dsb	sy
 80056ca:	e7fe      	b.n	80056ca <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80056cc:	b349      	cbz	r1, 8005722 <xQueueGenericCreateStatic+0x9a>
 80056ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d2:	f383 8811 	msr	BASEPRI, r3
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	e7fe      	b.n	80056de <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80056e0:	2050      	movs	r0, #80	; 0x50
 80056e2:	9001      	str	r0, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80056e4:	9801      	ldr	r0, [sp, #4]
 80056e6:	2850      	cmp	r0, #80	; 0x50
 80056e8:	d008      	beq.n	80056fc <xQueueGenericCreateStatic+0x74>
 80056ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ee:	f383 8811 	msr	BASEPRI, r3
 80056f2:	f3bf 8f6f 	isb	sy
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	e7fe      	b.n	80056fa <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80056fc:	2001      	movs	r0, #1
 80056fe:	f883 0046 	strb.w	r0, [r3, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005702:	601a      	str	r2, [r3, #0]
 8005704:	4622      	mov	r2, r4
 8005706:	461c      	mov	r4, r3
	pxNewQueue->uxLength = uxQueueLength;
 8005708:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800570a:	6419      	str	r1, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800570c:	2101      	movs	r1, #1
 800570e:	4618      	mov	r0, r3
 8005710:	f7ff ff78 	bl	8005604 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8005714:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8005718:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 800571c:	4620      	mov	r0, r4
 800571e:	b002      	add	sp, #8
 8005720:	bd10      	pop	{r4, pc}
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005722:	2250      	movs	r2, #80	; 0x50
 8005724:	9201      	str	r2, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005726:	9a01      	ldr	r2, [sp, #4]
 8005728:	2a50      	cmp	r2, #80	; 0x50
 800572a:	d1de      	bne.n	80056ea <xQueueGenericCreateStatic+0x62>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800572c:	2201      	movs	r2, #1
 800572e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005732:	601b      	str	r3, [r3, #0]
 8005734:	e7e6      	b.n	8005704 <xQueueGenericCreateStatic+0x7c>

08005736 <xQueueGenericCreate>:
	{
 8005736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005738:	b940      	cbnz	r0, 800574c <xQueueGenericCreate+0x16>
 800573a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573e:	f383 8811 	msr	BASEPRI, r3
 8005742:	f3bf 8f6f 	isb	sy
 8005746:	f3bf 8f4f 	dsb	sy
 800574a:	e7fe      	b.n	800574a <xQueueGenericCreate+0x14>
 800574c:	4606      	mov	r6, r0
 800574e:	4617      	mov	r7, r2
 8005750:	460d      	mov	r5, r1
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005752:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005756:	3050      	adds	r0, #80	; 0x50
 8005758:	f001 fd94 	bl	8007284 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800575c:	4604      	mov	r4, r0
 800575e:	b180      	cbz	r0, 8005782 <xQueueGenericCreate+0x4c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005760:	2300      	movs	r3, #0
 8005762:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8005766:	b11d      	cbz	r5, 8005770 <xQueueGenericCreate+0x3a>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005768:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800576c:	6003      	str	r3, [r0, #0]
 800576e:	e000      	b.n	8005772 <xQueueGenericCreate+0x3c>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005770:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8005772:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005774:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005776:	2101      	movs	r1, #1
 8005778:	4620      	mov	r0, r4
 800577a:	f7ff ff43 	bl	8005604 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800577e:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 8005782:	4620      	mov	r0, r4
 8005784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005786 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 8005786:	b940      	cbnz	r0, 800579a <xQueueCreateCountingSemaphoreStatic+0x14>
 8005788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578c:	f383 8811 	msr	BASEPRI, r3
 8005790:	f3bf 8f6f 	isb	sy
 8005794:	f3bf 8f4f 	dsb	sy
 8005798:	e7fe      	b.n	8005798 <xQueueCreateCountingSemaphoreStatic+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 800579a:	4288      	cmp	r0, r1
 800579c:	d208      	bcs.n	80057b0 <xQueueCreateCountingSemaphoreStatic+0x2a>
 800579e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a2:	f383 8811 	msr	BASEPRI, r3
 80057a6:	f3bf 8f6f 	isb	sy
 80057aa:	f3bf 8f4f 	dsb	sy
 80057ae:	e7fe      	b.n	80057ae <xQueueCreateCountingSemaphoreStatic+0x28>
	{
 80057b0:	b510      	push	{r4, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	4613      	mov	r3, r2
 80057b6:	460c      	mov	r4, r1
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80057b8:	2202      	movs	r2, #2
 80057ba:	9200      	str	r2, [sp, #0]
 80057bc:	2200      	movs	r2, #0
 80057be:	4611      	mov	r1, r2
 80057c0:	f7ff ff62 	bl	8005688 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 80057c4:	4603      	mov	r3, r0
 80057c6:	b100      	cbz	r0, 80057ca <xQueueCreateCountingSemaphoreStatic+0x44>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80057c8:	6384      	str	r4, [r0, #56]	; 0x38
	}
 80057ca:	4618      	mov	r0, r3
 80057cc:	b002      	add	sp, #8
 80057ce:	bd10      	pop	{r4, pc}

080057d0 <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 80057d0:	b940      	cbnz	r0, 80057e4 <xQueueCreateCountingSemaphore+0x14>
 80057d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d6:	f383 8811 	msr	BASEPRI, r3
 80057da:	f3bf 8f6f 	isb	sy
 80057de:	f3bf 8f4f 	dsb	sy
 80057e2:	e7fe      	b.n	80057e2 <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 80057e4:	4288      	cmp	r0, r1
 80057e6:	d208      	bcs.n	80057fa <xQueueCreateCountingSemaphore+0x2a>
 80057e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ec:	f383 8811 	msr	BASEPRI, r3
 80057f0:	f3bf 8f6f 	isb	sy
 80057f4:	f3bf 8f4f 	dsb	sy
 80057f8:	e7fe      	b.n	80057f8 <xQueueCreateCountingSemaphore+0x28>
	{
 80057fa:	b510      	push	{r4, lr}
 80057fc:	460c      	mov	r4, r1
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80057fe:	2202      	movs	r2, #2
 8005800:	2100      	movs	r1, #0
 8005802:	f7ff ff98 	bl	8005736 <xQueueGenericCreate>
		if( xHandle != NULL )
 8005806:	4603      	mov	r3, r0
 8005808:	b100      	cbz	r0, 800580c <xQueueCreateCountingSemaphore+0x3c>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800580a:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800580c:	4618      	mov	r0, r3
 800580e:	bd10      	pop	{r4, pc}

08005810 <xQueueGenericSend>:
{
 8005810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005814:	b084      	sub	sp, #16
 8005816:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8005818:	b160      	cbz	r0, 8005834 <xQueueGenericSend+0x24>
 800581a:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800581c:	b999      	cbnz	r1, 8005846 <xQueueGenericSend+0x36>
 800581e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005820:	b18a      	cbz	r2, 8005846 <xQueueGenericSend+0x36>
 8005822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005826:	f383 8811 	msr	BASEPRI, r3
 800582a:	f3bf 8f6f 	isb	sy
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	e7fe      	b.n	8005832 <xQueueGenericSend+0x22>
 8005834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005838:	f383 8811 	msr	BASEPRI, r3
 800583c:	f3bf 8f6f 	isb	sy
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	e7fe      	b.n	8005844 <xQueueGenericSend+0x34>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005846:	2b02      	cmp	r3, #2
 8005848:	d10b      	bne.n	8005862 <xQueueGenericSend+0x52>
 800584a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800584c:	2a01      	cmp	r2, #1
 800584e:	d008      	beq.n	8005862 <xQueueGenericSend+0x52>
 8005850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005854:	f383 8811 	msr	BASEPRI, r3
 8005858:	f3bf 8f6f 	isb	sy
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	e7fe      	b.n	8005860 <xQueueGenericSend+0x50>
 8005862:	461e      	mov	r6, r3
 8005864:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005866:	f001 f821 	bl	80068ac <xTaskGetSchedulerState>
 800586a:	b950      	cbnz	r0, 8005882 <xQueueGenericSend+0x72>
 800586c:	9b01      	ldr	r3, [sp, #4]
 800586e:	b173      	cbz	r3, 800588e <xQueueGenericSend+0x7e>
 8005870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005874:	f383 8811 	msr	BASEPRI, r3
 8005878:	f3bf 8f6f 	isb	sy
 800587c:	f3bf 8f4f 	dsb	sy
 8005880:	e7fe      	b.n	8005880 <xQueueGenericSend+0x70>
 8005882:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8005884:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8005888:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8005994 <xQueueGenericSend+0x184>
 800588c:	e033      	b.n	80058f6 <xQueueGenericSend+0xe6>
 800588e:	2500      	movs	r5, #0
 8005890:	e7f8      	b.n	8005884 <xQueueGenericSend+0x74>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005892:	4632      	mov	r2, r6
 8005894:	4639      	mov	r1, r7
 8005896:	4620      	mov	r0, r4
 8005898:	f7ff fe28 	bl	80054ec <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800589c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800589e:	b94b      	cbnz	r3, 80058b4 <xQueueGenericSend+0xa4>
					else if( xYieldRequired != pdFALSE )
 80058a0:	b1a8      	cbz	r0, 80058ce <xQueueGenericSend+0xbe>
						queueYIELD_IF_USING_PREEMPTION();
 80058a2:	4b3c      	ldr	r3, [pc, #240]	; (8005994 <xQueueGenericSend+0x184>)
 80058a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	f3bf 8f4f 	dsb	sy
 80058ae:	f3bf 8f6f 	isb	sy
 80058b2:	e00c      	b.n	80058ce <xQueueGenericSend+0xbe>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80058b8:	f000 ff62 	bl	8006780 <xTaskRemoveFromEventList>
 80058bc:	b138      	cbz	r0, 80058ce <xQueueGenericSend+0xbe>
							queueYIELD_IF_USING_PREEMPTION();
 80058be:	4b35      	ldr	r3, [pc, #212]	; (8005994 <xQueueGenericSend+0x184>)
 80058c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058c4:	601a      	str	r2, [r3, #0]
 80058c6:	f3bf 8f4f 	dsb	sy
 80058ca:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80058ce:	f001 fb73 	bl	8006fb8 <vPortExitCritical>
				return pdPASS;
 80058d2:	2001      	movs	r0, #1
}
 80058d4:	b004      	add	sp, #16
 80058d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
 80058da:	f001 fb6d 	bl	8006fb8 <vPortExitCritical>
					return errQUEUE_FULL;
 80058de:	2000      	movs	r0, #0
 80058e0:	e7f8      	b.n	80058d4 <xQueueGenericSend+0xc4>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058e2:	a802      	add	r0, sp, #8
 80058e4:	f000 ff90 	bl	8006808 <vTaskInternalSetTimeOutState>
 80058e8:	e012      	b.n	8005910 <xQueueGenericSend+0x100>
				prvUnlockQueue( pxQueue );
 80058ea:	4620      	mov	r0, r4
 80058ec:	f7ff fe4b 	bl	8005586 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058f0:	f000 fe1c 	bl	800652c <xTaskResumeAll>
 80058f4:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 80058f6:	f001 fb3d 	bl	8006f74 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80058fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80058fe:	429a      	cmp	r2, r3
 8005900:	d3c7      	bcc.n	8005892 <xQueueGenericSend+0x82>
 8005902:	2e02      	cmp	r6, #2
 8005904:	d0c5      	beq.n	8005892 <xQueueGenericSend+0x82>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005906:	9b01      	ldr	r3, [sp, #4]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d0e6      	beq.n	80058da <xQueueGenericSend+0xca>
				else if( xEntryTimeSet == pdFALSE )
 800590c:	2d00      	cmp	r5, #0
 800590e:	d0e8      	beq.n	80058e2 <xQueueGenericSend+0xd2>
		taskEXIT_CRITICAL();
 8005910:	f001 fb52 	bl	8006fb8 <vPortExitCritical>
		vTaskSuspendAll();
 8005914:	f000 fd68 	bl	80063e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005918:	f001 fb2c 	bl	8006f74 <vPortEnterCritical>
 800591c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005920:	b25b      	sxtb	r3, r3
 8005922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005926:	bf08      	it	eq
 8005928:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 800592c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005930:	b25b      	sxtb	r3, r3
 8005932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005936:	bf08      	it	eq
 8005938:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 800593c:	f001 fb3c 	bl	8006fb8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005940:	a901      	add	r1, sp, #4
 8005942:	a802      	add	r0, sp, #8
 8005944:	f000 ff6c 	bl	8006820 <xTaskCheckForTimeOut>
 8005948:	b9e8      	cbnz	r0, 8005986 <xQueueGenericSend+0x176>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800594a:	f001 fb13 	bl	8006f74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800594e:	f8d4 a038 	ldr.w	sl, [r4, #56]	; 0x38
 8005952:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8005954:	f001 fb30 	bl	8006fb8 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005958:	45aa      	cmp	sl, r5
 800595a:	d1c6      	bne.n	80058ea <xQueueGenericSend+0xda>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800595c:	9901      	ldr	r1, [sp, #4]
 800595e:	f104 0010 	add.w	r0, r4, #16
 8005962:	f000 fed7 	bl	8006714 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005966:	4620      	mov	r0, r4
 8005968:	f7ff fe0d 	bl	8005586 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800596c:	f000 fdde 	bl	800652c <xTaskResumeAll>
 8005970:	2800      	cmp	r0, #0
 8005972:	d1bf      	bne.n	80058f4 <xQueueGenericSend+0xe4>
					portYIELD_WITHIN_API();
 8005974:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005978:	f8c9 3000 	str.w	r3, [r9]
 800597c:	f3bf 8f4f 	dsb	sy
 8005980:	f3bf 8f6f 	isb	sy
 8005984:	e7b6      	b.n	80058f4 <xQueueGenericSend+0xe4>
			prvUnlockQueue( pxQueue );
 8005986:	4620      	mov	r0, r4
 8005988:	f7ff fdfd 	bl	8005586 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800598c:	f000 fdce 	bl	800652c <xTaskResumeAll>
			return errQUEUE_FULL;
 8005990:	2000      	movs	r0, #0
 8005992:	e79f      	b.n	80058d4 <xQueueGenericSend+0xc4>
 8005994:	e000ed04 	.word	0xe000ed04

08005998 <xQueueGenericSendFromISR>:
{
 8005998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800599c:	b160      	cbz	r0, 80059b8 <xQueueGenericSendFromISR+0x20>
 800599e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059a0:	b999      	cbnz	r1, 80059ca <xQueueGenericSendFromISR+0x32>
 80059a2:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80059a4:	b188      	cbz	r0, 80059ca <xQueueGenericSendFromISR+0x32>
 80059a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059aa:	f383 8811 	msr	BASEPRI, r3
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	e7fe      	b.n	80059b6 <xQueueGenericSendFromISR+0x1e>
 80059b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059bc:	f383 8811 	msr	BASEPRI, r3
 80059c0:	f3bf 8f6f 	isb	sy
 80059c4:	f3bf 8f4f 	dsb	sy
 80059c8:	e7fe      	b.n	80059c8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d10b      	bne.n	80059e6 <xQueueGenericSendFromISR+0x4e>
 80059ce:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80059d0:	2801      	cmp	r0, #1
 80059d2:	d008      	beq.n	80059e6 <xQueueGenericSendFromISR+0x4e>
 80059d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d8:	f383 8811 	msr	BASEPRI, r3
 80059dc:	f3bf 8f6f 	isb	sy
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	e7fe      	b.n	80059e4 <xQueueGenericSendFromISR+0x4c>
 80059e6:	461f      	mov	r7, r3
 80059e8:	4690      	mov	r8, r2
 80059ea:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80059ec:	f001 fbf0 	bl	80071d0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80059f0:	f3ef 8611 	mrs	r6, BASEPRI
 80059f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f8:	f383 8811 	msr	BASEPRI, r3
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a04:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005a06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d303      	bcc.n	8005a14 <xQueueGenericSendFromISR+0x7c>
 8005a0c:	2f02      	cmp	r7, #2
 8005a0e:	d001      	beq.n	8005a14 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 8005a10:	2000      	movs	r0, #0
 8005a12:	e00f      	b.n	8005a34 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
 8005a14:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8005a18:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a1a:	463a      	mov	r2, r7
 8005a1c:	4649      	mov	r1, r9
 8005a1e:	4620      	mov	r0, r4
 8005a20:	f7ff fd64 	bl	80054ec <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8005a24:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005a28:	d008      	beq.n	8005a3c <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a2a:	1c6b      	adds	r3, r5, #1
 8005a2c:	b25b      	sxtb	r3, r3
 8005a2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8005a32:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005a34:	f386 8811 	msr	BASEPRI, r6
}
 8005a38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a3e:	b15b      	cbz	r3, 8005a58 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a40:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005a44:	f000 fe9c 	bl	8006780 <xTaskRemoveFromEventList>
 8005a48:	b140      	cbz	r0, 8005a5c <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 8005a4a:	f1b8 0f00 	cmp.w	r8, #0
 8005a4e:	d007      	beq.n	8005a60 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005a50:	2001      	movs	r0, #1
 8005a52:	f8c8 0000 	str.w	r0, [r8]
 8005a56:	e7ed      	b.n	8005a34 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
 8005a58:	2001      	movs	r0, #1
 8005a5a:	e7eb      	b.n	8005a34 <xQueueGenericSendFromISR+0x9c>
 8005a5c:	2001      	movs	r0, #1
 8005a5e:	e7e9      	b.n	8005a34 <xQueueGenericSendFromISR+0x9c>
 8005a60:	2001      	movs	r0, #1
 8005a62:	e7e7      	b.n	8005a34 <xQueueGenericSendFromISR+0x9c>

08005a64 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8005a64:	b160      	cbz	r0, 8005a80 <xQueueGiveFromISR+0x1c>
{
 8005a66:	b570      	push	{r4, r5, r6, lr}
 8005a68:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8005a6a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005a6c:	b18b      	cbz	r3, 8005a92 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8005a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a72:	f383 8811 	msr	BASEPRI, r3
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	e7fe      	b.n	8005a7e <xQueueGiveFromISR+0x1a>
 8005a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a84:	f383 8811 	msr	BASEPRI, r3
 8005a88:	f3bf 8f6f 	isb	sy
 8005a8c:	f3bf 8f4f 	dsb	sy
 8005a90:	e7fe      	b.n	8005a90 <xQueueGiveFromISR+0x2c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8005a92:	6803      	ldr	r3, [r0, #0]
 8005a94:	b32b      	cbz	r3, 8005ae2 <xQueueGiveFromISR+0x7e>
 8005a96:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a98:	f001 fb9a 	bl	80071d0 <vPortValidateInterruptPriority>
	__asm volatile
 8005a9c:	f3ef 8511 	mrs	r5, BASEPRI
 8005aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa4:	f383 8811 	msr	BASEPRI, r3
 8005aa8:	f3bf 8f6f 	isb	sy
 8005aac:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ab0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005ab2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d926      	bls.n	8005b06 <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ab8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005abc:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005abe:	3201      	adds	r2, #1
 8005ac0:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8005ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac6:	d118      	bne.n	8005afa <xQueueGiveFromISR+0x96>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ac8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005aca:	b1f3      	cbz	r3, 8005b0a <xQueueGiveFromISR+0xa6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005acc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005ad0:	f000 fe56 	bl	8006780 <xTaskRemoveFromEventList>
 8005ad4:	b1d8      	cbz	r0, 8005b0e <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 8005ad6:	b1e6      	cbz	r6, 8005b12 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005ad8:	2001      	movs	r0, #1
 8005ada:	6030      	str	r0, [r6, #0]
	__asm volatile
 8005adc:	f385 8811 	msr	BASEPRI, r5
}
 8005ae0:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8005ae2:	6843      	ldr	r3, [r0, #4]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d0d6      	beq.n	8005a96 <xQueueGiveFromISR+0x32>
	__asm volatile
 8005ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aec:	f383 8811 	msr	BASEPRI, r3
 8005af0:	f3bf 8f6f 	isb	sy
 8005af4:	f3bf 8f4f 	dsb	sy
 8005af8:	e7fe      	b.n	8005af8 <xQueueGiveFromISR+0x94>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005afa:	3301      	adds	r3, #1
 8005afc:	b25b      	sxtb	r3, r3
 8005afe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 8005b02:	2001      	movs	r0, #1
 8005b04:	e7ea      	b.n	8005adc <xQueueGiveFromISR+0x78>
			xReturn = errQUEUE_FULL;
 8005b06:	2000      	movs	r0, #0
 8005b08:	e7e8      	b.n	8005adc <xQueueGiveFromISR+0x78>
			xReturn = pdPASS;
 8005b0a:	2001      	movs	r0, #1
 8005b0c:	e7e6      	b.n	8005adc <xQueueGiveFromISR+0x78>
 8005b0e:	2001      	movs	r0, #1
 8005b10:	e7e4      	b.n	8005adc <xQueueGiveFromISR+0x78>
 8005b12:	2001      	movs	r0, #1
 8005b14:	e7e2      	b.n	8005adc <xQueueGiveFromISR+0x78>
	...

08005b18 <xQueueReceive>:
{
 8005b18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b1c:	b085      	sub	sp, #20
 8005b1e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005b20:	b160      	cbz	r0, 8005b3c <xQueueReceive+0x24>
 8005b22:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b24:	b999      	cbnz	r1, 8005b4e <xQueueReceive+0x36>
 8005b26:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005b28:	b18b      	cbz	r3, 8005b4e <xQueueReceive+0x36>
 8005b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2e:	f383 8811 	msr	BASEPRI, r3
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	e7fe      	b.n	8005b3a <xQueueReceive+0x22>
 8005b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b40:	f383 8811 	msr	BASEPRI, r3
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	e7fe      	b.n	8005b4c <xQueueReceive+0x34>
 8005b4e:	460e      	mov	r6, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b50:	f000 feac 	bl	80068ac <xTaskGetSchedulerState>
 8005b54:	b950      	cbnz	r0, 8005b6c <xQueueReceive+0x54>
 8005b56:	9b01      	ldr	r3, [sp, #4]
 8005b58:	b173      	cbz	r3, 8005b78 <xQueueReceive+0x60>
 8005b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5e:	f383 8811 	msr	BASEPRI, r3
 8005b62:	f3bf 8f6f 	isb	sy
 8005b66:	f3bf 8f4f 	dsb	sy
 8005b6a:	e7fe      	b.n	8005b6a <xQueueReceive+0x52>
 8005b6c:	2700      	movs	r7, #0
		prvLockQueue( pxQueue );
 8005b6e:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8005b72:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8005c70 <xQueueReceive+0x158>
 8005b76:	e037      	b.n	8005be8 <xQueueReceive+0xd0>
 8005b78:	2700      	movs	r7, #0
 8005b7a:	e7f8      	b.n	8005b6e <xQueueReceive+0x56>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b7c:	4631      	mov	r1, r6
 8005b7e:	4620      	mov	r0, r4
 8005b80:	f7ff fcef 	bl	8005562 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b84:	3d01      	subs	r5, #1
 8005b86:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b88:	6923      	ldr	r3, [r4, #16]
 8005b8a:	b92b      	cbnz	r3, 8005b98 <xQueueReceive+0x80>
				taskEXIT_CRITICAL();
 8005b8c:	f001 fa14 	bl	8006fb8 <vPortExitCritical>
				return pdPASS;
 8005b90:	2001      	movs	r0, #1
}
 8005b92:	b005      	add	sp, #20
 8005b94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b98:	f104 0010 	add.w	r0, r4, #16
 8005b9c:	f000 fdf0 	bl	8006780 <xTaskRemoveFromEventList>
 8005ba0:	2800      	cmp	r0, #0
 8005ba2:	d0f3      	beq.n	8005b8c <xQueueReceive+0x74>
						queueYIELD_IF_USING_PREEMPTION();
 8005ba4:	4b32      	ldr	r3, [pc, #200]	; (8005c70 <xQueueReceive+0x158>)
 8005ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005baa:	601a      	str	r2, [r3, #0]
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	f3bf 8f6f 	isb	sy
 8005bb4:	e7ea      	b.n	8005b8c <xQueueReceive+0x74>
					taskEXIT_CRITICAL();
 8005bb6:	f001 f9ff 	bl	8006fb8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8005bba:	2000      	movs	r0, #0
 8005bbc:	e7e9      	b.n	8005b92 <xQueueReceive+0x7a>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005bbe:	a802      	add	r0, sp, #8
 8005bc0:	f000 fe22 	bl	8006808 <vTaskInternalSetTimeOutState>
 8005bc4:	e01a      	b.n	8005bfc <xQueueReceive+0xe4>
				prvUnlockQueue( pxQueue );
 8005bc6:	4620      	mov	r0, r4
 8005bc8:	f7ff fcdd 	bl	8005586 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005bcc:	f000 fcae 	bl	800652c <xTaskResumeAll>
 8005bd0:	e009      	b.n	8005be6 <xQueueReceive+0xce>
			prvUnlockQueue( pxQueue );
 8005bd2:	4620      	mov	r0, r4
 8005bd4:	f7ff fcd7 	bl	8005586 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005bd8:	f000 fca8 	bl	800652c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bdc:	4620      	mov	r0, r4
 8005bde:	f7ff fc7a 	bl	80054d6 <prvIsQueueEmpty>
 8005be2:	2800      	cmp	r0, #0
 8005be4:	d142      	bne.n	8005c6c <xQueueReceive+0x154>
 8005be6:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 8005be8:	f001 f9c4 	bl	8006f74 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bec:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bee:	2d00      	cmp	r5, #0
 8005bf0:	d1c4      	bne.n	8005b7c <xQueueReceive+0x64>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005bf2:	9b01      	ldr	r3, [sp, #4]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d0de      	beq.n	8005bb6 <xQueueReceive+0x9e>
				else if( xEntryTimeSet == pdFALSE )
 8005bf8:	2f00      	cmp	r7, #0
 8005bfa:	d0e0      	beq.n	8005bbe <xQueueReceive+0xa6>
		taskEXIT_CRITICAL();
 8005bfc:	f001 f9dc 	bl	8006fb8 <vPortExitCritical>
		vTaskSuspendAll();
 8005c00:	f000 fbf2 	bl	80063e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c04:	f001 f9b6 	bl	8006f74 <vPortEnterCritical>
 8005c08:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005c0c:	b25b      	sxtb	r3, r3
 8005c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c12:	bf08      	it	eq
 8005c14:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8005c18:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005c1c:	b25b      	sxtb	r3, r3
 8005c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c22:	bf08      	it	eq
 8005c24:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8005c28:	f001 f9c6 	bl	8006fb8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c2c:	a901      	add	r1, sp, #4
 8005c2e:	a802      	add	r0, sp, #8
 8005c30:	f000 fdf6 	bl	8006820 <xTaskCheckForTimeOut>
 8005c34:	2800      	cmp	r0, #0
 8005c36:	d1cc      	bne.n	8005bd2 <xQueueReceive+0xba>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c38:	4620      	mov	r0, r4
 8005c3a:	f7ff fc4c 	bl	80054d6 <prvIsQueueEmpty>
 8005c3e:	2800      	cmp	r0, #0
 8005c40:	d0c1      	beq.n	8005bc6 <xQueueReceive+0xae>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c42:	9901      	ldr	r1, [sp, #4]
 8005c44:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005c48:	f000 fd64 	bl	8006714 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c4c:	4620      	mov	r0, r4
 8005c4e:	f7ff fc9a 	bl	8005586 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c52:	f000 fc6b 	bl	800652c <xTaskResumeAll>
 8005c56:	2800      	cmp	r0, #0
 8005c58:	d1c5      	bne.n	8005be6 <xQueueReceive+0xce>
					portYIELD_WITHIN_API();
 8005c5a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005c5e:	f8c9 3000 	str.w	r3, [r9]
 8005c62:	f3bf 8f4f 	dsb	sy
 8005c66:	f3bf 8f6f 	isb	sy
 8005c6a:	e7bc      	b.n	8005be6 <xQueueReceive+0xce>
				return errQUEUE_EMPTY;
 8005c6c:	2000      	movs	r0, #0
 8005c6e:	e790      	b.n	8005b92 <xQueueReceive+0x7a>
 8005c70:	e000ed04 	.word	0xe000ed04

08005c74 <xQueueSemaphoreTake>:
{
 8005c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c78:	b084      	sub	sp, #16
 8005c7a:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005c7c:	b940      	cbnz	r0, 8005c90 <xQueueSemaphoreTake+0x1c>
 8005c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	e7fe      	b.n	8005c8e <xQueueSemaphoreTake+0x1a>
 8005c90:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8005c92:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005c94:	b143      	cbz	r3, 8005ca8 <xQueueSemaphoreTake+0x34>
 8005c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9a:	f383 8811 	msr	BASEPRI, r3
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f3bf 8f4f 	dsb	sy
 8005ca6:	e7fe      	b.n	8005ca6 <xQueueSemaphoreTake+0x32>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ca8:	f000 fe00 	bl	80068ac <xTaskGetSchedulerState>
 8005cac:	b950      	cbnz	r0, 8005cc4 <xQueueSemaphoreTake+0x50>
 8005cae:	9b01      	ldr	r3, [sp, #4]
 8005cb0:	b173      	cbz	r3, 8005cd0 <xQueueSemaphoreTake+0x5c>
 8005cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb6:	f383 8811 	msr	BASEPRI, r3
 8005cba:	f3bf 8f6f 	isb	sy
 8005cbe:	f3bf 8f4f 	dsb	sy
 8005cc2:	e7fe      	b.n	8005cc2 <xQueueSemaphoreTake+0x4e>
 8005cc4:	2500      	movs	r5, #0
 8005cc6:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8005cc8:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8005cca:	f8df 814c 	ldr.w	r8, [pc, #332]	; 8005e18 <xQueueSemaphoreTake+0x1a4>
 8005cce:	e04a      	b.n	8005d66 <xQueueSemaphoreTake+0xf2>
 8005cd0:	2500      	movs	r5, #0
 8005cd2:	462e      	mov	r6, r5
 8005cd4:	e7f8      	b.n	8005cc8 <xQueueSemaphoreTake+0x54>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005cda:	6823      	ldr	r3, [r4, #0]
 8005cdc:	b913      	cbnz	r3, 8005ce4 <xQueueSemaphoreTake+0x70>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005cde:	f000 fed5 	bl	8006a8c <pvTaskIncrementMutexHeldCount>
 8005ce2:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ce4:	6923      	ldr	r3, [r4, #16]
 8005ce6:	b163      	cbz	r3, 8005d02 <xQueueSemaphoreTake+0x8e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ce8:	f104 0010 	add.w	r0, r4, #16
 8005cec:	f000 fd48 	bl	8006780 <xTaskRemoveFromEventList>
 8005cf0:	b138      	cbz	r0, 8005d02 <xQueueSemaphoreTake+0x8e>
						queueYIELD_IF_USING_PREEMPTION();
 8005cf2:	4b49      	ldr	r3, [pc, #292]	; (8005e18 <xQueueSemaphoreTake+0x1a4>)
 8005cf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cf8:	601a      	str	r2, [r3, #0]
 8005cfa:	f3bf 8f4f 	dsb	sy
 8005cfe:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8005d02:	f001 f959 	bl	8006fb8 <vPortExitCritical>
				return pdPASS;
 8005d06:	2501      	movs	r5, #1
}
 8005d08:	4628      	mov	r0, r5
 8005d0a:	b004      	add	sp, #16
 8005d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005d10:	b145      	cbz	r5, 8005d24 <xQueueSemaphoreTake+0xb0>
 8005d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d16:	f383 8811 	msr	BASEPRI, r3
 8005d1a:	f3bf 8f6f 	isb	sy
 8005d1e:	f3bf 8f4f 	dsb	sy
 8005d22:	e7fe      	b.n	8005d22 <xQueueSemaphoreTake+0xae>
					taskEXIT_CRITICAL();
 8005d24:	f001 f948 	bl	8006fb8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8005d28:	e7ee      	b.n	8005d08 <xQueueSemaphoreTake+0x94>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d2a:	a802      	add	r0, sp, #8
 8005d2c:	f000 fd6c 	bl	8006808 <vTaskInternalSetTimeOutState>
 8005d30:	e023      	b.n	8005d7a <xQueueSemaphoreTake+0x106>
						taskENTER_CRITICAL();
 8005d32:	f001 f91f 	bl	8006f74 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005d36:	6860      	ldr	r0, [r4, #4]
 8005d38:	f000 fdc8 	bl	80068cc <xTaskPriorityInherit>
 8005d3c:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8005d3e:	f001 f93b 	bl	8006fb8 <vPortExitCritical>
 8005d42:	e040      	b.n	8005dc6 <xQueueSemaphoreTake+0x152>
				prvUnlockQueue( pxQueue );
 8005d44:	4620      	mov	r0, r4
 8005d46:	f7ff fc1e 	bl	8005586 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d4a:	f000 fbef 	bl	800652c <xTaskResumeAll>
 8005d4e:	e009      	b.n	8005d64 <xQueueSemaphoreTake+0xf0>
			prvUnlockQueue( pxQueue );
 8005d50:	4620      	mov	r0, r4
 8005d52:	f7ff fc18 	bl	8005586 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d56:	f000 fbe9 	bl	800652c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d5a:	4620      	mov	r0, r4
 8005d5c:	f7ff fbbb 	bl	80054d6 <prvIsQueueEmpty>
 8005d60:	2800      	cmp	r0, #0
 8005d62:	d145      	bne.n	8005df0 <xQueueSemaphoreTake+0x17c>
 8005d64:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8005d66:	f001 f905 	bl	8006f74 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005d6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1b2      	bne.n	8005cd6 <xQueueSemaphoreTake+0x62>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d70:	9b01      	ldr	r3, [sp, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d0cc      	beq.n	8005d10 <xQueueSemaphoreTake+0x9c>
				else if( xEntryTimeSet == pdFALSE )
 8005d76:	2e00      	cmp	r6, #0
 8005d78:	d0d7      	beq.n	8005d2a <xQueueSemaphoreTake+0xb6>
		taskEXIT_CRITICAL();
 8005d7a:	f001 f91d 	bl	8006fb8 <vPortExitCritical>
		vTaskSuspendAll();
 8005d7e:	f000 fb33 	bl	80063e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d82:	f001 f8f7 	bl	8006f74 <vPortEnterCritical>
 8005d86:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005d8a:	b25b      	sxtb	r3, r3
 8005d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d90:	bf08      	it	eq
 8005d92:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8005d96:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005d9a:	b25b      	sxtb	r3, r3
 8005d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da0:	bf08      	it	eq
 8005da2:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8005da6:	f001 f907 	bl	8006fb8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005daa:	a901      	add	r1, sp, #4
 8005dac:	a802      	add	r0, sp, #8
 8005dae:	f000 fd37 	bl	8006820 <xTaskCheckForTimeOut>
 8005db2:	2800      	cmp	r0, #0
 8005db4:	d1cc      	bne.n	8005d50 <xQueueSemaphoreTake+0xdc>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005db6:	4620      	mov	r0, r4
 8005db8:	f7ff fb8d 	bl	80054d6 <prvIsQueueEmpty>
 8005dbc:	2800      	cmp	r0, #0
 8005dbe:	d0c1      	beq.n	8005d44 <xQueueSemaphoreTake+0xd0>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005dc0:	6823      	ldr	r3, [r4, #0]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d0b5      	beq.n	8005d32 <xQueueSemaphoreTake+0xbe>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005dc6:	9901      	ldr	r1, [sp, #4]
 8005dc8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005dcc:	f000 fca2 	bl	8006714 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	f7ff fbd8 	bl	8005586 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005dd6:	f000 fba9 	bl	800652c <xTaskResumeAll>
 8005dda:	2800      	cmp	r0, #0
 8005ddc:	d1c2      	bne.n	8005d64 <xQueueSemaphoreTake+0xf0>
					portYIELD_WITHIN_API();
 8005dde:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005de2:	f8c8 3000 	str.w	r3, [r8]
 8005de6:	f3bf 8f4f 	dsb	sy
 8005dea:	f3bf 8f6f 	isb	sy
 8005dee:	e7b9      	b.n	8005d64 <xQueueSemaphoreTake+0xf0>
					if( xInheritanceOccurred != pdFALSE )
 8005df0:	2d00      	cmp	r5, #0
 8005df2:	d089      	beq.n	8005d08 <xQueueSemaphoreTake+0x94>
						taskENTER_CRITICAL();
 8005df4:	f001 f8be 	bl	8006f74 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005df8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dfa:	b153      	cbz	r3, 8005e12 <xQueueSemaphoreTake+0x19e>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005dfc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005dfe:	6819      	ldr	r1, [r3, #0]
 8005e00:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005e04:	6860      	ldr	r0, [r4, #4]
 8005e06:	f000 fdf3 	bl	80069f0 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8005e0a:	f001 f8d5 	bl	8006fb8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8005e0e:	2500      	movs	r5, #0
 8005e10:	e77a      	b.n	8005d08 <xQueueSemaphoreTake+0x94>
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005e12:	2100      	movs	r1, #0
 8005e14:	e7f6      	b.n	8005e04 <xQueueSemaphoreTake+0x190>
 8005e16:	bf00      	nop
 8005e18:	e000ed04 	.word	0xe000ed04

08005e1c <xQueueReceiveFromISR>:
{
 8005e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8005e20:	b160      	cbz	r0, 8005e3c <xQueueReceiveFromISR+0x20>
 8005e22:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e24:	b999      	cbnz	r1, 8005e4e <xQueueReceiveFromISR+0x32>
 8005e26:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005e28:	b18b      	cbz	r3, 8005e4e <xQueueReceiveFromISR+0x32>
 8005e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2e:	f383 8811 	msr	BASEPRI, r3
 8005e32:	f3bf 8f6f 	isb	sy
 8005e36:	f3bf 8f4f 	dsb	sy
 8005e3a:	e7fe      	b.n	8005e3a <xQueueReceiveFromISR+0x1e>
 8005e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e40:	f383 8811 	msr	BASEPRI, r3
 8005e44:	f3bf 8f6f 	isb	sy
 8005e48:	f3bf 8f4f 	dsb	sy
 8005e4c:	e7fe      	b.n	8005e4c <xQueueReceiveFromISR+0x30>
 8005e4e:	4617      	mov	r7, r2
 8005e50:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e52:	f001 f9bd 	bl	80071d0 <vPortValidateInterruptPriority>
	__asm volatile
 8005e56:	f3ef 8611 	mrs	r6, BASEPRI
 8005e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5e:	f383 8811 	msr	BASEPRI, r3
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e6a:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e6e:	f1b8 0f00 	cmp.w	r8, #0
 8005e72:	d01d      	beq.n	8005eb0 <xQueueReceiveFromISR+0x94>
			const int8_t cRxLock = pxQueue->cRxLock;
 8005e74:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8005e78:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005e7a:	4649      	mov	r1, r9
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	f7ff fb70 	bl	8005562 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005e82:	f108 33ff 	add.w	r3, r8, #4294967295
 8005e86:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8005e88:	f1b5 3fff 	cmp.w	r5, #4294967295
 8005e8c:	d005      	beq.n	8005e9a <xQueueReceiveFromISR+0x7e>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005e8e:	1c6b      	adds	r3, r5, #1
 8005e90:	b25b      	sxtb	r3, r3
 8005e92:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 8005e96:	2001      	movs	r0, #1
 8005e98:	e00b      	b.n	8005eb2 <xQueueReceiveFromISR+0x96>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e9a:	6923      	ldr	r3, [r4, #16]
 8005e9c:	b16b      	cbz	r3, 8005eba <xQueueReceiveFromISR+0x9e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e9e:	f104 0010 	add.w	r0, r4, #16
 8005ea2:	f000 fc6d 	bl	8006780 <xTaskRemoveFromEventList>
 8005ea6:	b150      	cbz	r0, 8005ebe <xQueueReceiveFromISR+0xa2>
						if( pxHigherPriorityTaskWoken != NULL )
 8005ea8:	b15f      	cbz	r7, 8005ec2 <xQueueReceiveFromISR+0xa6>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005eaa:	2001      	movs	r0, #1
 8005eac:	6038      	str	r0, [r7, #0]
 8005eae:	e000      	b.n	8005eb2 <xQueueReceiveFromISR+0x96>
			xReturn = pdFAIL;
 8005eb0:	2000      	movs	r0, #0
	__asm volatile
 8005eb2:	f386 8811 	msr	BASEPRI, r6
}
 8005eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			xReturn = pdPASS;
 8005eba:	2001      	movs	r0, #1
 8005ebc:	e7f9      	b.n	8005eb2 <xQueueReceiveFromISR+0x96>
 8005ebe:	2001      	movs	r0, #1
 8005ec0:	e7f7      	b.n	8005eb2 <xQueueReceiveFromISR+0x96>
 8005ec2:	2001      	movs	r0, #1
 8005ec4:	e7f5      	b.n	8005eb2 <xQueueReceiveFromISR+0x96>
	...

08005ec8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005ec8:	b410      	push	{r4}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005eca:	4b0b      	ldr	r3, [pc, #44]	; (8005ef8 <vQueueAddToRegistry+0x30>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	b153      	cbz	r3, 8005ee6 <vQueueAddToRegistry+0x1e>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ed0:	2301      	movs	r3, #1
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005ed2:	4c09      	ldr	r4, [pc, #36]	; (8005ef8 <vQueueAddToRegistry+0x30>)
 8005ed4:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 8005ed8:	b132      	cbz	r2, 8005ee8 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005eda:	3301      	adds	r3, #1
 8005edc:	2b08      	cmp	r3, #8
 8005ede:	d1f9      	bne.n	8005ed4 <vQueueAddToRegistry+0xc>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005ee0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ee4:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ee6:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005ee8:	4a03      	ldr	r2, [pc, #12]	; (8005ef8 <vQueueAddToRegistry+0x30>)
 8005eea:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005eee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005ef2:	6058      	str	r0, [r3, #4]
				break;
 8005ef4:	e7f4      	b.n	8005ee0 <vQueueAddToRegistry+0x18>
 8005ef6:	bf00      	nop
 8005ef8:	2001a490 	.word	0x2001a490

08005efc <vQueueUnregisterQueue>:

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005efc:	4b0b      	ldr	r3, [pc, #44]	; (8005f2c <vQueueUnregisterQueue+0x30>)
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	4298      	cmp	r0, r3
 8005f02:	d009      	beq.n	8005f18 <vQueueUnregisterQueue+0x1c>
 8005f04:	4a09      	ldr	r2, [pc, #36]	; (8005f2c <vQueueUnregisterQueue+0x30>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f06:	2301      	movs	r3, #1
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005f08:	68d1      	ldr	r1, [r2, #12]
 8005f0a:	4281      	cmp	r1, r0
 8005f0c:	d005      	beq.n	8005f1a <vQueueUnregisterQueue+0x1e>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f0e:	3301      	adds	r3, #1
 8005f10:	3208      	adds	r2, #8
 8005f12:	2b08      	cmp	r3, #8
 8005f14:	d1f8      	bne.n	8005f08 <vQueueUnregisterQueue+0xc>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005f16:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005f18:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005f1a:	4a04      	ldr	r2, [pc, #16]	; (8005f2c <vQueueUnregisterQueue+0x30>)
 8005f1c:	2100      	movs	r1, #0
 8005f1e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005f22:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005f26:	6059      	str	r1, [r3, #4]
				break;
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	2001a490 	.word	0x2001a490

08005f30 <vQueueDelete>:
	configASSERT( pxQueue );
 8005f30:	b940      	cbnz	r0, 8005f44 <vQueueDelete+0x14>
	__asm volatile
 8005f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f36:	f383 8811 	msr	BASEPRI, r3
 8005f3a:	f3bf 8f6f 	isb	sy
 8005f3e:	f3bf 8f4f 	dsb	sy
 8005f42:	e7fe      	b.n	8005f42 <vQueueDelete+0x12>
{
 8005f44:	b510      	push	{r4, lr}
 8005f46:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 8005f48:	f7ff ffd8 	bl	8005efc <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005f4c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8005f50:	b103      	cbz	r3, 8005f54 <vQueueDelete+0x24>
}
 8005f52:	bd10      	pop	{r4, pc}
			vPortFree( pxQueue );
 8005f54:	4620      	mov	r0, r4
 8005f56:	f001 fa31 	bl	80073bc <vPortFree>
}
 8005f5a:	e7fa      	b.n	8005f52 <vQueueDelete+0x22>

08005f5c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005f5c:	b570      	push	{r4, r5, r6, lr}
 8005f5e:	4604      	mov	r4, r0
 8005f60:	460d      	mov	r5, r1
 8005f62:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005f64:	f001 f806 	bl	8006f74 <vPortEnterCritical>
 8005f68:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005f6c:	b25b      	sxtb	r3, r3
 8005f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f72:	bf04      	itt	eq
 8005f74:	2300      	moveq	r3, #0
 8005f76:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8005f7a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005f7e:	b25b      	sxtb	r3, r3
 8005f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f84:	bf04      	itt	eq
 8005f86:	2300      	moveq	r3, #0
 8005f88:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8005f8c:	f001 f814 	bl	8006fb8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005f90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005f92:	b11b      	cbz	r3, 8005f9c <vQueueWaitForMessageRestricted+0x40>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005f94:	4620      	mov	r0, r4
 8005f96:	f7ff faf6 	bl	8005586 <prvUnlockQueue>
	}
 8005f9a:	bd70      	pop	{r4, r5, r6, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005f9c:	4632      	mov	r2, r6
 8005f9e:	4629      	mov	r1, r5
 8005fa0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005fa4:	f000 fbce 	bl	8006744 <vTaskPlaceOnEventListRestricted>
 8005fa8:	e7f4      	b.n	8005f94 <vQueueWaitForMessageRestricted+0x38>
	...

08005fac <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fac:	4b08      	ldr	r3, [pc, #32]	; (8005fd0 <prvResetNextTaskUnblockTime+0x24>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	b13b      	cbz	r3, 8005fc4 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005fb4:	4b06      	ldr	r3, [pc, #24]	; (8005fd0 <prvResetNextTaskUnblockTime+0x24>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	4b05      	ldr	r3, [pc, #20]	; (8005fd4 <prvResetNextTaskUnblockTime+0x28>)
 8005fc0:	601a      	str	r2, [r3, #0]
	}
}
 8005fc2:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 8005fc4:	4b03      	ldr	r3, [pc, #12]	; (8005fd4 <prvResetNextTaskUnblockTime+0x28>)
 8005fc6:	f04f 32ff 	mov.w	r2, #4294967295
 8005fca:	601a      	str	r2, [r3, #0]
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	20016388 	.word	0x20016388
 8005fd4:	20016830 	.word	0x20016830

08005fd8 <prvInitialiseNewTask>:
{
 8005fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fdc:	4682      	mov	sl, r0
 8005fde:	4689      	mov	r9, r1
 8005fe0:	4698      	mov	r8, r3
 8005fe2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005fe4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005fe6:	0095      	lsls	r5, r2, #2
 8005fe8:	462a      	mov	r2, r5
 8005fea:	21a5      	movs	r1, #165	; 0xa5
 8005fec:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8005fee:	f001 fa4a 	bl	8007486 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005ff2:	3d04      	subs	r5, #4
 8005ff4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005ff6:	441d      	add	r5, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005ff8:	f025 0507 	bic.w	r5, r5, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ffc:	f899 3000 	ldrb.w	r3, [r9]
 8006000:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 8006004:	f899 3000 	ldrb.w	r3, [r9]
 8006008:	b163      	cbz	r3, 8006024 <prvInitialiseNewTask+0x4c>
 800600a:	464b      	mov	r3, r9
 800600c:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8006010:	f109 010f 	add.w	r1, r9, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006014:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8006018:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
 800601c:	7818      	ldrb	r0, [r3, #0]
 800601e:	b108      	cbz	r0, 8006024 <prvInitialiseNewTask+0x4c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006020:	428b      	cmp	r3, r1
 8006022:	d1f7      	bne.n	8006014 <prvInitialiseNewTask+0x3c>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006024:	2700      	movs	r7, #0
 8006026:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
 800602a:	9b08      	ldr	r3, [sp, #32]
 800602c:	2b37      	cmp	r3, #55	; 0x37
 800602e:	bf28      	it	cs
 8006030:	2337      	movcs	r3, #55	; 0x37
 8006032:	4699      	mov	r9, r3
	pxNewTCB->uxPriority = uxPriority;
 8006034:	62e3      	str	r3, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8006036:	64e3      	str	r3, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006038:	6527      	str	r7, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800603a:	1d20      	adds	r0, r4, #4
 800603c:	f7ff fa0f 	bl	800545e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006040:	f104 0018 	add.w	r0, r4, #24
 8006044:	f7ff fa0b 	bl	800545e <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006048:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800604a:	f1c9 0338 	rsb	r3, r9, #56	; 0x38
 800604e:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006050:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 8006052:	6567      	str	r7, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006054:	f884 7058 	strb.w	r7, [r4, #88]	; 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006058:	4642      	mov	r2, r8
 800605a:	4651      	mov	r1, sl
 800605c:	4628      	mov	r0, r5
 800605e:	f000 ff5b 	bl	8006f18 <pxPortInitialiseStack>
 8006062:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8006064:	b106      	cbz	r6, 8006068 <prvInitialiseNewTask+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006066:	6034      	str	r4, [r6, #0]
}
 8006068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800606c <prvAddNewTaskToReadyList>:
{
 800606c:	b570      	push	{r4, r5, r6, lr}
 800606e:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 8006070:	f000 ff80 	bl	8006f74 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8006074:	4a2f      	ldr	r2, [pc, #188]	; (8006134 <prvAddNewTaskToReadyList+0xc8>)
 8006076:	6813      	ldr	r3, [r2, #0]
 8006078:	3301      	adds	r3, #1
 800607a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800607c:	4b2e      	ldr	r3, [pc, #184]	; (8006138 <prvAddNewTaskToReadyList+0xcc>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d032      	beq.n	80060ea <prvAddNewTaskToReadyList+0x7e>
			if( xSchedulerRunning == pdFALSE )
 8006084:	4b2d      	ldr	r3, [pc, #180]	; (800613c <prvAddNewTaskToReadyList+0xd0>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	b93b      	cbnz	r3, 800609a <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800608a:	4b2b      	ldr	r3, [pc, #172]	; (8006138 <prvAddNewTaskToReadyList+0xcc>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006090:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006092:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8006094:	bf9c      	itt	ls
 8006096:	4b28      	ldrls	r3, [pc, #160]	; (8006138 <prvAddNewTaskToReadyList+0xcc>)
 8006098:	601d      	strls	r5, [r3, #0]
		uxTaskNumber++;
 800609a:	4a29      	ldr	r2, [pc, #164]	; (8006140 <prvAddNewTaskToReadyList+0xd4>)
 800609c:	6813      	ldr	r3, [r2, #0]
 800609e:	3301      	adds	r3, #1
 80060a0:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80060a2:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80060a4:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80060a6:	4b27      	ldr	r3, [pc, #156]	; (8006144 <prvAddNewTaskToReadyList+0xd8>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4298      	cmp	r0, r3
 80060ac:	bf84      	itt	hi
 80060ae:	4b25      	ldrhi	r3, [pc, #148]	; (8006144 <prvAddNewTaskToReadyList+0xd8>)
 80060b0:	6018      	strhi	r0, [r3, #0]
 80060b2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80060b6:	1d29      	adds	r1, r5, #4
 80060b8:	4b23      	ldr	r3, [pc, #140]	; (8006148 <prvAddNewTaskToReadyList+0xdc>)
 80060ba:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80060be:	f7ff f9d1 	bl	8005464 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80060c2:	f000 ff79 	bl	8006fb8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80060c6:	4b1d      	ldr	r3, [pc, #116]	; (800613c <prvAddNewTaskToReadyList+0xd0>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	b16b      	cbz	r3, 80060e8 <prvAddNewTaskToReadyList+0x7c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80060cc:	4b1a      	ldr	r3, [pc, #104]	; (8006138 <prvAddNewTaskToReadyList+0xcc>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060d2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d207      	bcs.n	80060e8 <prvAddNewTaskToReadyList+0x7c>
			taskYIELD_IF_USING_PREEMPTION();
 80060d8:	4b1c      	ldr	r3, [pc, #112]	; (800614c <prvAddNewTaskToReadyList+0xe0>)
 80060da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060de:	601a      	str	r2, [r3, #0]
 80060e0:	f3bf 8f4f 	dsb	sy
 80060e4:	f3bf 8f6f 	isb	sy
}
 80060e8:	bd70      	pop	{r4, r5, r6, pc}
			pxCurrentTCB = pxNewTCB;
 80060ea:	4b13      	ldr	r3, [pc, #76]	; (8006138 <prvAddNewTaskToReadyList+0xcc>)
 80060ec:	601d      	str	r5, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80060ee:	6813      	ldr	r3, [r2, #0]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d1d2      	bne.n	800609a <prvAddNewTaskToReadyList+0x2e>
 80060f4:	4c14      	ldr	r4, [pc, #80]	; (8006148 <prvAddNewTaskToReadyList+0xdc>)
 80060f6:	f504 668c 	add.w	r6, r4, #1120	; 0x460
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80060fa:	4620      	mov	r0, r4
 80060fc:	f7ff f9a4 	bl	8005448 <vListInitialise>
 8006100:	3414      	adds	r4, #20
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006102:	42b4      	cmp	r4, r6
 8006104:	d1f9      	bne.n	80060fa <prvAddNewTaskToReadyList+0x8e>
	vListInitialise( &xDelayedTaskList1 );
 8006106:	4e12      	ldr	r6, [pc, #72]	; (8006150 <prvAddNewTaskToReadyList+0xe4>)
 8006108:	4630      	mov	r0, r6
 800610a:	f7ff f99d 	bl	8005448 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800610e:	4c11      	ldr	r4, [pc, #68]	; (8006154 <prvAddNewTaskToReadyList+0xe8>)
 8006110:	4620      	mov	r0, r4
 8006112:	f7ff f999 	bl	8005448 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006116:	4810      	ldr	r0, [pc, #64]	; (8006158 <prvAddNewTaskToReadyList+0xec>)
 8006118:	f7ff f996 	bl	8005448 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800611c:	480f      	ldr	r0, [pc, #60]	; (800615c <prvAddNewTaskToReadyList+0xf0>)
 800611e:	f7ff f993 	bl	8005448 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8006122:	480f      	ldr	r0, [pc, #60]	; (8006160 <prvAddNewTaskToReadyList+0xf4>)
 8006124:	f7ff f990 	bl	8005448 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8006128:	4b0e      	ldr	r3, [pc, #56]	; (8006164 <prvAddNewTaskToReadyList+0xf8>)
 800612a:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800612c:	4b0e      	ldr	r3, [pc, #56]	; (8006168 <prvAddNewTaskToReadyList+0xfc>)
 800612e:	601c      	str	r4, [r3, #0]
 8006130:	e7b3      	b.n	800609a <prvAddNewTaskToReadyList+0x2e>
 8006132:	bf00      	nop
 8006134:	200167f0 	.word	0x200167f0
 8006138:	20016384 	.word	0x20016384
 800613c:	2001684c 	.word	0x2001684c
 8006140:	20016800 	.word	0x20016800
 8006144:	20016804 	.word	0x20016804
 8006148:	20016390 	.word	0x20016390
 800614c:	e000ed04 	.word	0xe000ed04
 8006150:	20016808 	.word	0x20016808
 8006154:	2001681c 	.word	0x2001681c
 8006158:	20016838 	.word	0x20016838
 800615c:	20016864 	.word	0x20016864
 8006160:	20016850 	.word	0x20016850
 8006164:	20016388 	.word	0x20016388
 8006168:	2001638c 	.word	0x2001638c

0800616c <prvDeleteTCB>:
	{
 800616c:	b510      	push	{r4, lr}
 800616e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006170:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 8006174:	b933      	cbnz	r3, 8006184 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
 8006176:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8006178:	f001 f920 	bl	80073bc <vPortFree>
				vPortFree( pxTCB );
 800617c:	4620      	mov	r0, r4
 800617e:	f001 f91d 	bl	80073bc <vPortFree>
	}
 8006182:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006184:	2b01      	cmp	r3, #1
 8006186:	d00a      	beq.n	800619e <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006188:	2b02      	cmp	r3, #2
 800618a:	d0fa      	beq.n	8006182 <prvDeleteTCB+0x16>
 800618c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006190:	f383 8811 	msr	BASEPRI, r3
 8006194:	f3bf 8f6f 	isb	sy
 8006198:	f3bf 8f4f 	dsb	sy
 800619c:	e7fe      	b.n	800619c <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
 800619e:	f001 f90d 	bl	80073bc <vPortFree>
 80061a2:	e7ee      	b.n	8006182 <prvDeleteTCB+0x16>

080061a4 <prvIdleTask>:
{
 80061a4:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061a6:	4c14      	ldr	r4, [pc, #80]	; (80061f8 <prvIdleTask+0x54>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80061a8:	4f14      	ldr	r7, [pc, #80]	; (80061fc <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 80061aa:	4e15      	ldr	r6, [pc, #84]	; (8006200 <prvIdleTask+0x5c>)
				taskYIELD();
 80061ac:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8006208 <prvIdleTask+0x64>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061b0:	6823      	ldr	r3, [r4, #0]
 80061b2:	b1a3      	cbz	r3, 80061de <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 80061b4:	f000 fede 	bl	8006f74 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061bc:	1d28      	adds	r0, r5, #4
 80061be:	f7ff f977 	bl	80054b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80061c2:	6833      	ldr	r3, [r6, #0]
 80061c4:	3b01      	subs	r3, #1
 80061c6:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 80061c8:	6823      	ldr	r3, [r4, #0]
 80061ca:	3b01      	subs	r3, #1
 80061cc:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80061ce:	f000 fef3 	bl	8006fb8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80061d2:	4628      	mov	r0, r5
 80061d4:	f7ff ffca 	bl	800616c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061d8:	6823      	ldr	r3, [r4, #0]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d1ea      	bne.n	80061b4 <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80061de:	4b09      	ldr	r3, [pc, #36]	; (8006204 <prvIdleTask+0x60>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d9e4      	bls.n	80061b0 <prvIdleTask+0xc>
				taskYIELD();
 80061e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80061ea:	f8c8 3000 	str.w	r3, [r8]
 80061ee:	f3bf 8f4f 	dsb	sy
 80061f2:	f3bf 8f6f 	isb	sy
 80061f6:	e7db      	b.n	80061b0 <prvIdleTask+0xc>
 80061f8:	200167f4 	.word	0x200167f4
 80061fc:	20016864 	.word	0x20016864
 8006200:	200167f0 	.word	0x200167f0
 8006204:	20016390 	.word	0x20016390
 8006208:	e000ed04 	.word	0xe000ed04

0800620c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800620c:	b570      	push	{r4, r5, r6, lr}
 800620e:	4604      	mov	r4, r0
 8006210:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006212:	4b17      	ldr	r3, [pc, #92]	; (8006270 <prvAddCurrentTaskToDelayedList+0x64>)
 8006214:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006216:	4b17      	ldr	r3, [pc, #92]	; (8006274 <prvAddCurrentTaskToDelayedList+0x68>)
 8006218:	6818      	ldr	r0, [r3, #0]
 800621a:	3004      	adds	r0, #4
 800621c:	f7ff f948 	bl	80054b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006220:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006224:	d013      	beq.n	800624e <prvAddCurrentTaskToDelayedList+0x42>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006226:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006228:	4b12      	ldr	r3, [pc, #72]	; (8006274 <prvAddCurrentTaskToDelayedList+0x68>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800622e:	42a5      	cmp	r5, r4
 8006230:	d816      	bhi.n	8006260 <prvAddCurrentTaskToDelayedList+0x54>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006232:	4b11      	ldr	r3, [pc, #68]	; (8006278 <prvAddCurrentTaskToDelayedList+0x6c>)
 8006234:	6818      	ldr	r0, [r3, #0]
 8006236:	4b0f      	ldr	r3, [pc, #60]	; (8006274 <prvAddCurrentTaskToDelayedList+0x68>)
 8006238:	6819      	ldr	r1, [r3, #0]
 800623a:	3104      	adds	r1, #4
 800623c:	f7ff f91e 	bl	800547c <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 8006240:	4b0e      	ldr	r3, [pc, #56]	; (800627c <prvAddCurrentTaskToDelayedList+0x70>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	42a3      	cmp	r3, r4
				{
					xNextTaskUnblockTime = xTimeToWake;
 8006246:	bf84      	itt	hi
 8006248:	4b0c      	ldrhi	r3, [pc, #48]	; (800627c <prvAddCurrentTaskToDelayedList+0x70>)
 800624a:	601c      	strhi	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800624c:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800624e:	2e00      	cmp	r6, #0
 8006250:	d0e9      	beq.n	8006226 <prvAddCurrentTaskToDelayedList+0x1a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006252:	4b08      	ldr	r3, [pc, #32]	; (8006274 <prvAddCurrentTaskToDelayedList+0x68>)
 8006254:	6819      	ldr	r1, [r3, #0]
 8006256:	3104      	adds	r1, #4
 8006258:	4809      	ldr	r0, [pc, #36]	; (8006280 <prvAddCurrentTaskToDelayedList+0x74>)
 800625a:	f7ff f903 	bl	8005464 <vListInsertEnd>
 800625e:	e7f5      	b.n	800624c <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006260:	4b08      	ldr	r3, [pc, #32]	; (8006284 <prvAddCurrentTaskToDelayedList+0x78>)
 8006262:	6818      	ldr	r0, [r3, #0]
 8006264:	4b03      	ldr	r3, [pc, #12]	; (8006274 <prvAddCurrentTaskToDelayedList+0x68>)
 8006266:	6819      	ldr	r1, [r3, #0]
 8006268:	3104      	adds	r1, #4
 800626a:	f7ff f907 	bl	800547c <vListInsert>
 800626e:	e7ed      	b.n	800624c <prvAddCurrentTaskToDelayedList+0x40>
 8006270:	20016878 	.word	0x20016878
 8006274:	20016384 	.word	0x20016384
 8006278:	20016388 	.word	0x20016388
 800627c:	20016830 	.word	0x20016830
 8006280:	20016850 	.word	0x20016850
 8006284:	2001638c 	.word	0x2001638c

08006288 <xTaskCreateStatic>:
	{
 8006288:	b570      	push	{r4, r5, r6, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800628e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8006290:	b945      	cbnz	r5, 80062a4 <xTaskCreateStatic+0x1c>
 8006292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006296:	f383 8811 	msr	BASEPRI, r3
 800629a:	f3bf 8f6f 	isb	sy
 800629e:	f3bf 8f4f 	dsb	sy
 80062a2:	e7fe      	b.n	80062a2 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 80062a4:	b944      	cbnz	r4, 80062b8 <xTaskCreateStatic+0x30>
 80062a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062aa:	f383 8811 	msr	BASEPRI, r3
 80062ae:	f3bf 8f6f 	isb	sy
 80062b2:	f3bf 8f4f 	dsb	sy
 80062b6:	e7fe      	b.n	80062b6 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 80062b8:	265c      	movs	r6, #92	; 0x5c
 80062ba:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80062bc:	9e04      	ldr	r6, [sp, #16]
 80062be:	2e5c      	cmp	r6, #92	; 0x5c
 80062c0:	d008      	beq.n	80062d4 <xTaskCreateStatic+0x4c>
 80062c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c6:	f383 8811 	msr	BASEPRI, r3
 80062ca:	f3bf 8f6f 	isb	sy
 80062ce:	f3bf 8f4f 	dsb	sy
 80062d2:	e7fe      	b.n	80062d2 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80062d4:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80062d6:	2502      	movs	r5, #2
 80062d8:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80062dc:	2500      	movs	r5, #0
 80062de:	9503      	str	r5, [sp, #12]
 80062e0:	9402      	str	r4, [sp, #8]
 80062e2:	ad05      	add	r5, sp, #20
 80062e4:	9501      	str	r5, [sp, #4]
 80062e6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80062e8:	9500      	str	r5, [sp, #0]
 80062ea:	f7ff fe75 	bl	8005fd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062ee:	4620      	mov	r0, r4
 80062f0:	f7ff febc 	bl	800606c <prvAddNewTaskToReadyList>
	}
 80062f4:	9805      	ldr	r0, [sp, #20]
 80062f6:	b006      	add	sp, #24
 80062f8:	bd70      	pop	{r4, r5, r6, pc}

080062fa <xTaskCreate>:
	{
 80062fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80062fe:	b085      	sub	sp, #20
 8006300:	4607      	mov	r7, r0
 8006302:	4688      	mov	r8, r1
 8006304:	4615      	mov	r5, r2
 8006306:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006308:	0090      	lsls	r0, r2, #2
 800630a:	f000 ffbb 	bl	8007284 <pvPortMalloc>
			if( pxStack != NULL )
 800630e:	b310      	cbz	r0, 8006356 <xTaskCreate+0x5c>
 8006310:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006312:	205c      	movs	r0, #92	; 0x5c
 8006314:	f000 ffb6 	bl	8007284 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8006318:	4604      	mov	r4, r0
 800631a:	b1b0      	cbz	r0, 800634a <xTaskCreate+0x50>
					pxNewTCB->pxStack = pxStack;
 800631c:	6306      	str	r6, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800631e:	2300      	movs	r3, #0
 8006320:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006324:	9303      	str	r3, [sp, #12]
 8006326:	9002      	str	r0, [sp, #8]
 8006328:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800632a:	9301      	str	r3, [sp, #4]
 800632c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800632e:	9300      	str	r3, [sp, #0]
 8006330:	464b      	mov	r3, r9
 8006332:	462a      	mov	r2, r5
 8006334:	4641      	mov	r1, r8
 8006336:	4638      	mov	r0, r7
 8006338:	f7ff fe4e 	bl	8005fd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800633c:	4620      	mov	r0, r4
 800633e:	f7ff fe95 	bl	800606c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006342:	2001      	movs	r0, #1
	}
 8006344:	b005      	add	sp, #20
 8006346:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800634a:	4630      	mov	r0, r6
 800634c:	f001 f836 	bl	80073bc <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006350:	f04f 30ff 	mov.w	r0, #4294967295
 8006354:	e7f6      	b.n	8006344 <xTaskCreate+0x4a>
 8006356:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800635a:	e7f3      	b.n	8006344 <xTaskCreate+0x4a>

0800635c <vTaskStartScheduler>:
{
 800635c:	b510      	push	{r4, lr}
 800635e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006360:	2400      	movs	r4, #0
 8006362:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006364:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006366:	aa07      	add	r2, sp, #28
 8006368:	a906      	add	r1, sp, #24
 800636a:	a805      	add	r0, sp, #20
 800636c:	f7ff f854 	bl	8005418 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006370:	9b05      	ldr	r3, [sp, #20]
 8006372:	9302      	str	r3, [sp, #8]
 8006374:	9b06      	ldr	r3, [sp, #24]
 8006376:	9301      	str	r3, [sp, #4]
 8006378:	9400      	str	r4, [sp, #0]
 800637a:	4623      	mov	r3, r4
 800637c:	9a07      	ldr	r2, [sp, #28]
 800637e:	4915      	ldr	r1, [pc, #84]	; (80063d4 <vTaskStartScheduler+0x78>)
 8006380:	4815      	ldr	r0, [pc, #84]	; (80063d8 <vTaskStartScheduler+0x7c>)
 8006382:	f7ff ff81 	bl	8006288 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8006386:	b1b0      	cbz	r0, 80063b6 <vTaskStartScheduler+0x5a>
			xReturn = xTimerCreateTimerTask();
 8006388:	f000 fbea 	bl	8006b60 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800638c:	2801      	cmp	r0, #1
 800638e:	d114      	bne.n	80063ba <vTaskStartScheduler+0x5e>
 8006390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006394:	f383 8811 	msr	BASEPRI, r3
 8006398:	f3bf 8f6f 	isb	sy
 800639c:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80063a0:	4b0e      	ldr	r3, [pc, #56]	; (80063dc <vTaskStartScheduler+0x80>)
 80063a2:	f04f 32ff 	mov.w	r2, #4294967295
 80063a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80063a8:	4b0d      	ldr	r3, [pc, #52]	; (80063e0 <vTaskStartScheduler+0x84>)
 80063aa:	2201      	movs	r2, #1
 80063ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80063ae:	4b0d      	ldr	r3, [pc, #52]	; (80063e4 <vTaskStartScheduler+0x88>)
 80063b0:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80063b2:	f000 fe81 	bl	80070b8 <xPortStartScheduler>
}
 80063b6:	b008      	add	sp, #32
 80063b8:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80063ba:	f1b0 3fff 	cmp.w	r0, #4294967295
 80063be:	d1fa      	bne.n	80063b6 <vTaskStartScheduler+0x5a>
 80063c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c4:	f383 8811 	msr	BASEPRI, r3
 80063c8:	f3bf 8f6f 	isb	sy
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	e7fe      	b.n	80063d0 <vTaskStartScheduler+0x74>
 80063d2:	bf00      	nop
 80063d4:	0801a0f0 	.word	0x0801a0f0
 80063d8:	080061a5 	.word	0x080061a5
 80063dc:	20016830 	.word	0x20016830
 80063e0:	2001684c 	.word	0x2001684c
 80063e4:	20016878 	.word	0x20016878

080063e8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80063e8:	4a02      	ldr	r2, [pc, #8]	; (80063f4 <vTaskSuspendAll+0xc>)
 80063ea:	6813      	ldr	r3, [r2, #0]
 80063ec:	3301      	adds	r3, #1
 80063ee:	6013      	str	r3, [r2, #0]
}
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	200167fc 	.word	0x200167fc

080063f8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80063f8:	4b01      	ldr	r3, [pc, #4]	; (8006400 <xTaskGetTickCount+0x8>)
 80063fa:	6818      	ldr	r0, [r3, #0]
}
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	20016878 	.word	0x20016878

08006404 <xTaskIncrementTick>:
{
 8006404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006408:	4b3d      	ldr	r3, [pc, #244]	; (8006500 <xTaskIncrementTick+0xfc>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d169      	bne.n	80064e4 <xTaskIncrementTick+0xe0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006410:	4b3c      	ldr	r3, [pc, #240]	; (8006504 <xTaskIncrementTick+0x100>)
 8006412:	681d      	ldr	r5, [r3, #0]
 8006414:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8006416:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006418:	b9c5      	cbnz	r5, 800644c <xTaskIncrementTick+0x48>
			taskSWITCH_DELAYED_LISTS();
 800641a:	4b3b      	ldr	r3, [pc, #236]	; (8006508 <xTaskIncrementTick+0x104>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	b143      	cbz	r3, 8006434 <xTaskIncrementTick+0x30>
 8006422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006426:	f383 8811 	msr	BASEPRI, r3
 800642a:	f3bf 8f6f 	isb	sy
 800642e:	f3bf 8f4f 	dsb	sy
 8006432:	e7fe      	b.n	8006432 <xTaskIncrementTick+0x2e>
 8006434:	4a34      	ldr	r2, [pc, #208]	; (8006508 <xTaskIncrementTick+0x104>)
 8006436:	6811      	ldr	r1, [r2, #0]
 8006438:	4b34      	ldr	r3, [pc, #208]	; (800650c <xTaskIncrementTick+0x108>)
 800643a:	6818      	ldr	r0, [r3, #0]
 800643c:	6010      	str	r0, [r2, #0]
 800643e:	6019      	str	r1, [r3, #0]
 8006440:	4a33      	ldr	r2, [pc, #204]	; (8006510 <xTaskIncrementTick+0x10c>)
 8006442:	6813      	ldr	r3, [r2, #0]
 8006444:	3301      	adds	r3, #1
 8006446:	6013      	str	r3, [r2, #0]
 8006448:	f7ff fdb0 	bl	8005fac <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800644c:	4b31      	ldr	r3, [pc, #196]	; (8006514 <xTaskIncrementTick+0x110>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	42ab      	cmp	r3, r5
 8006452:	d90c      	bls.n	800646e <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 8006454:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006456:	4b30      	ldr	r3, [pc, #192]	; (8006518 <xTaskIncrementTick+0x114>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	4a2e      	ldr	r2, [pc, #184]	; (800651c <xTaskIncrementTick+0x118>)
 8006464:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
 8006466:	2b02      	cmp	r3, #2
 8006468:	bf28      	it	cs
 800646a:	2401      	movcs	r4, #1
 800646c:	e03f      	b.n	80064ee <xTaskIncrementTick+0xea>
BaseType_t xSwitchRequired = pdFALSE;
 800646e:	2400      	movs	r4, #0
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006470:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8006508 <xTaskIncrementTick+0x104>
					prvAddTaskToReadyList( pxTCB );
 8006474:	4f2a      	ldr	r7, [pc, #168]	; (8006520 <xTaskIncrementTick+0x11c>)
 8006476:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 800651c <xTaskIncrementTick+0x118>
 800647a:	e01a      	b.n	80064b2 <xTaskIncrementTick+0xae>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800647c:	4b25      	ldr	r3, [pc, #148]	; (8006514 <xTaskIncrementTick+0x110>)
 800647e:	f04f 32ff 	mov.w	r2, #4294967295
 8006482:	601a      	str	r2, [r3, #0]
					break;
 8006484:	e7e7      	b.n	8006456 <xTaskIncrementTick+0x52>
						xNextTaskUnblockTime = xItemValue;
 8006486:	4a23      	ldr	r2, [pc, #140]	; (8006514 <xTaskIncrementTick+0x110>)
 8006488:	6013      	str	r3, [r2, #0]
						break;
 800648a:	e7e4      	b.n	8006456 <xTaskIncrementTick+0x52>
					prvAddTaskToReadyList( pxTCB );
 800648c:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	4298      	cmp	r0, r3
 8006492:	bf88      	it	hi
 8006494:	6038      	strhi	r0, [r7, #0]
 8006496:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800649a:	4649      	mov	r1, r9
 800649c:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 80064a0:	f7fe ffe0 	bl	8005464 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064a4:	4b1c      	ldr	r3, [pc, #112]	; (8006518 <xTaskIncrementTick+0x114>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80064aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80064ac:	429a      	cmp	r2, r3
 80064ae:	bf28      	it	cs
 80064b0:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064b2:	f8d8 3000 	ldr.w	r3, [r8]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d0df      	beq.n	800647c <xTaskIncrementTick+0x78>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80064bc:	f8d8 3000 	ldr.w	r3, [r8]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80064c4:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 80064c6:	429d      	cmp	r5, r3
 80064c8:	d3dd      	bcc.n	8006486 <xTaskIncrementTick+0x82>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064ca:	f106 0904 	add.w	r9, r6, #4
 80064ce:	4648      	mov	r0, r9
 80064d0:	f7fe ffee 	bl	80054b0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80064d4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d0d8      	beq.n	800648c <xTaskIncrementTick+0x88>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064da:	f106 0018 	add.w	r0, r6, #24
 80064de:	f7fe ffe7 	bl	80054b0 <uxListRemove>
 80064e2:	e7d3      	b.n	800648c <xTaskIncrementTick+0x88>
		++uxPendedTicks;
 80064e4:	4a0f      	ldr	r2, [pc, #60]	; (8006524 <xTaskIncrementTick+0x120>)
 80064e6:	6813      	ldr	r3, [r2, #0]
 80064e8:	3301      	adds	r3, #1
 80064ea:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80064ec:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 80064ee:	4b0e      	ldr	r3, [pc, #56]	; (8006528 <xTaskIncrementTick+0x124>)
 80064f0:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 80064f2:	2b00      	cmp	r3, #0
}
 80064f4:	bf0c      	ite	eq
 80064f6:	4620      	moveq	r0, r4
 80064f8:	2001      	movne	r0, #1
 80064fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064fe:	bf00      	nop
 8006500:	200167fc 	.word	0x200167fc
 8006504:	20016878 	.word	0x20016878
 8006508:	20016388 	.word	0x20016388
 800650c:	2001638c 	.word	0x2001638c
 8006510:	20016834 	.word	0x20016834
 8006514:	20016830 	.word	0x20016830
 8006518:	20016384 	.word	0x20016384
 800651c:	20016390 	.word	0x20016390
 8006520:	20016804 	.word	0x20016804
 8006524:	200167f8 	.word	0x200167f8
 8006528:	2001687c 	.word	0x2001687c

0800652c <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 800652c:	4b34      	ldr	r3, [pc, #208]	; (8006600 <xTaskResumeAll+0xd4>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	b943      	cbnz	r3, 8006544 <xTaskResumeAll+0x18>
 8006532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006536:	f383 8811 	msr	BASEPRI, r3
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	e7fe      	b.n	8006542 <xTaskResumeAll+0x16>
{
 8006544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
 8006548:	f000 fd14 	bl	8006f74 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800654c:	4b2c      	ldr	r3, [pc, #176]	; (8006600 <xTaskResumeAll+0xd4>)
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	3a01      	subs	r2, #1
 8006552:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d14d      	bne.n	80065f6 <xTaskResumeAll+0xca>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800655a:	4b2a      	ldr	r3, [pc, #168]	; (8006604 <xTaskResumeAll+0xd8>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	b92b      	cbnz	r3, 800656c <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
 8006560:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006562:	f000 fd29 	bl	8006fb8 <vPortExitCritical>
}
 8006566:	4620      	mov	r0, r4
 8006568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
TCB_t *pxTCB = NULL;
 800656c:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800656e:	4e26      	ldr	r6, [pc, #152]	; (8006608 <xTaskResumeAll+0xdc>)
					prvAddTaskToReadyList( pxTCB );
 8006570:	4d26      	ldr	r5, [pc, #152]	; (800660c <xTaskResumeAll+0xe0>)
 8006572:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8006620 <xTaskResumeAll+0xf4>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006576:	6833      	ldr	r3, [r6, #0]
 8006578:	b1fb      	cbz	r3, 80065ba <xTaskResumeAll+0x8e>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800657a:	68f3      	ldr	r3, [r6, #12]
 800657c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800657e:	f104 0018 	add.w	r0, r4, #24
 8006582:	f7fe ff95 	bl	80054b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006586:	1d27      	adds	r7, r4, #4
 8006588:	4638      	mov	r0, r7
 800658a:	f7fe ff91 	bl	80054b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800658e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006590:	682b      	ldr	r3, [r5, #0]
 8006592:	4298      	cmp	r0, r3
 8006594:	bf88      	it	hi
 8006596:	6028      	strhi	r0, [r5, #0]
 8006598:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800659c:	4639      	mov	r1, r7
 800659e:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 80065a2:	f7fe ff5f 	bl	8005464 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065a6:	4b1a      	ldr	r3, [pc, #104]	; (8006610 <xTaskResumeAll+0xe4>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80065ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d3e1      	bcc.n	8006576 <xTaskResumeAll+0x4a>
						xYieldPending = pdTRUE;
 80065b2:	4b18      	ldr	r3, [pc, #96]	; (8006614 <xTaskResumeAll+0xe8>)
 80065b4:	2201      	movs	r2, #1
 80065b6:	601a      	str	r2, [r3, #0]
 80065b8:	e7dd      	b.n	8006576 <xTaskResumeAll+0x4a>
				if( pxTCB != NULL )
 80065ba:	b10c      	cbz	r4, 80065c0 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 80065bc:	f7ff fcf6 	bl	8005fac <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80065c0:	4b15      	ldr	r3, [pc, #84]	; (8006618 <xTaskResumeAll+0xec>)
 80065c2:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80065c4:	b154      	cbz	r4, 80065dc <xTaskResumeAll+0xb0>
								xYieldPending = pdTRUE;
 80065c6:	4e13      	ldr	r6, [pc, #76]	; (8006614 <xTaskResumeAll+0xe8>)
 80065c8:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 80065ca:	f7ff ff1b 	bl	8006404 <xTaskIncrementTick>
 80065ce:	b100      	cbz	r0, 80065d2 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 80065d0:	6035      	str	r5, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80065d2:	3c01      	subs	r4, #1
 80065d4:	d1f9      	bne.n	80065ca <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 80065d6:	4b10      	ldr	r3, [pc, #64]	; (8006618 <xTaskResumeAll+0xec>)
 80065d8:	2200      	movs	r2, #0
 80065da:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 80065dc:	4b0d      	ldr	r3, [pc, #52]	; (8006614 <xTaskResumeAll+0xe8>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	b15b      	cbz	r3, 80065fa <xTaskResumeAll+0xce>
					taskYIELD_IF_USING_PREEMPTION();
 80065e2:	4b0e      	ldr	r3, [pc, #56]	; (800661c <xTaskResumeAll+0xf0>)
 80065e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065e8:	601a      	str	r2, [r3, #0]
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80065f2:	2401      	movs	r4, #1
 80065f4:	e7b5      	b.n	8006562 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80065f6:	2400      	movs	r4, #0
 80065f8:	e7b3      	b.n	8006562 <xTaskResumeAll+0x36>
 80065fa:	2400      	movs	r4, #0
 80065fc:	e7b1      	b.n	8006562 <xTaskResumeAll+0x36>
 80065fe:	bf00      	nop
 8006600:	200167fc 	.word	0x200167fc
 8006604:	200167f0 	.word	0x200167f0
 8006608:	20016838 	.word	0x20016838
 800660c:	20016804 	.word	0x20016804
 8006610:	20016384 	.word	0x20016384
 8006614:	2001687c 	.word	0x2001687c
 8006618:	200167f8 	.word	0x200167f8
 800661c:	e000ed04 	.word	0xe000ed04
 8006620:	20016390 	.word	0x20016390

08006624 <vTaskDelay>:
	{
 8006624:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006626:	b1a8      	cbz	r0, 8006654 <vTaskDelay+0x30>
 8006628:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800662a:	4b0f      	ldr	r3, [pc, #60]	; (8006668 <vTaskDelay+0x44>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	b143      	cbz	r3, 8006642 <vTaskDelay+0x1e>
 8006630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006634:	f383 8811 	msr	BASEPRI, r3
 8006638:	f3bf 8f6f 	isb	sy
 800663c:	f3bf 8f4f 	dsb	sy
 8006640:	e7fe      	b.n	8006640 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8006642:	f7ff fed1 	bl	80063e8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006646:	2100      	movs	r1, #0
 8006648:	4620      	mov	r0, r4
 800664a:	f7ff fddf 	bl	800620c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800664e:	f7ff ff6d 	bl	800652c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8006652:	b938      	cbnz	r0, 8006664 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 8006654:	4b05      	ldr	r3, [pc, #20]	; (800666c <vTaskDelay+0x48>)
 8006656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800665a:	601a      	str	r2, [r3, #0]
 800665c:	f3bf 8f4f 	dsb	sy
 8006660:	f3bf 8f6f 	isb	sy
	}
 8006664:	bd10      	pop	{r4, pc}
 8006666:	bf00      	nop
 8006668:	200167fc 	.word	0x200167fc
 800666c:	e000ed04 	.word	0xe000ed04

08006670 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006670:	4b23      	ldr	r3, [pc, #140]	; (8006700 <vTaskSwitchContext+0x90>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	b11b      	cbz	r3, 800667e <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8006676:	4b23      	ldr	r3, [pc, #140]	; (8006704 <vTaskSwitchContext+0x94>)
 8006678:	2201      	movs	r2, #1
 800667a:	601a      	str	r2, [r3, #0]
 800667c:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800667e:	4b21      	ldr	r3, [pc, #132]	; (8006704 <vTaskSwitchContext+0x94>)
 8006680:	2200      	movs	r2, #0
 8006682:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006684:	4b20      	ldr	r3, [pc, #128]	; (8006708 <vTaskSwitchContext+0x98>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800668c:	0092      	lsls	r2, r2, #2
 800668e:	491f      	ldr	r1, [pc, #124]	; (800670c <vTaskSwitchContext+0x9c>)
 8006690:	588a      	ldr	r2, [r1, r2]
 8006692:	b992      	cbnz	r2, 80066ba <vTaskSwitchContext+0x4a>
 8006694:	b143      	cbz	r3, 80066a8 <vTaskSwitchContext+0x38>
 8006696:	460a      	mov	r2, r1
 8006698:	3b01      	subs	r3, #1
 800669a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800669e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80066a2:	b951      	cbnz	r1, 80066ba <vTaskSwitchContext+0x4a>
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d1f7      	bne.n	8006698 <vTaskSwitchContext+0x28>
 80066a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ac:	f383 8811 	msr	BASEPRI, r3
 80066b0:	f3bf 8f6f 	isb	sy
 80066b4:	f3bf 8f4f 	dsb	sy
 80066b8:	e7fe      	b.n	80066b8 <vTaskSwitchContext+0x48>
{
 80066ba:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80066bc:	4a13      	ldr	r2, [pc, #76]	; (800670c <vTaskSwitchContext+0x9c>)
 80066be:	0099      	lsls	r1, r3, #2
 80066c0:	18c8      	adds	r0, r1, r3
 80066c2:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 80066c6:	6844      	ldr	r4, [r0, #4]
 80066c8:	6864      	ldr	r4, [r4, #4]
 80066ca:	6044      	str	r4, [r0, #4]
 80066cc:	4602      	mov	r2, r0
 80066ce:	3208      	adds	r2, #8
 80066d0:	4294      	cmp	r4, r2
 80066d2:	d00d      	beq.n	80066f0 <vTaskSwitchContext+0x80>
 80066d4:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80066d8:	4a0c      	ldr	r2, [pc, #48]	; (800670c <vTaskSwitchContext+0x9c>)
 80066da:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80066de:	6852      	ldr	r2, [r2, #4]
 80066e0:	68d1      	ldr	r1, [r2, #12]
 80066e2:	4a0b      	ldr	r2, [pc, #44]	; (8006710 <vTaskSwitchContext+0xa0>)
 80066e4:	6011      	str	r1, [r2, #0]
 80066e6:	4a08      	ldr	r2, [pc, #32]	; (8006708 <vTaskSwitchContext+0x98>)
 80066e8:	6013      	str	r3, [r2, #0]
}
 80066ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066ee:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80066f0:	6861      	ldr	r1, [r4, #4]
 80066f2:	4806      	ldr	r0, [pc, #24]	; (800670c <vTaskSwitchContext+0x9c>)
 80066f4:	2214      	movs	r2, #20
 80066f6:	fb02 0203 	mla	r2, r2, r3, r0
 80066fa:	6051      	str	r1, [r2, #4]
 80066fc:	e7ea      	b.n	80066d4 <vTaskSwitchContext+0x64>
 80066fe:	bf00      	nop
 8006700:	200167fc 	.word	0x200167fc
 8006704:	2001687c 	.word	0x2001687c
 8006708:	20016804 	.word	0x20016804
 800670c:	20016390 	.word	0x20016390
 8006710:	20016384 	.word	0x20016384

08006714 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8006714:	b940      	cbnz	r0, 8006728 <vTaskPlaceOnEventList+0x14>
 8006716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671a:	f383 8811 	msr	BASEPRI, r3
 800671e:	f3bf 8f6f 	isb	sy
 8006722:	f3bf 8f4f 	dsb	sy
 8006726:	e7fe      	b.n	8006726 <vTaskPlaceOnEventList+0x12>
{
 8006728:	b510      	push	{r4, lr}
 800672a:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800672c:	4b04      	ldr	r3, [pc, #16]	; (8006740 <vTaskPlaceOnEventList+0x2c>)
 800672e:	6819      	ldr	r1, [r3, #0]
 8006730:	3118      	adds	r1, #24
 8006732:	f7fe fea3 	bl	800547c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006736:	2101      	movs	r1, #1
 8006738:	4620      	mov	r0, r4
 800673a:	f7ff fd67 	bl	800620c <prvAddCurrentTaskToDelayedList>
}
 800673e:	bd10      	pop	{r4, pc}
 8006740:	20016384 	.word	0x20016384

08006744 <vTaskPlaceOnEventListRestricted>:
	{
 8006744:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8006746:	b940      	cbnz	r0, 800675a <vTaskPlaceOnEventListRestricted+0x16>
 8006748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674c:	f383 8811 	msr	BASEPRI, r3
 8006750:	f3bf 8f6f 	isb	sy
 8006754:	f3bf 8f4f 	dsb	sy
 8006758:	e7fe      	b.n	8006758 <vTaskPlaceOnEventListRestricted+0x14>
 800675a:	4614      	mov	r4, r2
 800675c:	460d      	mov	r5, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800675e:	4b07      	ldr	r3, [pc, #28]	; (800677c <vTaskPlaceOnEventListRestricted+0x38>)
 8006760:	6819      	ldr	r1, [r3, #0]
 8006762:	3118      	adds	r1, #24
 8006764:	f7fe fe7e 	bl	8005464 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8006768:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800676a:	4621      	mov	r1, r4
 800676c:	bf0c      	ite	eq
 800676e:	4628      	moveq	r0, r5
 8006770:	f04f 30ff 	movne.w	r0, #4294967295
 8006774:	f7ff fd4a 	bl	800620c <prvAddCurrentTaskToDelayedList>
	}
 8006778:	bd38      	pop	{r3, r4, r5, pc}
 800677a:	bf00      	nop
 800677c:	20016384 	.word	0x20016384

08006780 <xTaskRemoveFromEventList>:
{
 8006780:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006782:	68c3      	ldr	r3, [r0, #12]
 8006784:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8006786:	b944      	cbnz	r4, 800679a <xTaskRemoveFromEventList+0x1a>
 8006788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678c:	f383 8811 	msr	BASEPRI, r3
 8006790:	f3bf 8f6f 	isb	sy
 8006794:	f3bf 8f4f 	dsb	sy
 8006798:	e7fe      	b.n	8006798 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800679a:	f104 0518 	add.w	r5, r4, #24
 800679e:	4628      	mov	r0, r5
 80067a0:	f7fe fe86 	bl	80054b0 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067a4:	4b12      	ldr	r3, [pc, #72]	; (80067f0 <xTaskRemoveFromEventList+0x70>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	b9eb      	cbnz	r3, 80067e6 <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80067aa:	1d25      	adds	r5, r4, #4
 80067ac:	4628      	mov	r0, r5
 80067ae:	f7fe fe7f 	bl	80054b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80067b2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80067b4:	4b0f      	ldr	r3, [pc, #60]	; (80067f4 <xTaskRemoveFromEventList+0x74>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4298      	cmp	r0, r3
 80067ba:	bf84      	itt	hi
 80067bc:	4b0d      	ldrhi	r3, [pc, #52]	; (80067f4 <xTaskRemoveFromEventList+0x74>)
 80067be:	6018      	strhi	r0, [r3, #0]
 80067c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80067c4:	4629      	mov	r1, r5
 80067c6:	4b0c      	ldr	r3, [pc, #48]	; (80067f8 <xTaskRemoveFromEventList+0x78>)
 80067c8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80067cc:	f7fe fe4a 	bl	8005464 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80067d0:	4b0a      	ldr	r3, [pc, #40]	; (80067fc <xTaskRemoveFromEventList+0x7c>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80067d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067d8:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80067da:	bf83      	ittte	hi
 80067dc:	2001      	movhi	r0, #1
 80067de:	4b08      	ldrhi	r3, [pc, #32]	; (8006800 <xTaskRemoveFromEventList+0x80>)
 80067e0:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 80067e2:	2000      	movls	r0, #0
}
 80067e4:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80067e6:	4629      	mov	r1, r5
 80067e8:	4806      	ldr	r0, [pc, #24]	; (8006804 <xTaskRemoveFromEventList+0x84>)
 80067ea:	f7fe fe3b 	bl	8005464 <vListInsertEnd>
 80067ee:	e7ef      	b.n	80067d0 <xTaskRemoveFromEventList+0x50>
 80067f0:	200167fc 	.word	0x200167fc
 80067f4:	20016804 	.word	0x20016804
 80067f8:	20016390 	.word	0x20016390
 80067fc:	20016384 	.word	0x20016384
 8006800:	2001687c 	.word	0x2001687c
 8006804:	20016838 	.word	0x20016838

08006808 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006808:	4b03      	ldr	r3, [pc, #12]	; (8006818 <vTaskInternalSetTimeOutState+0x10>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800680e:	4b03      	ldr	r3, [pc, #12]	; (800681c <vTaskInternalSetTimeOutState+0x14>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	6043      	str	r3, [r0, #4]
}
 8006814:	4770      	bx	lr
 8006816:	bf00      	nop
 8006818:	20016834 	.word	0x20016834
 800681c:	20016878 	.word	0x20016878

08006820 <xTaskCheckForTimeOut>:
{
 8006820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8006822:	b150      	cbz	r0, 800683a <xTaskCheckForTimeOut+0x1a>
 8006824:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 8006826:	b989      	cbnz	r1, 800684c <xTaskCheckForTimeOut+0x2c>
 8006828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800682c:	f383 8811 	msr	BASEPRI, r3
 8006830:	f3bf 8f6f 	isb	sy
 8006834:	f3bf 8f4f 	dsb	sy
 8006838:	e7fe      	b.n	8006838 <xTaskCheckForTimeOut+0x18>
 800683a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683e:	f383 8811 	msr	BASEPRI, r3
 8006842:	f3bf 8f6f 	isb	sy
 8006846:	f3bf 8f4f 	dsb	sy
 800684a:	e7fe      	b.n	800684a <xTaskCheckForTimeOut+0x2a>
 800684c:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
 800684e:	f000 fb91 	bl	8006f74 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8006852:	4b11      	ldr	r3, [pc, #68]	; (8006898 <xTaskCheckForTimeOut+0x78>)
 8006854:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006856:	6868      	ldr	r0, [r5, #4]
 8006858:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 800685a:	6823      	ldr	r3, [r4, #0]
 800685c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006860:	d016      	beq.n	8006890 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006862:	4e0e      	ldr	r6, [pc, #56]	; (800689c <xTaskCheckForTimeOut+0x7c>)
 8006864:	6836      	ldr	r6, [r6, #0]
 8006866:	682f      	ldr	r7, [r5, #0]
 8006868:	42b7      	cmp	r7, r6
 800686a:	d001      	beq.n	8006870 <xTaskCheckForTimeOut+0x50>
 800686c:	4288      	cmp	r0, r1
 800686e:	d911      	bls.n	8006894 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006870:	4293      	cmp	r3, r2
 8006872:	d803      	bhi.n	800687c <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 8006874:	2300      	movs	r3, #0
 8006876:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8006878:	2401      	movs	r4, #1
 800687a:	e005      	b.n	8006888 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800687c:	1a9b      	subs	r3, r3, r2
 800687e:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006880:	4628      	mov	r0, r5
 8006882:	f7ff ffc1 	bl	8006808 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006886:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006888:	f000 fb96 	bl	8006fb8 <vPortExitCritical>
}
 800688c:	4620      	mov	r0, r4
 800688e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 8006890:	2400      	movs	r4, #0
 8006892:	e7f9      	b.n	8006888 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 8006894:	2401      	movs	r4, #1
 8006896:	e7f7      	b.n	8006888 <xTaskCheckForTimeOut+0x68>
 8006898:	20016878 	.word	0x20016878
 800689c:	20016834 	.word	0x20016834

080068a0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80068a0:	4b01      	ldr	r3, [pc, #4]	; (80068a8 <vTaskMissedYield+0x8>)
 80068a2:	2201      	movs	r2, #1
 80068a4:	601a      	str	r2, [r3, #0]
}
 80068a6:	4770      	bx	lr
 80068a8:	2001687c 	.word	0x2001687c

080068ac <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80068ac:	4b05      	ldr	r3, [pc, #20]	; (80068c4 <xTaskGetSchedulerState+0x18>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	b133      	cbz	r3, 80068c0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068b2:	4b05      	ldr	r3, [pc, #20]	; (80068c8 <xTaskGetSchedulerState+0x1c>)
 80068b4:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	bf0c      	ite	eq
 80068ba:	2002      	moveq	r0, #2
 80068bc:	2000      	movne	r0, #0
 80068be:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80068c0:	2001      	movs	r0, #1
	}
 80068c2:	4770      	bx	lr
 80068c4:	2001684c 	.word	0x2001684c
 80068c8:	200167fc 	.word	0x200167fc

080068cc <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 80068cc:	2800      	cmp	r0, #0
 80068ce:	d03f      	beq.n	8006950 <xTaskPriorityInherit+0x84>
	{
 80068d0:	b538      	push	{r3, r4, r5, lr}
 80068d2:	4605      	mov	r5, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80068d4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80068d6:	491f      	ldr	r1, [pc, #124]	; (8006954 <xTaskPriorityInherit+0x88>)
 80068d8:	6809      	ldr	r1, [r1, #0]
 80068da:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80068dc:	428a      	cmp	r2, r1
 80068de:	d22e      	bcs.n	800693e <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80068e0:	6981      	ldr	r1, [r0, #24]
 80068e2:	2900      	cmp	r1, #0
 80068e4:	db05      	blt.n	80068f2 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068e6:	491b      	ldr	r1, [pc, #108]	; (8006954 <xTaskPriorityInherit+0x88>)
 80068e8:	6809      	ldr	r1, [r1, #0]
 80068ea:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80068ec:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
 80068f0:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80068f2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80068f6:	4918      	ldr	r1, [pc, #96]	; (8006958 <xTaskPriorityInherit+0x8c>)
 80068f8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80068fc:	6969      	ldr	r1, [r5, #20]
 80068fe:	4291      	cmp	r1, r2
 8006900:	d005      	beq.n	800690e <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006902:	4a14      	ldr	r2, [pc, #80]	; (8006954 <xTaskPriorityInherit+0x88>)
 8006904:	6812      	ldr	r2, [r2, #0]
 8006906:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006908:	62ea      	str	r2, [r5, #44]	; 0x2c
				xReturn = pdTRUE;
 800690a:	2001      	movs	r0, #1
 800690c:	e01f      	b.n	800694e <xTaskPriorityInherit+0x82>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800690e:	1d2c      	adds	r4, r5, #4
 8006910:	4620      	mov	r0, r4
 8006912:	f7fe fdcd 	bl	80054b0 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006916:	4b0f      	ldr	r3, [pc, #60]	; (8006954 <xTaskPriorityInherit+0x88>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800691c:	62e8      	str	r0, [r5, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800691e:	4b0f      	ldr	r3, [pc, #60]	; (800695c <xTaskPriorityInherit+0x90>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4298      	cmp	r0, r3
 8006924:	d901      	bls.n	800692a <xTaskPriorityInherit+0x5e>
 8006926:	4b0d      	ldr	r3, [pc, #52]	; (800695c <xTaskPriorityInherit+0x90>)
 8006928:	6018      	str	r0, [r3, #0]
 800692a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800692e:	4621      	mov	r1, r4
 8006930:	4b09      	ldr	r3, [pc, #36]	; (8006958 <xTaskPriorityInherit+0x8c>)
 8006932:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006936:	f7fe fd95 	bl	8005464 <vListInsertEnd>
				xReturn = pdTRUE;
 800693a:	2001      	movs	r0, #1
 800693c:	e007      	b.n	800694e <xTaskPriorityInherit+0x82>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800693e:	4a05      	ldr	r2, [pc, #20]	; (8006954 <xTaskPriorityInherit+0x88>)
 8006940:	6812      	ldr	r2, [r2, #0]
 8006942:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8006944:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006946:	4298      	cmp	r0, r3
 8006948:	bf2c      	ite	cs
 800694a:	2000      	movcs	r0, #0
 800694c:	2001      	movcc	r0, #1
	}
 800694e:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 8006950:	2000      	movs	r0, #0
	}
 8006952:	4770      	bx	lr
 8006954:	20016384 	.word	0x20016384
 8006958:	20016390 	.word	0x20016390
 800695c:	20016804 	.word	0x20016804

08006960 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8006960:	2800      	cmp	r0, #0
 8006962:	d038      	beq.n	80069d6 <xTaskPriorityDisinherit+0x76>
	{
 8006964:	b538      	push	{r3, r4, r5, lr}
 8006966:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8006968:	4a1e      	ldr	r2, [pc, #120]	; (80069e4 <xTaskPriorityDisinherit+0x84>)
 800696a:	6812      	ldr	r2, [r2, #0]
 800696c:	4282      	cmp	r2, r0
 800696e:	d008      	beq.n	8006982 <xTaskPriorityDisinherit+0x22>
 8006970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006974:	f383 8811 	msr	BASEPRI, r3
 8006978:	f3bf 8f6f 	isb	sy
 800697c:	f3bf 8f4f 	dsb	sy
 8006980:	e7fe      	b.n	8006980 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8006982:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8006984:	b942      	cbnz	r2, 8006998 <xTaskPriorityDisinherit+0x38>
 8006986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698a:	f383 8811 	msr	BASEPRI, r3
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	f3bf 8f4f 	dsb	sy
 8006996:	e7fe      	b.n	8006996 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8006998:	3a01      	subs	r2, #1
 800699a:	6502      	str	r2, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800699c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800699e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80069a0:	4288      	cmp	r0, r1
 80069a2:	d01a      	beq.n	80069da <xTaskPriorityDisinherit+0x7a>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80069a4:	b9da      	cbnz	r2, 80069de <xTaskPriorityDisinherit+0x7e>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069a6:	1d25      	adds	r5, r4, #4
 80069a8:	4628      	mov	r0, r5
 80069aa:	f7fe fd81 	bl	80054b0 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80069ae:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80069b0:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80069b6:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80069b8:	4a0b      	ldr	r2, [pc, #44]	; (80069e8 <xTaskPriorityDisinherit+0x88>)
 80069ba:	6812      	ldr	r2, [r2, #0]
 80069bc:	4293      	cmp	r3, r2
 80069be:	bf84      	itt	hi
 80069c0:	4a09      	ldrhi	r2, [pc, #36]	; (80069e8 <xTaskPriorityDisinherit+0x88>)
 80069c2:	6013      	strhi	r3, [r2, #0]
 80069c4:	4629      	mov	r1, r5
 80069c6:	4a09      	ldr	r2, [pc, #36]	; (80069ec <xTaskPriorityDisinherit+0x8c>)
 80069c8:	2014      	movs	r0, #20
 80069ca:	fb00 2003 	mla	r0, r0, r3, r2
 80069ce:	f7fe fd49 	bl	8005464 <vListInsertEnd>
					xReturn = pdTRUE;
 80069d2:	2001      	movs	r0, #1
	}
 80069d4:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 80069d6:	2000      	movs	r0, #0
	}
 80069d8:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 80069da:	2000      	movs	r0, #0
 80069dc:	e7fa      	b.n	80069d4 <xTaskPriorityDisinherit+0x74>
 80069de:	2000      	movs	r0, #0
		return xReturn;
 80069e0:	e7f8      	b.n	80069d4 <xTaskPriorityDisinherit+0x74>
 80069e2:	bf00      	nop
 80069e4:	20016384 	.word	0x20016384
 80069e8:	20016804 	.word	0x20016804
 80069ec:	20016390 	.word	0x20016390

080069f0 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 80069f0:	2800      	cmp	r0, #0
 80069f2:	d044      	beq.n	8006a7e <vTaskPriorityDisinheritAfterTimeout+0x8e>
	{
 80069f4:	b538      	push	{r3, r4, r5, lr}
 80069f6:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 80069f8:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80069fa:	b940      	cbnz	r0, 8006a0e <vTaskPriorityDisinheritAfterTimeout+0x1e>
 80069fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a00:	f383 8811 	msr	BASEPRI, r3
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	e7fe      	b.n	8006a0c <vTaskPriorityDisinheritAfterTimeout+0x1c>
 8006a0e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006a10:	428a      	cmp	r2, r1
 8006a12:	bf38      	it	cc
 8006a14:	460a      	movcc	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006a16:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006a18:	4291      	cmp	r1, r2
 8006a1a:	d001      	beq.n	8006a20 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006a1c:	2801      	cmp	r0, #1
 8006a1e:	d000      	beq.n	8006a22 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 8006a20:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 8006a22:	4817      	ldr	r0, [pc, #92]	; (8006a80 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 8006a24:	6800      	ldr	r0, [r0, #0]
 8006a26:	42a0      	cmp	r0, r4
 8006a28:	d108      	bne.n	8006a3c <vTaskPriorityDisinheritAfterTimeout+0x4c>
 8006a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2e:	f383 8811 	msr	BASEPRI, r3
 8006a32:	f3bf 8f6f 	isb	sy
 8006a36:	f3bf 8f4f 	dsb	sy
 8006a3a:	e7fe      	b.n	8006a3a <vTaskPriorityDisinheritAfterTimeout+0x4a>
					pxTCB->uxPriority = uxPriorityToUse;
 8006a3c:	62e2      	str	r2, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006a3e:	69a0      	ldr	r0, [r4, #24]
 8006a40:	2800      	cmp	r0, #0
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a42:	bfa4      	itt	ge
 8006a44:	f1c2 0238 	rsbge	r2, r2, #56	; 0x38
 8006a48:	61a2      	strge	r2, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006a4a:	4a0e      	ldr	r2, [pc, #56]	; (8006a84 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 8006a4c:	2014      	movs	r0, #20
 8006a4e:	fb00 2101 	mla	r1, r0, r1, r2
 8006a52:	6962      	ldr	r2, [r4, #20]
 8006a54:	428a      	cmp	r2, r1
 8006a56:	d1e3      	bne.n	8006a20 <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a58:	1d25      	adds	r5, r4, #4
 8006a5a:	4628      	mov	r0, r5
 8006a5c:	f7fe fd28 	bl	80054b0 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8006a60:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006a62:	4a09      	ldr	r2, [pc, #36]	; (8006a88 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8006a64:	6812      	ldr	r2, [r2, #0]
 8006a66:	4293      	cmp	r3, r2
 8006a68:	bf84      	itt	hi
 8006a6a:	4a07      	ldrhi	r2, [pc, #28]	; (8006a88 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 8006a6c:	6013      	strhi	r3, [r2, #0]
 8006a6e:	4629      	mov	r1, r5
 8006a70:	4a04      	ldr	r2, [pc, #16]	; (8006a84 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 8006a72:	2014      	movs	r0, #20
 8006a74:	fb00 2003 	mla	r0, r0, r3, r2
 8006a78:	f7fe fcf4 	bl	8005464 <vListInsertEnd>
	}
 8006a7c:	e7d0      	b.n	8006a20 <vTaskPriorityDisinheritAfterTimeout+0x30>
 8006a7e:	4770      	bx	lr
 8006a80:	20016384 	.word	0x20016384
 8006a84:	20016390 	.word	0x20016390
 8006a88:	20016804 	.word	0x20016804

08006a8c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8006a8c:	4b05      	ldr	r3, [pc, #20]	; (8006aa4 <pvTaskIncrementMutexHeldCount+0x18>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	b123      	cbz	r3, 8006a9c <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8006a92:	4b04      	ldr	r3, [pc, #16]	; (8006aa4 <pvTaskIncrementMutexHeldCount+0x18>)
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006a98:	3301      	adds	r3, #1
 8006a9a:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 8006a9c:	4b01      	ldr	r3, [pc, #4]	; (8006aa4 <pvTaskIncrementMutexHeldCount+0x18>)
 8006a9e:	6818      	ldr	r0, [r3, #0]
	}
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	20016384 	.word	0x20016384

08006aa8 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006aa8:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006aaa:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006aac:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006aae:	4291      	cmp	r1, r2
 8006ab0:	d80c      	bhi.n	8006acc <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ab2:	1ad2      	subs	r2, r2, r3
 8006ab4:	6983      	ldr	r3, [r0, #24]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d301      	bcc.n	8006abe <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006aba:	2001      	movs	r0, #1
 8006abc:	e010      	b.n	8006ae0 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006abe:	1d01      	adds	r1, r0, #4
 8006ac0:	4b09      	ldr	r3, [pc, #36]	; (8006ae8 <prvInsertTimerInActiveList+0x40>)
 8006ac2:	6818      	ldr	r0, [r3, #0]
 8006ac4:	f7fe fcda 	bl	800547c <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8006ac8:	2000      	movs	r0, #0
 8006aca:	e009      	b.n	8006ae0 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d201      	bcs.n	8006ad4 <prvInsertTimerInActiveList+0x2c>
 8006ad0:	4299      	cmp	r1, r3
 8006ad2:	d206      	bcs.n	8006ae2 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ad4:	1d01      	adds	r1, r0, #4
 8006ad6:	4b05      	ldr	r3, [pc, #20]	; (8006aec <prvInsertTimerInActiveList+0x44>)
 8006ad8:	6818      	ldr	r0, [r3, #0]
 8006ada:	f7fe fccf 	bl	800547c <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8006ade:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 8006ae0:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
 8006ae2:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8006ae4:	e7fc      	b.n	8006ae0 <prvInsertTimerInActiveList+0x38>
 8006ae6:	bf00      	nop
 8006ae8:	20016884 	.word	0x20016884
 8006aec:	20016880 	.word	0x20016880

08006af0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006af0:	b530      	push	{r4, r5, lr}
 8006af2:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006af4:	f000 fa3e 	bl	8006f74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006af8:	4b11      	ldr	r3, [pc, #68]	; (8006b40 <prvCheckForValidListAndQueue+0x50>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	b11b      	cbz	r3, 8006b06 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006afe:	f000 fa5b 	bl	8006fb8 <vPortExitCritical>
}
 8006b02:	b003      	add	sp, #12
 8006b04:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 8006b06:	4d0f      	ldr	r5, [pc, #60]	; (8006b44 <prvCheckForValidListAndQueue+0x54>)
 8006b08:	4628      	mov	r0, r5
 8006b0a:	f7fe fc9d 	bl	8005448 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006b0e:	4c0e      	ldr	r4, [pc, #56]	; (8006b48 <prvCheckForValidListAndQueue+0x58>)
 8006b10:	4620      	mov	r0, r4
 8006b12:	f7fe fc99 	bl	8005448 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006b16:	4b0d      	ldr	r3, [pc, #52]	; (8006b4c <prvCheckForValidListAndQueue+0x5c>)
 8006b18:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006b1a:	4b0d      	ldr	r3, [pc, #52]	; (8006b50 <prvCheckForValidListAndQueue+0x60>)
 8006b1c:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006b1e:	2300      	movs	r3, #0
 8006b20:	9300      	str	r3, [sp, #0]
 8006b22:	4b0c      	ldr	r3, [pc, #48]	; (8006b54 <prvCheckForValidListAndQueue+0x64>)
 8006b24:	4a0c      	ldr	r2, [pc, #48]	; (8006b58 <prvCheckForValidListAndQueue+0x68>)
 8006b26:	2110      	movs	r1, #16
 8006b28:	200a      	movs	r0, #10
 8006b2a:	f7fe fdad 	bl	8005688 <xQueueGenericCreateStatic>
 8006b2e:	4b04      	ldr	r3, [pc, #16]	; (8006b40 <prvCheckForValidListAndQueue+0x50>)
 8006b30:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 8006b32:	2800      	cmp	r0, #0
 8006b34:	d0e3      	beq.n	8006afe <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006b36:	4909      	ldr	r1, [pc, #36]	; (8006b5c <prvCheckForValidListAndQueue+0x6c>)
 8006b38:	f7ff f9c6 	bl	8005ec8 <vQueueAddToRegistry>
 8006b3c:	e7df      	b.n	8006afe <prvCheckForValidListAndQueue+0xe>
 8006b3e:	bf00      	nop
 8006b40:	200169a4 	.word	0x200169a4
 8006b44:	20016928 	.word	0x20016928
 8006b48:	2001693c 	.word	0x2001693c
 8006b4c:	20016880 	.word	0x20016880
 8006b50:	20016884 	.word	0x20016884
 8006b54:	20016954 	.word	0x20016954
 8006b58:	20016888 	.word	0x20016888
 8006b5c:	0801a0f8 	.word	0x0801a0f8

08006b60 <xTimerCreateTimerTask>:
{
 8006b60:	b510      	push	{r4, lr}
 8006b62:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8006b64:	f7ff ffc4 	bl	8006af0 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8006b68:	4b12      	ldr	r3, [pc, #72]	; (8006bb4 <xTimerCreateTimerTask+0x54>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	b1cb      	cbz	r3, 8006ba2 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006b6e:	2400      	movs	r4, #0
 8006b70:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006b72:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006b74:	aa07      	add	r2, sp, #28
 8006b76:	a906      	add	r1, sp, #24
 8006b78:	a805      	add	r0, sp, #20
 8006b7a:	f7fe fc59 	bl	8005430 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006b7e:	9b05      	ldr	r3, [sp, #20]
 8006b80:	9302      	str	r3, [sp, #8]
 8006b82:	9b06      	ldr	r3, [sp, #24]
 8006b84:	9301      	str	r3, [sp, #4]
 8006b86:	2302      	movs	r3, #2
 8006b88:	9300      	str	r3, [sp, #0]
 8006b8a:	4623      	mov	r3, r4
 8006b8c:	9a07      	ldr	r2, [sp, #28]
 8006b8e:	490a      	ldr	r1, [pc, #40]	; (8006bb8 <xTimerCreateTimerTask+0x58>)
 8006b90:	480a      	ldr	r0, [pc, #40]	; (8006bbc <xTimerCreateTimerTask+0x5c>)
 8006b92:	f7ff fb79 	bl	8006288 <xTaskCreateStatic>
 8006b96:	4b0a      	ldr	r3, [pc, #40]	; (8006bc0 <xTimerCreateTimerTask+0x60>)
 8006b98:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8006b9a:	b110      	cbz	r0, 8006ba2 <xTimerCreateTimerTask+0x42>
}
 8006b9c:	2001      	movs	r0, #1
 8006b9e:	b008      	add	sp, #32
 8006ba0:	bd10      	pop	{r4, pc}
 8006ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba6:	f383 8811 	msr	BASEPRI, r3
 8006baa:	f3bf 8f6f 	isb	sy
 8006bae:	f3bf 8f4f 	dsb	sy
 8006bb2:	e7fe      	b.n	8006bb2 <xTimerCreateTimerTask+0x52>
 8006bb4:	200169a4 	.word	0x200169a4
 8006bb8:	0801a100 	.word	0x0801a100
 8006bbc:	08006ccd 	.word	0x08006ccd
 8006bc0:	200169a8 	.word	0x200169a8

08006bc4 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8006bc4:	b1d8      	cbz	r0, 8006bfe <xTimerGenericCommand+0x3a>
{
 8006bc6:	b530      	push	{r4, r5, lr}
 8006bc8:	b085      	sub	sp, #20
 8006bca:	4615      	mov	r5, r2
 8006bcc:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
 8006bce:	4a14      	ldr	r2, [pc, #80]	; (8006c20 <xTimerGenericCommand+0x5c>)
 8006bd0:	6810      	ldr	r0, [r2, #0]
 8006bd2:	b310      	cbz	r0, 8006c1a <xTimerGenericCommand+0x56>
 8006bd4:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
 8006bd6:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006bd8:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8006bda:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006bdc:	2905      	cmp	r1, #5
 8006bde:	dc17      	bgt.n	8006c10 <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006be0:	f7ff fe64 	bl	80068ac <xTaskGetSchedulerState>
 8006be4:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006be6:	f04f 0300 	mov.w	r3, #0
 8006bea:	bf0c      	ite	eq
 8006bec:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006bee:	461a      	movne	r2, r3
 8006bf0:	4669      	mov	r1, sp
 8006bf2:	480b      	ldr	r0, [pc, #44]	; (8006c20 <xTimerGenericCommand+0x5c>)
 8006bf4:	6800      	ldr	r0, [r0, #0]
 8006bf6:	f7fe fe0b 	bl	8005810 <xQueueGenericSend>
}
 8006bfa:	b005      	add	sp, #20
 8006bfc:	bd30      	pop	{r4, r5, pc}
 8006bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c02:	f383 8811 	msr	BASEPRI, r3
 8006c06:	f3bf 8f6f 	isb	sy
 8006c0a:	f3bf 8f4f 	dsb	sy
 8006c0e:	e7fe      	b.n	8006c0e <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006c10:	2300      	movs	r3, #0
 8006c12:	4669      	mov	r1, sp
 8006c14:	f7fe fec0 	bl	8005998 <xQueueGenericSendFromISR>
 8006c18:	e7ef      	b.n	8006bfa <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
 8006c1a:	2000      	movs	r0, #0
	return xReturn;
 8006c1c:	e7ed      	b.n	8006bfa <xTimerGenericCommand+0x36>
 8006c1e:	bf00      	nop
 8006c20:	200169a4 	.word	0x200169a4

08006c24 <prvSampleTimeNow>:
{
 8006c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c28:	b082      	sub	sp, #8
 8006c2a:	4607      	mov	r7, r0
	xTimeNow = xTaskGetTickCount();
 8006c2c:	f7ff fbe4 	bl	80063f8 <xTaskGetTickCount>
 8006c30:	4606      	mov	r6, r0
	if( xTimeNow < xLastTime )
 8006c32:	4b23      	ldr	r3, [pc, #140]	; (8006cc0 <prvSampleTimeNow+0x9c>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4283      	cmp	r3, r0
 8006c38:	d807      	bhi.n	8006c4a <prvSampleTimeNow+0x26>
		*pxTimerListsWereSwitched = pdFALSE;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	603b      	str	r3, [r7, #0]
	xLastTime = xTimeNow;
 8006c3e:	4b20      	ldr	r3, [pc, #128]	; (8006cc0 <prvSampleTimeNow+0x9c>)
 8006c40:	601e      	str	r6, [r3, #0]
}
 8006c42:	4630      	mov	r0, r6
 8006c44:	b002      	add	sp, #8
 8006c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c4a:	4d1e      	ldr	r5, [pc, #120]	; (8006cc4 <prvSampleTimeNow+0xa0>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c4c:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c50:	682b      	ldr	r3, [r5, #0]
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	b362      	cbz	r2, 8006cb0 <prvSampleTimeNow+0x8c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c5c:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c5e:	f104 0904 	add.w	r9, r4, #4
 8006c62:	4648      	mov	r0, r9
 8006c64:	f7fe fc24 	bl	80054b0 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006c6e:	69e3      	ldr	r3, [r4, #28]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d1ed      	bne.n	8006c50 <prvSampleTimeNow+0x2c>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006c74:	69a3      	ldr	r3, [r4, #24]
 8006c76:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 8006c78:	459a      	cmp	sl, r3
 8006c7a:	d206      	bcs.n	8006c8a <prvSampleTimeNow+0x66>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006c7c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c7e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c80:	4649      	mov	r1, r9
 8006c82:	6828      	ldr	r0, [r5, #0]
 8006c84:	f7fe fbfa 	bl	800547c <vListInsert>
 8006c88:	e7e2      	b.n	8006c50 <prvSampleTimeNow+0x2c>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c8a:	f8cd 8000 	str.w	r8, [sp]
 8006c8e:	4643      	mov	r3, r8
 8006c90:	4652      	mov	r2, sl
 8006c92:	4641      	mov	r1, r8
 8006c94:	4620      	mov	r0, r4
 8006c96:	f7ff ff95 	bl	8006bc4 <xTimerGenericCommand>
				configASSERT( xResult );
 8006c9a:	2800      	cmp	r0, #0
 8006c9c:	d1d8      	bne.n	8006c50 <prvSampleTimeNow+0x2c>
 8006c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca2:	f383 8811 	msr	BASEPRI, r3
 8006ca6:	f3bf 8f6f 	isb	sy
 8006caa:	f3bf 8f4f 	dsb	sy
 8006cae:	e7fe      	b.n	8006cae <prvSampleTimeNow+0x8a>
	pxCurrentTimerList = pxOverflowTimerList;
 8006cb0:	4a05      	ldr	r2, [pc, #20]	; (8006cc8 <prvSampleTimeNow+0xa4>)
 8006cb2:	6810      	ldr	r0, [r2, #0]
 8006cb4:	4903      	ldr	r1, [pc, #12]	; (8006cc4 <prvSampleTimeNow+0xa0>)
 8006cb6:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 8006cb8:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	603b      	str	r3, [r7, #0]
 8006cbe:	e7be      	b.n	8006c3e <prvSampleTimeNow+0x1a>
 8006cc0:	20016950 	.word	0x20016950
 8006cc4:	20016880 	.word	0x20016880
 8006cc8:	20016884 	.word	0x20016884

08006ccc <prvTimerTask>:
{
 8006ccc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006cd0:	b089      	sub	sp, #36	; 0x24
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006cd2:	4f6e      	ldr	r7, [pc, #440]	; (8006e8c <prvTimerTask+0x1c0>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006cd4:	4d6e      	ldr	r5, [pc, #440]	; (8006e90 <prvTimerTask+0x1c4>)
					portYIELD_WITHIN_API();
 8006cd6:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006e98 <prvTimerTask+0x1cc>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006cde:	b172      	cbz	r2, 8006cfe <prvTimerTask+0x32>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
 8006ce4:	f7ff fb80 	bl	80063e8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ce8:	a804      	add	r0, sp, #16
 8006cea:	f7ff ff9b 	bl	8006c24 <prvSampleTimeNow>
 8006cee:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8006cf0:	9b04      	ldr	r3, [sp, #16]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d153      	bne.n	8006d9e <prvTimerTask+0xd2>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006cf6:	4284      	cmp	r4, r0
 8006cf8:	d922      	bls.n	8006d40 <prvTimerTask+0x74>
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	e00f      	b.n	8006d1e <prvTimerTask+0x52>
	vTaskSuspendAll();
 8006cfe:	f7ff fb73 	bl	80063e8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d02:	a804      	add	r0, sp, #16
 8006d04:	f7ff ff8e 	bl	8006c24 <prvSampleTimeNow>
 8006d08:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8006d0a:	9b04      	ldr	r3, [sp, #16]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d146      	bne.n	8006d9e <prvTimerTask+0xd2>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006d10:	4b60      	ldr	r3, [pc, #384]	; (8006e94 <prvTimerTask+0x1c8>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	fab2 f282 	clz	r2, r2
 8006d1a:	0952      	lsrs	r2, r2, #5
 8006d1c:	2400      	movs	r4, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006d1e:	1ba1      	subs	r1, r4, r6
 8006d20:	6828      	ldr	r0, [r5, #0]
 8006d22:	f7ff f91b 	bl	8005f5c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006d26:	f7ff fc01 	bl	800652c <xTaskResumeAll>
 8006d2a:	2800      	cmp	r0, #0
 8006d2c:	d139      	bne.n	8006da2 <prvTimerTask+0xd6>
					portYIELD_WITHIN_API();
 8006d2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006d32:	f8c8 3000 	str.w	r3, [r8]
 8006d36:	f3bf 8f4f 	dsb	sy
 8006d3a:	f3bf 8f6f 	isb	sy
 8006d3e:	e030      	b.n	8006da2 <prvTimerTask+0xd6>
				( void ) xTaskResumeAll();
 8006d40:	f7ff fbf4 	bl	800652c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	f8d3 900c 	ldr.w	r9, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d4c:	f109 0004 	add.w	r0, r9, #4
 8006d50:	f7fe fbae 	bl	80054b0 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006d54:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d004      	beq.n	8006d66 <prvTimerTask+0x9a>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d5c:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8006d60:	4648      	mov	r0, r9
 8006d62:	4798      	blx	r3
 8006d64:	e01d      	b.n	8006da2 <prvTimerTask+0xd6>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006d66:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8006d6a:	4623      	mov	r3, r4
 8006d6c:	4632      	mov	r2, r6
 8006d6e:	4421      	add	r1, r4
 8006d70:	4648      	mov	r0, r9
 8006d72:	f7ff fe99 	bl	8006aa8 <prvInsertTimerInActiveList>
 8006d76:	2800      	cmp	r0, #0
 8006d78:	d0f0      	beq.n	8006d5c <prvTimerTask+0x90>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d7a:	2100      	movs	r1, #0
 8006d7c:	9100      	str	r1, [sp, #0]
 8006d7e:	460b      	mov	r3, r1
 8006d80:	4622      	mov	r2, r4
 8006d82:	4648      	mov	r0, r9
 8006d84:	f7ff ff1e 	bl	8006bc4 <xTimerGenericCommand>
			configASSERT( xResult );
 8006d88:	2800      	cmp	r0, #0
 8006d8a:	d1e7      	bne.n	8006d5c <prvTimerTask+0x90>
 8006d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d90:	f383 8811 	msr	BASEPRI, r3
 8006d94:	f3bf 8f6f 	isb	sy
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	e7fe      	b.n	8006d9c <prvTimerTask+0xd0>
			( void ) xTaskResumeAll();
 8006d9e:	f7ff fbc5 	bl	800652c <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006da2:	2400      	movs	r4, #0
 8006da4:	4622      	mov	r2, r4
 8006da6:	a904      	add	r1, sp, #16
 8006da8:	6828      	ldr	r0, [r5, #0]
 8006daa:	f7fe feb5 	bl	8005b18 <xQueueReceive>
 8006dae:	2800      	cmp	r0, #0
 8006db0:	d093      	beq.n	8006cda <prvTimerTask+0xe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006db2:	9b04      	ldr	r3, [sp, #16]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	da06      	bge.n	8006dc6 <prvTimerTask+0xfa>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006db8:	9907      	ldr	r1, [sp, #28]
 8006dba:	9806      	ldr	r0, [sp, #24]
 8006dbc:	9b05      	ldr	r3, [sp, #20]
 8006dbe:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006dc0:	9b04      	ldr	r3, [sp, #16]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	dbee      	blt.n	8006da4 <prvTimerTask+0xd8>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006dc6:	9e06      	ldr	r6, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006dc8:	6973      	ldr	r3, [r6, #20]
 8006dca:	b113      	cbz	r3, 8006dd2 <prvTimerTask+0x106>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006dcc:	1d30      	adds	r0, r6, #4
 8006dce:	f7fe fb6f 	bl	80054b0 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006dd2:	a803      	add	r0, sp, #12
 8006dd4:	f7ff ff26 	bl	8006c24 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8006dd8:	9b04      	ldr	r3, [sp, #16]
 8006dda:	2b09      	cmp	r3, #9
 8006ddc:	d8e2      	bhi.n	8006da4 <prvTimerTask+0xd8>
 8006dde:	a201      	add	r2, pc, #4	; (adr r2, 8006de4 <prvTimerTask+0x118>)
 8006de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de4:	08006e0d 	.word	0x08006e0d
 8006de8:	08006e0d 	.word	0x08006e0d
 8006dec:	08006e0d 	.word	0x08006e0d
 8006df0:	08006da5 	.word	0x08006da5
 8006df4:	08006e55 	.word	0x08006e55
 8006df8:	08006e7b 	.word	0x08006e7b
 8006dfc:	08006e0d 	.word	0x08006e0d
 8006e00:	08006e0d 	.word	0x08006e0d
 8006e04:	08006da5 	.word	0x08006da5
 8006e08:	08006e55 	.word	0x08006e55
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006e0c:	9905      	ldr	r1, [sp, #20]
 8006e0e:	460b      	mov	r3, r1
 8006e10:	4602      	mov	r2, r0
 8006e12:	69b0      	ldr	r0, [r6, #24]
 8006e14:	4401      	add	r1, r0
 8006e16:	4630      	mov	r0, r6
 8006e18:	f7ff fe46 	bl	8006aa8 <prvInsertTimerInActiveList>
 8006e1c:	2800      	cmp	r0, #0
 8006e1e:	d0c1      	beq.n	8006da4 <prvTimerTask+0xd8>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e20:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006e22:	4630      	mov	r0, r6
 8006e24:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006e26:	69f3      	ldr	r3, [r6, #28]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d1bb      	bne.n	8006da4 <prvTimerTask+0xd8>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006e2c:	69b2      	ldr	r2, [r6, #24]
 8006e2e:	9400      	str	r4, [sp, #0]
 8006e30:	4623      	mov	r3, r4
 8006e32:	9905      	ldr	r1, [sp, #20]
 8006e34:	440a      	add	r2, r1
 8006e36:	4621      	mov	r1, r4
 8006e38:	4630      	mov	r0, r6
 8006e3a:	f7ff fec3 	bl	8006bc4 <xTimerGenericCommand>
							configASSERT( xResult );
 8006e3e:	2800      	cmp	r0, #0
 8006e40:	d1b0      	bne.n	8006da4 <prvTimerTask+0xd8>
 8006e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e46:	f383 8811 	msr	BASEPRI, r3
 8006e4a:	f3bf 8f6f 	isb	sy
 8006e4e:	f3bf 8f4f 	dsb	sy
 8006e52:	e7fe      	b.n	8006e52 <prvTimerTask+0x186>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006e54:	9905      	ldr	r1, [sp, #20]
 8006e56:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006e58:	b131      	cbz	r1, 8006e68 <prvTimerTask+0x19c>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	4401      	add	r1, r0
 8006e60:	4630      	mov	r0, r6
 8006e62:	f7ff fe21 	bl	8006aa8 <prvInsertTimerInActiveList>
 8006e66:	e79d      	b.n	8006da4 <prvTimerTask+0xd8>
 8006e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6c:	f383 8811 	msr	BASEPRI, r3
 8006e70:	f3bf 8f6f 	isb	sy
 8006e74:	f3bf 8f4f 	dsb	sy
 8006e78:	e7fe      	b.n	8006e78 <prvTimerTask+0x1ac>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006e7a:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d190      	bne.n	8006da4 <prvTimerTask+0xd8>
							vPortFree( pxTimer );
 8006e82:	4630      	mov	r0, r6
 8006e84:	f000 fa9a 	bl	80073bc <vPortFree>
 8006e88:	e78c      	b.n	8006da4 <prvTimerTask+0xd8>
 8006e8a:	bf00      	nop
 8006e8c:	20016880 	.word	0x20016880
 8006e90:	200169a4 	.word	0x200169a4
 8006e94:	20016884 	.word	0x20016884
 8006e98:	e000ed04 	.word	0xe000ed04

08006e9c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006e9c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006ea2:	4b0d      	ldr	r3, [pc, #52]	; (8006ed8 <prvTaskExitError+0x3c>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eaa:	d008      	beq.n	8006ebe <prvTaskExitError+0x22>
 8006eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb0:	f383 8811 	msr	BASEPRI, r3
 8006eb4:	f3bf 8f6f 	isb	sy
 8006eb8:	f3bf 8f4f 	dsb	sy
 8006ebc:	e7fe      	b.n	8006ebc <prvTaskExitError+0x20>
 8006ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec2:	f383 8811 	msr	BASEPRI, r3
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006ece:	9b01      	ldr	r3, [sp, #4]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d0fc      	beq.n	8006ece <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006ed4:	b002      	add	sp, #8
 8006ed6:	4770      	bx	lr
 8006ed8:	20000c94 	.word	0x20000c94

08006edc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006edc:	4808      	ldr	r0, [pc, #32]	; (8006f00 <prvPortStartFirstTask+0x24>)
 8006ede:	6800      	ldr	r0, [r0, #0]
 8006ee0:	6800      	ldr	r0, [r0, #0]
 8006ee2:	f380 8808 	msr	MSP, r0
 8006ee6:	f04f 0000 	mov.w	r0, #0
 8006eea:	f380 8814 	msr	CONTROL, r0
 8006eee:	b662      	cpsie	i
 8006ef0:	b661      	cpsie	f
 8006ef2:	f3bf 8f4f 	dsb	sy
 8006ef6:	f3bf 8f6f 	isb	sy
 8006efa:	df00      	svc	0
 8006efc:	bf00      	nop
 8006efe:	0000      	.short	0x0000
 8006f00:	e000ed08 	.word	0xe000ed08

08006f04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006f04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006f14 <vPortEnableVFP+0x10>
 8006f08:	6801      	ldr	r1, [r0, #0]
 8006f0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006f0e:	6001      	str	r1, [r0, #0]
 8006f10:	4770      	bx	lr
 8006f12:	0000      	.short	0x0000
 8006f14:	e000ed88 	.word	0xe000ed88

08006f18 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006f18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f1c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006f20:	f021 0101 	bic.w	r1, r1, #1
 8006f24:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006f28:	4b05      	ldr	r3, [pc, #20]	; (8006f40 <pxPortInitialiseStack+0x28>)
 8006f2a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006f2e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006f32:	f06f 0302 	mvn.w	r3, #2
 8006f36:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8006f3a:	3844      	subs	r0, #68	; 0x44
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	08006e9d 	.word	0x08006e9d
	...

08006f50 <SVC_Handler>:
	__asm volatile (
 8006f50:	4b07      	ldr	r3, [pc, #28]	; (8006f70 <pxCurrentTCBConst2>)
 8006f52:	6819      	ldr	r1, [r3, #0]
 8006f54:	6808      	ldr	r0, [r1, #0]
 8006f56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f5a:	f380 8809 	msr	PSP, r0
 8006f5e:	f3bf 8f6f 	isb	sy
 8006f62:	f04f 0000 	mov.w	r0, #0
 8006f66:	f380 8811 	msr	BASEPRI, r0
 8006f6a:	4770      	bx	lr
 8006f6c:	f3af 8000 	nop.w

08006f70 <pxCurrentTCBConst2>:
 8006f70:	20016384 	.word	0x20016384

08006f74 <vPortEnterCritical>:
 8006f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f78:	f383 8811 	msr	BASEPRI, r3
 8006f7c:	f3bf 8f6f 	isb	sy
 8006f80:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8006f84:	4a0a      	ldr	r2, [pc, #40]	; (8006fb0 <vPortEnterCritical+0x3c>)
 8006f86:	6813      	ldr	r3, [r2, #0]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d000      	beq.n	8006f92 <vPortEnterCritical+0x1e>
}
 8006f90:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f92:	4b08      	ldr	r3, [pc, #32]	; (8006fb4 <vPortEnterCritical+0x40>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006f9a:	d0f9      	beq.n	8006f90 <vPortEnterCritical+0x1c>
 8006f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa0:	f383 8811 	msr	BASEPRI, r3
 8006fa4:	f3bf 8f6f 	isb	sy
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	e7fe      	b.n	8006fac <vPortEnterCritical+0x38>
 8006fae:	bf00      	nop
 8006fb0:	20000c94 	.word	0x20000c94
 8006fb4:	e000ed04 	.word	0xe000ed04

08006fb8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8006fb8:	4b09      	ldr	r3, [pc, #36]	; (8006fe0 <vPortExitCritical+0x28>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	b943      	cbnz	r3, 8006fd0 <vPortExitCritical+0x18>
 8006fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc2:	f383 8811 	msr	BASEPRI, r3
 8006fc6:	f3bf 8f6f 	isb	sy
 8006fca:	f3bf 8f4f 	dsb	sy
 8006fce:	e7fe      	b.n	8006fce <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	4a03      	ldr	r2, [pc, #12]	; (8006fe0 <vPortExitCritical+0x28>)
 8006fd4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006fd6:	b90b      	cbnz	r3, 8006fdc <vPortExitCritical+0x24>
	__asm volatile
 8006fd8:	f383 8811 	msr	BASEPRI, r3
}
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	20000c94 	.word	0x20000c94
	...

08006ff0 <PendSV_Handler>:
	__asm volatile
 8006ff0:	f3ef 8009 	mrs	r0, PSP
 8006ff4:	f3bf 8f6f 	isb	sy
 8006ff8:	4b15      	ldr	r3, [pc, #84]	; (8007050 <pxCurrentTCBConst>)
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	f01e 0f10 	tst.w	lr, #16
 8007000:	bf08      	it	eq
 8007002:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007006:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800700a:	6010      	str	r0, [r2, #0]
 800700c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007010:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007014:	f380 8811 	msr	BASEPRI, r0
 8007018:	f3bf 8f4f 	dsb	sy
 800701c:	f3bf 8f6f 	isb	sy
 8007020:	f7ff fb26 	bl	8006670 <vTaskSwitchContext>
 8007024:	f04f 0000 	mov.w	r0, #0
 8007028:	f380 8811 	msr	BASEPRI, r0
 800702c:	bc09      	pop	{r0, r3}
 800702e:	6819      	ldr	r1, [r3, #0]
 8007030:	6808      	ldr	r0, [r1, #0]
 8007032:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007036:	f01e 0f10 	tst.w	lr, #16
 800703a:	bf08      	it	eq
 800703c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007040:	f380 8809 	msr	PSP, r0
 8007044:	f3bf 8f6f 	isb	sy
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	f3af 8000 	nop.w

08007050 <pxCurrentTCBConst>:
 8007050:	20016384 	.word	0x20016384

08007054 <SysTick_Handler>:
{
 8007054:	b508      	push	{r3, lr}
	__asm volatile
 8007056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800705a:	f383 8811 	msr	BASEPRI, r3
 800705e:	f3bf 8f6f 	isb	sy
 8007062:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8007066:	f7ff f9cd 	bl	8006404 <xTaskIncrementTick>
 800706a:	b118      	cbz	r0, 8007074 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800706c:	4b03      	ldr	r3, [pc, #12]	; (800707c <SysTick_Handler+0x28>)
 800706e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007072:	601a      	str	r2, [r3, #0]
	__asm volatile
 8007074:	2300      	movs	r3, #0
 8007076:	f383 8811 	msr	BASEPRI, r3
}
 800707a:	bd08      	pop	{r3, pc}
 800707c:	e000ed04 	.word	0xe000ed04

08007080 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007080:	4a08      	ldr	r2, [pc, #32]	; (80070a4 <vPortSetupTimerInterrupt+0x24>)
 8007082:	2300      	movs	r3, #0
 8007084:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007086:	4908      	ldr	r1, [pc, #32]	; (80070a8 <vPortSetupTimerInterrupt+0x28>)
 8007088:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800708a:	4b08      	ldr	r3, [pc, #32]	; (80070ac <vPortSetupTimerInterrupt+0x2c>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4908      	ldr	r1, [pc, #32]	; (80070b0 <vPortSetupTimerInterrupt+0x30>)
 8007090:	fba1 1303 	umull	r1, r3, r1, r3
 8007094:	099b      	lsrs	r3, r3, #6
 8007096:	3b01      	subs	r3, #1
 8007098:	4906      	ldr	r1, [pc, #24]	; (80070b4 <vPortSetupTimerInterrupt+0x34>)
 800709a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800709c:	2307      	movs	r3, #7
 800709e:	6013      	str	r3, [r2, #0]
}
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	e000e010 	.word	0xe000e010
 80070a8:	e000e018 	.word	0xe000e018
 80070ac:	20000c8c 	.word	0x20000c8c
 80070b0:	10624dd3 	.word	0x10624dd3
 80070b4:	e000e014 	.word	0xe000e014

080070b8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80070b8:	4b3c      	ldr	r3, [pc, #240]	; (80071ac <xPortStartScheduler+0xf4>)
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	4b3c      	ldr	r3, [pc, #240]	; (80071b0 <xPortStartScheduler+0xf8>)
 80070be:	429a      	cmp	r2, r3
 80070c0:	d00d      	beq.n	80070de <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80070c2:	4b3a      	ldr	r3, [pc, #232]	; (80071ac <xPortStartScheduler+0xf4>)
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	4b3b      	ldr	r3, [pc, #236]	; (80071b4 <xPortStartScheduler+0xfc>)
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d111      	bne.n	80070f0 <xPortStartScheduler+0x38>
	__asm volatile
 80070cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d0:	f383 8811 	msr	BASEPRI, r3
 80070d4:	f3bf 8f6f 	isb	sy
 80070d8:	f3bf 8f4f 	dsb	sy
 80070dc:	e7fe      	b.n	80070dc <xPortStartScheduler+0x24>
 80070de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e2:	f383 8811 	msr	BASEPRI, r3
 80070e6:	f3bf 8f6f 	isb	sy
 80070ea:	f3bf 8f4f 	dsb	sy
 80070ee:	e7fe      	b.n	80070ee <xPortStartScheduler+0x36>
{
 80070f0:	b510      	push	{r4, lr}
 80070f2:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80070f4:	4b30      	ldr	r3, [pc, #192]	; (80071b8 <xPortStartScheduler+0x100>)
 80070f6:	781a      	ldrb	r2, [r3, #0]
 80070f8:	b2d2      	uxtb	r2, r2
 80070fa:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80070fc:	22ff      	movs	r2, #255	; 0xff
 80070fe:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	b2db      	uxtb	r3, r3
 8007104:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007108:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800710c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007110:	4a2a      	ldr	r2, [pc, #168]	; (80071bc <xPortStartScheduler+0x104>)
 8007112:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007114:	4b2a      	ldr	r3, [pc, #168]	; (80071c0 <xPortStartScheduler+0x108>)
 8007116:	2207      	movs	r2, #7
 8007118:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800711a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800711e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007122:	d012      	beq.n	800714a <xPortStartScheduler+0x92>
 8007124:	2306      	movs	r3, #6
 8007126:	e000      	b.n	800712a <xPortStartScheduler+0x72>
 8007128:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800712a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800712e:	0052      	lsls	r2, r2, #1
 8007130:	b2d2      	uxtb	r2, r2
 8007132:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007136:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800713a:	1e59      	subs	r1, r3, #1
 800713c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007140:	d1f2      	bne.n	8007128 <xPortStartScheduler+0x70>
 8007142:	4a1f      	ldr	r2, [pc, #124]	; (80071c0 <xPortStartScheduler+0x108>)
 8007144:	6013      	str	r3, [r2, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007146:	2b03      	cmp	r3, #3
 8007148:	d008      	beq.n	800715c <xPortStartScheduler+0xa4>
 800714a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714e:	f383 8811 	msr	BASEPRI, r3
 8007152:	f3bf 8f6f 	isb	sy
 8007156:	f3bf 8f4f 	dsb	sy
 800715a:	e7fe      	b.n	800715a <xPortStartScheduler+0xa2>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800715c:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800715e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007162:	4a17      	ldr	r2, [pc, #92]	; (80071c0 <xPortStartScheduler+0x108>)
 8007164:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007166:	9b01      	ldr	r3, [sp, #4]
 8007168:	b2db      	uxtb	r3, r3
 800716a:	4a13      	ldr	r2, [pc, #76]	; (80071b8 <xPortStartScheduler+0x100>)
 800716c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800716e:	4b15      	ldr	r3, [pc, #84]	; (80071c4 <xPortStartScheduler+0x10c>)
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8007176:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800717e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8007180:	f7ff ff7e 	bl	8007080 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8007184:	2400      	movs	r4, #0
 8007186:	4b10      	ldr	r3, [pc, #64]	; (80071c8 <xPortStartScheduler+0x110>)
 8007188:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800718a:	f7ff febb 	bl	8006f04 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800718e:	4a0f      	ldr	r2, [pc, #60]	; (80071cc <xPortStartScheduler+0x114>)
 8007190:	6813      	ldr	r3, [r2, #0]
 8007192:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007196:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8007198:	f7ff fea0 	bl	8006edc <prvPortStartFirstTask>
	vTaskSwitchContext();
 800719c:	f7ff fa68 	bl	8006670 <vTaskSwitchContext>
	prvTaskExitError();
 80071a0:	f7ff fe7c 	bl	8006e9c <prvTaskExitError>
}
 80071a4:	4620      	mov	r0, r4
 80071a6:	b002      	add	sp, #8
 80071a8:	bd10      	pop	{r4, pc}
 80071aa:	bf00      	nop
 80071ac:	e000ed00 	.word	0xe000ed00
 80071b0:	410fc271 	.word	0x410fc271
 80071b4:	410fc270 	.word	0x410fc270
 80071b8:	e000e400 	.word	0xe000e400
 80071bc:	200169ac 	.word	0x200169ac
 80071c0:	200169b0 	.word	0x200169b0
 80071c4:	e000ed20 	.word	0xe000ed20
 80071c8:	20000c94 	.word	0x20000c94
 80071cc:	e000ef34 	.word	0xe000ef34

080071d0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80071d0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80071d4:	2b0f      	cmp	r3, #15
 80071d6:	d90f      	bls.n	80071f8 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80071d8:	4a10      	ldr	r2, [pc, #64]	; (800721c <vPortValidateInterruptPriority+0x4c>)
 80071da:	5c9b      	ldrb	r3, [r3, r2]
 80071dc:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80071de:	4a10      	ldr	r2, [pc, #64]	; (8007220 <vPortValidateInterruptPriority+0x50>)
 80071e0:	7812      	ldrb	r2, [r2, #0]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d908      	bls.n	80071f8 <vPortValidateInterruptPriority+0x28>
 80071e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ea:	f383 8811 	msr	BASEPRI, r3
 80071ee:	f3bf 8f6f 	isb	sy
 80071f2:	f3bf 8f4f 	dsb	sy
 80071f6:	e7fe      	b.n	80071f6 <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80071f8:	4b0a      	ldr	r3, [pc, #40]	; (8007224 <vPortValidateInterruptPriority+0x54>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007200:	4a09      	ldr	r2, [pc, #36]	; (8007228 <vPortValidateInterruptPriority+0x58>)
 8007202:	6812      	ldr	r2, [r2, #0]
 8007204:	4293      	cmp	r3, r2
 8007206:	d908      	bls.n	800721a <vPortValidateInterruptPriority+0x4a>
 8007208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720c:	f383 8811 	msr	BASEPRI, r3
 8007210:	f3bf 8f6f 	isb	sy
 8007214:	f3bf 8f4f 	dsb	sy
 8007218:	e7fe      	b.n	8007218 <vPortValidateInterruptPriority+0x48>
	}
 800721a:	4770      	bx	lr
 800721c:	e000e3f0 	.word	0xe000e3f0
 8007220:	200169ac 	.word	0x200169ac
 8007224:	e000ed0c 	.word	0xe000ed0c
 8007228:	200169b0 	.word	0x200169b0

0800722c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800722c:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800722e:	4b13      	ldr	r3, [pc, #76]	; (800727c <prvInsertBlockIntoFreeList+0x50>)
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	4282      	cmp	r2, r0
 8007234:	d31b      	bcc.n	800726e <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007236:	685c      	ldr	r4, [r3, #4]
 8007238:	1919      	adds	r1, r3, r4
 800723a:	4288      	cmp	r0, r1
 800723c:	d103      	bne.n	8007246 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800723e:	6841      	ldr	r1, [r0, #4]
 8007240:	4421      	add	r1, r4
 8007242:	6059      	str	r1, [r3, #4]
 8007244:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007246:	6841      	ldr	r1, [r0, #4]
 8007248:	1844      	adds	r4, r0, r1
 800724a:	42a2      	cmp	r2, r4
 800724c:	d113      	bne.n	8007276 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800724e:	4c0c      	ldr	r4, [pc, #48]	; (8007280 <prvInsertBlockIntoFreeList+0x54>)
 8007250:	6824      	ldr	r4, [r4, #0]
 8007252:	42a2      	cmp	r2, r4
 8007254:	d00d      	beq.n	8007272 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007256:	6852      	ldr	r2, [r2, #4]
 8007258:	440a      	add	r2, r1
 800725a:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	6812      	ldr	r2, [r2, #0]
 8007260:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007262:	4298      	cmp	r0, r3
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007264:	bf18      	it	ne
 8007266:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007268:	f85d 4b04 	ldr.w	r4, [sp], #4
 800726c:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800726e:	4613      	mov	r3, r2
 8007270:	e7de      	b.n	8007230 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007272:	6002      	str	r2, [r0, #0]
 8007274:	e7f5      	b.n	8007262 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007276:	6002      	str	r2, [r0, #0]
 8007278:	e7f3      	b.n	8007262 <prvInsertBlockIntoFreeList+0x36>
 800727a:	bf00      	nop
 800727c:	200190d4 	.word	0x200190d4
 8007280:	200169b4 	.word	0x200169b4

08007284 <pvPortMalloc>:
{
 8007284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007286:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8007288:	f7ff f8ae 	bl	80063e8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800728c:	4b45      	ldr	r3, [pc, #276]	; (80073a4 <pvPortMalloc+0x120>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	b1b3      	cbz	r3, 80072c0 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007292:	4b45      	ldr	r3, [pc, #276]	; (80073a8 <pvPortMalloc+0x124>)
 8007294:	681f      	ldr	r7, [r3, #0]
 8007296:	4227      	tst	r7, r4
 8007298:	d17a      	bne.n	8007390 <pvPortMalloc+0x10c>
			if( xWantedSize > 0 )
 800729a:	2c00      	cmp	r4, #0
 800729c:	d07c      	beq.n	8007398 <pvPortMalloc+0x114>
				xWantedSize += xHeapStructSize;
 800729e:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80072a2:	f013 0f07 	tst.w	r3, #7
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80072a6:	bf1c      	itt	ne
 80072a8:	f023 0307 	bicne.w	r3, r3, #7
 80072ac:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d06e      	beq.n	8007390 <pvPortMalloc+0x10c>
 80072b2:	4a3e      	ldr	r2, [pc, #248]	; (80073ac <pvPortMalloc+0x128>)
 80072b4:	6816      	ldr	r6, [r2, #0]
 80072b6:	429e      	cmp	r6, r3
 80072b8:	d36a      	bcc.n	8007390 <pvPortMalloc+0x10c>
				pxBlock = xStart.pxNextFreeBlock;
 80072ba:	4a3d      	ldr	r2, [pc, #244]	; (80073b0 <pvPortMalloc+0x12c>)
 80072bc:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80072be:	e028      	b.n	8007312 <pvPortMalloc+0x8e>
	uxAddress = ( size_t ) ucHeap;
 80072c0:	4b3c      	ldr	r3, [pc, #240]	; (80073b4 <pvPortMalloc+0x130>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80072c2:	f013 0f07 	tst.w	r3, #7
 80072c6:	d01f      	beq.n	8007308 <pvPortMalloc+0x84>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80072c8:	1dd9      	adds	r1, r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072ca:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80072ce:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 80072d2:	3310      	adds	r3, #16
 80072d4:	1a5a      	subs	r2, r3, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072d6:	460b      	mov	r3, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80072d8:	4835      	ldr	r0, [pc, #212]	; (80073b0 <pvPortMalloc+0x12c>)
 80072da:	6003      	str	r3, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80072dc:	2100      	movs	r1, #0
 80072de:	6041      	str	r1, [r0, #4]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80072e0:	441a      	add	r2, r3
	uxAddress -= xHeapStructSize;
 80072e2:	3a08      	subs	r2, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072e4:	f022 0207 	bic.w	r2, r2, #7
	pxEnd = ( void * ) uxAddress;
 80072e8:	482e      	ldr	r0, [pc, #184]	; (80073a4 <pvPortMalloc+0x120>)
 80072ea:	6002      	str	r2, [r0, #0]
	pxEnd->xBlockSize = 0;
 80072ec:	6051      	str	r1, [r2, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80072ee:	6011      	str	r1, [r2, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80072f0:	1ad1      	subs	r1, r2, r3
 80072f2:	6059      	str	r1, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80072f4:	601a      	str	r2, [r3, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072f6:	4b30      	ldr	r3, [pc, #192]	; (80073b8 <pvPortMalloc+0x134>)
 80072f8:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072fa:	4b2c      	ldr	r3, [pc, #176]	; (80073ac <pvPortMalloc+0x128>)
 80072fc:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80072fe:	4b2a      	ldr	r3, [pc, #168]	; (80073a8 <pvPortMalloc+0x124>)
 8007300:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007304:	601a      	str	r2, [r3, #0]
 8007306:	e7c4      	b.n	8007292 <pvPortMalloc+0xe>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007308:	f242 7210 	movw	r2, #10000	; 0x2710
 800730c:	e7e4      	b.n	80072d8 <pvPortMalloc+0x54>
 800730e:	4622      	mov	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8007310:	460c      	mov	r4, r1
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007312:	6861      	ldr	r1, [r4, #4]
 8007314:	4299      	cmp	r1, r3
 8007316:	d202      	bcs.n	800731e <pvPortMalloc+0x9a>
 8007318:	6821      	ldr	r1, [r4, #0]
 800731a:	2900      	cmp	r1, #0
 800731c:	d1f7      	bne.n	800730e <pvPortMalloc+0x8a>
				if( pxBlock != pxEnd )
 800731e:	4921      	ldr	r1, [pc, #132]	; (80073a4 <pvPortMalloc+0x120>)
 8007320:	6809      	ldr	r1, [r1, #0]
 8007322:	42a1      	cmp	r1, r4
 8007324:	d034      	beq.n	8007390 <pvPortMalloc+0x10c>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007326:	6815      	ldr	r5, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007328:	6821      	ldr	r1, [r4, #0]
 800732a:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800732c:	6862      	ldr	r2, [r4, #4]
 800732e:	1ad2      	subs	r2, r2, r3
 8007330:	2a10      	cmp	r2, #16
 8007332:	d910      	bls.n	8007356 <pvPortMalloc+0xd2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007334:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007336:	f010 0f07 	tst.w	r0, #7
 800733a:	d008      	beq.n	800734e <pvPortMalloc+0xca>
 800733c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007340:	f383 8811 	msr	BASEPRI, r3
 8007344:	f3bf 8f6f 	isb	sy
 8007348:	f3bf 8f4f 	dsb	sy
 800734c:	e7fe      	b.n	800734c <pvPortMalloc+0xc8>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800734e:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007350:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007352:	f7ff ff6b 	bl	800722c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007356:	6862      	ldr	r2, [r4, #4]
 8007358:	1ab6      	subs	r6, r6, r2
 800735a:	4914      	ldr	r1, [pc, #80]	; (80073ac <pvPortMalloc+0x128>)
 800735c:	600e      	str	r6, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800735e:	4916      	ldr	r1, [pc, #88]	; (80073b8 <pvPortMalloc+0x134>)
 8007360:	6809      	ldr	r1, [r1, #0]
 8007362:	428e      	cmp	r6, r1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007364:	bf3c      	itt	cc
 8007366:	4914      	ldrcc	r1, [pc, #80]	; (80073b8 <pvPortMalloc+0x134>)
 8007368:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800736a:	3508      	adds	r5, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800736c:	4317      	orrs	r7, r2
 800736e:	6067      	str	r7, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007370:	2300      	movs	r3, #0
 8007372:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 8007374:	f7ff f8da 	bl	800652c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007378:	f015 0f07 	tst.w	r5, #7
 800737c:	d00f      	beq.n	800739e <pvPortMalloc+0x11a>
 800737e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007382:	f383 8811 	msr	BASEPRI, r3
 8007386:	f3bf 8f6f 	isb	sy
 800738a:	f3bf 8f4f 	dsb	sy
 800738e:	e7fe      	b.n	800738e <pvPortMalloc+0x10a>
	( void ) xTaskResumeAll();
 8007390:	f7ff f8cc 	bl	800652c <xTaskResumeAll>
 8007394:	2500      	movs	r5, #0
 8007396:	e002      	b.n	800739e <pvPortMalloc+0x11a>
 8007398:	f7ff f8c8 	bl	800652c <xTaskResumeAll>
void *pvReturn = NULL;
 800739c:	2500      	movs	r5, #0
}
 800739e:	4628      	mov	r0, r5
 80073a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073a2:	bf00      	nop
 80073a4:	200169b4 	.word	0x200169b4
 80073a8:	200190c8 	.word	0x200190c8
 80073ac:	200190cc 	.word	0x200190cc
 80073b0:	200190d4 	.word	0x200190d4
 80073b4:	200169b8 	.word	0x200169b8
 80073b8:	200190d0 	.word	0x200190d0

080073bc <vPortFree>:
	if( pv != NULL )
 80073bc:	b378      	cbz	r0, 800741e <vPortFree+0x62>
{
 80073be:	b510      	push	{r4, lr}
 80073c0:	4604      	mov	r4, r0
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80073c2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80073c6:	4a16      	ldr	r2, [pc, #88]	; (8007420 <vPortFree+0x64>)
 80073c8:	6812      	ldr	r2, [r2, #0]
 80073ca:	4213      	tst	r3, r2
 80073cc:	d108      	bne.n	80073e0 <vPortFree+0x24>
 80073ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d2:	f383 8811 	msr	BASEPRI, r3
 80073d6:	f3bf 8f6f 	isb	sy
 80073da:	f3bf 8f4f 	dsb	sy
 80073de:	e7fe      	b.n	80073de <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80073e0:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80073e4:	b141      	cbz	r1, 80073f8 <vPortFree+0x3c>
 80073e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ea:	f383 8811 	msr	BASEPRI, r3
 80073ee:	f3bf 8f6f 	isb	sy
 80073f2:	f3bf 8f4f 	dsb	sy
 80073f6:	e7fe      	b.n	80073f6 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80073f8:	ea23 0302 	bic.w	r3, r3, r2
 80073fc:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8007400:	f7fe fff2 	bl	80063e8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007404:	4a07      	ldr	r2, [pc, #28]	; (8007424 <vPortFree+0x68>)
 8007406:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800740a:	6811      	ldr	r1, [r2, #0]
 800740c:	440b      	add	r3, r1
 800740e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007410:	f1a4 0008 	sub.w	r0, r4, #8
 8007414:	f7ff ff0a 	bl	800722c <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8007418:	f7ff f888 	bl	800652c <xTaskResumeAll>
}
 800741c:	bd10      	pop	{r4, pc}
 800741e:	4770      	bx	lr
 8007420:	200190c8 	.word	0x200190c8
 8007424:	200190cc 	.word	0x200190cc

08007428 <__libc_init_array>:
 8007428:	b570      	push	{r4, r5, r6, lr}
 800742a:	4e0d      	ldr	r6, [pc, #52]	; (8007460 <__libc_init_array+0x38>)
 800742c:	4c0d      	ldr	r4, [pc, #52]	; (8007464 <__libc_init_array+0x3c>)
 800742e:	1ba4      	subs	r4, r4, r6
 8007430:	10a4      	asrs	r4, r4, #2
 8007432:	2500      	movs	r5, #0
 8007434:	42a5      	cmp	r5, r4
 8007436:	d109      	bne.n	800744c <__libc_init_array+0x24>
 8007438:	4e0b      	ldr	r6, [pc, #44]	; (8007468 <__libc_init_array+0x40>)
 800743a:	4c0c      	ldr	r4, [pc, #48]	; (800746c <__libc_init_array+0x44>)
 800743c:	f000 f82c 	bl	8007498 <_init>
 8007440:	1ba4      	subs	r4, r4, r6
 8007442:	10a4      	asrs	r4, r4, #2
 8007444:	2500      	movs	r5, #0
 8007446:	42a5      	cmp	r5, r4
 8007448:	d105      	bne.n	8007456 <__libc_init_array+0x2e>
 800744a:	bd70      	pop	{r4, r5, r6, pc}
 800744c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007450:	4798      	blx	r3
 8007452:	3501      	adds	r5, #1
 8007454:	e7ee      	b.n	8007434 <__libc_init_array+0xc>
 8007456:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800745a:	4798      	blx	r3
 800745c:	3501      	adds	r5, #1
 800745e:	e7f2      	b.n	8007446 <__libc_init_array+0x1e>
 8007460:	0801a110 	.word	0x0801a110
 8007464:	0801a110 	.word	0x0801a110
 8007468:	0801a110 	.word	0x0801a110
 800746c:	0801a114 	.word	0x0801a114

08007470 <memcpy>:
 8007470:	b510      	push	{r4, lr}
 8007472:	1e43      	subs	r3, r0, #1
 8007474:	440a      	add	r2, r1
 8007476:	4291      	cmp	r1, r2
 8007478:	d100      	bne.n	800747c <memcpy+0xc>
 800747a:	bd10      	pop	{r4, pc}
 800747c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007480:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007484:	e7f7      	b.n	8007476 <memcpy+0x6>

08007486 <memset>:
 8007486:	4402      	add	r2, r0
 8007488:	4603      	mov	r3, r0
 800748a:	4293      	cmp	r3, r2
 800748c:	d100      	bne.n	8007490 <memset+0xa>
 800748e:	4770      	bx	lr
 8007490:	f803 1b01 	strb.w	r1, [r3], #1
 8007494:	e7f9      	b.n	800748a <memset+0x4>
	...

08007498 <_init>:
 8007498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800749a:	bf00      	nop
 800749c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800749e:	bc08      	pop	{r3}
 80074a0:	469e      	mov	lr, r3
 80074a2:	4770      	bx	lr

080074a4 <_fini>:
 80074a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074a6:	bf00      	nop
 80074a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80074aa:	bc08      	pop	{r3}
 80074ac:	469e      	mov	lr, r3
 80074ae:	4770      	bx	lr
